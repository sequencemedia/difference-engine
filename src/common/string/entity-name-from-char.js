/*
 *  https://dev.w3.org/html5/html-author/charref
 *
 *  April 17th 2022, 8:58:06
 */

export default {
  [String.fromCodePoint(9)]: '&Tab;' /* CHARACTER TABULATION */,
  [String.fromCodePoint(10)]: '&NewLine;' /* LINE FEED (LF) */,
  [String.fromCodePoint(33)]: '&excl;' /* EXCLAMATION MARK */,
  [String.fromCodePoint(34)]: '&QUOT;' /* QUOTATION MARK */,
  [String.fromCodePoint(35)]: '&num;' /* NUMBER SIGN */,
  [String.fromCodePoint(36)]: '&dollar;' /* DOLLAR SIGN */,
  [String.fromCodePoint(37)]: '&percnt;' /* PERCENT SIGN */,
  [String.fromCodePoint(38)]: '&AMP;' /* AMPERSAND */,
  [String.fromCodePoint(39)]: '&apos;' /* APOSTROPHE */,
  [String.fromCodePoint(40)]: '&lpar;' /* LEFT PARENTHESIS */,
  [String.fromCodePoint(41)]: '&rpar;' /* RIGHT PARENTHESIS */,
  [String.fromCodePoint(42)]: '&midast;' /* ASTERISK */,
  [String.fromCodePoint(43)]: '&plus;' /* PLUS SIGN */,
  [String.fromCodePoint(44)]: '&comma;' /* COMMA */,
  [String.fromCodePoint(46)]: '&period;' /* FULL STOP */,
  [String.fromCodePoint(47)]: '&sol;' /* SOLIDUS */,
  [String.fromCodePoint(58)]: '&colon;' /* COLON */,
  [String.fromCodePoint(59)]: '&semi;' /* SEMICOLON */,
  [String.fromCodePoint(60)]: '&LT;' /* LESS-THAN SIGN */,
  [String.fromCodePoint(61)]: '&equals;' /* EQUALS SIGN */,
  [String.fromCodePoint(62)]: '&GT;' /* GREATER-THAN SIGN */,
  [String.fromCodePoint(63)]: '&quest;' /* QUESTION MARK */,
  [String.fromCodePoint(64)]: '&commat;' /* COMMERCIAL AT */,
  [String.fromCodePoint(91)]: '&lbrack;' /* LEFT SQUARE BRACKET */,
  [String.fromCodePoint(92)]: '&bsol;' /* REVERSE SOLIDUS */,
  [String.fromCodePoint(93)]: '&rbrack;' /* RIGHT SQUARE BRACKET */,
  [String.fromCodePoint(94)]: '&Hat;' /* CIRCUMFLEX ACCENT */,
  [String.fromCodePoint(95)]: '&lowbar;' /* LOW LINE */,
  [String.fromCodePoint(96)]: '&DiacriticalGrave;' /* GRAVE ACCENT */,
  [String.fromCodePoint(123)]: '&lbrace;' /* LEFT CURLY BRACKET */,
  [String.fromCodePoint(124)]: '&VerticalLine;' /* VERTICAL LINE */,
  [String.fromCodePoint(125)]: '&rbrace;' /* RIGHT CURLY BRACKET */,
  [String.fromCodePoint(160)]: '&NonBreakingSpace;' /* NO-BREAK SPACE */,
  [String.fromCodePoint(161)]: '&iexcl;' /* INVERTED EXCLAMATION MARK */,
  [String.fromCodePoint(162)]: '&cent;' /* CENT SIGN */,
  [String.fromCodePoint(163)]: '&pound;' /* POUND SIGN */,
  [String.fromCodePoint(164)]: '&curren;' /* CURRENCY SIGN */,
  [String.fromCodePoint(165)]: '&yen;' /* YEN SIGN */,
  [String.fromCodePoint(166)]: '&brvbar;' /* BROKEN BAR */,
  [String.fromCodePoint(167)]: '&sect;' /* SECTION SIGN */,
  [String.fromCodePoint(168)]: '&uml;' /* DIAERESIS */,
  [String.fromCodePoint(169)]: '&COPY;' /* COPYRIGHT SIGN */,
  [String.fromCodePoint(170)]: '&ordf;' /* FEMININE ORDINAL INDICATOR */,
  [String.fromCodePoint(171)]: '&laquo;' /* LEFT-POINTING DOUBLE ANGLE QUOTATION MARK */,
  [String.fromCodePoint(172)]: '&not;' /* NOT SIGN */,
  [String.fromCodePoint(173)]: '&shy;' /* SOFT HYPHEN */,
  [String.fromCodePoint(174)]: '&REG;' /* REGISTERED SIGN */,
  [String.fromCodePoint(175)]: '&strns;' /* MACRON */,
  [String.fromCodePoint(176)]: '&deg;' /* DEGREE SIGN */,
  [String.fromCodePoint(177)]: '&PlusMinus;' /* PLUS-MINUS SIGN */,
  [String.fromCodePoint(178)]: '&sup2;' /* SUPERSCRIPT TWO */,
  [String.fromCodePoint(179)]: '&sup3;' /* SUPERSCRIPT THREE */,
  [String.fromCodePoint(180)]: '&DiacriticalAcute;' /* ACUTE ACCENT */,
  [String.fromCodePoint(181)]: '&micro;' /* MICRO SIGN */,
  [String.fromCodePoint(182)]: '&para;' /* PILCROW SIGN */,
  [String.fromCodePoint(183)]: '&CenterDot;' /* MIDDLE DOT */,
  [String.fromCodePoint(184)]: '&Cedilla;' /* CEDILLA */,
  [String.fromCodePoint(185)]: '&sup1;' /* SUPERSCRIPT ONE */,
  [String.fromCodePoint(186)]: '&ordm;' /* MASCULINE ORDINAL INDICATOR */,
  [String.fromCodePoint(187)]: '&raquo;' /* RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK */,
  [String.fromCodePoint(188)]: '&frac14;' /* VULGAR FRACTION ONE QUARTER */,
  [String.fromCodePoint(189)]: '&half;' /* VULGAR FRACTION ONE HALF */,
  [String.fromCodePoint(190)]: '&frac34;' /* VULGAR FRACTION THREE QUARTERS */,
  [String.fromCodePoint(191)]: '&iquest;' /* INVERTED QUESTION MARK */,
  [String.fromCodePoint(192)]: '&Agrave;' /* LATIN CAPITAL LETTER A WITH GRAVE */,
  [String.fromCodePoint(193)]: '&Aacute;' /* LATIN CAPITAL LETTER A WITH ACUTE */,
  [String.fromCodePoint(194)]: '&Acirc;' /* LATIN CAPITAL LETTER A WITH CIRCUMFLEX */,
  [String.fromCodePoint(195)]: '&Atilde;' /* LATIN CAPITAL LETTER A WITH TILDE */,
  [String.fromCodePoint(196)]: '&Auml;' /* LATIN CAPITAL LETTER A WITH DIAERESIS */,
  [String.fromCodePoint(197)]: '&Aring;' /* LATIN CAPITAL LETTER A WITH RING ABOVE */,
  [String.fromCodePoint(198)]: '&AElig;' /* LATIN CAPITAL LETTER AE */,
  [String.fromCodePoint(199)]: '&Ccedil;' /* LATIN CAPITAL LETTER C WITH CEDILLA */,
  [String.fromCodePoint(200)]: '&Egrave;' /* LATIN CAPITAL LETTER E WITH GRAVE */,
  [String.fromCodePoint(201)]: '&Eacute;' /* LATIN CAPITAL LETTER E WITH ACUTE */,
  [String.fromCodePoint(202)]: '&Ecirc;' /* LATIN CAPITAL LETTER E WITH CIRCUMFLEX */,
  [String.fromCodePoint(203)]: '&Euml;' /* LATIN CAPITAL LETTER E WITH DIAERESIS */,
  [String.fromCodePoint(204)]: '&Igrave;' /* LATIN CAPITAL LETTER I WITH GRAVE */,
  [String.fromCodePoint(205)]: '&Iacute;' /* LATIN CAPITAL LETTER I WITH ACUTE */,
  [String.fromCodePoint(206)]: '&Icirc;' /* LATIN CAPITAL LETTER I WITH CIRCUMFLEX */,
  [String.fromCodePoint(207)]: '&Iuml;' /* LATIN CAPITAL LETTER I WITH DIAERESIS */,
  [String.fromCodePoint(208)]: '&ETH;' /* LATIN CAPITAL LETTER ETH */,
  [String.fromCodePoint(209)]: '&Ntilde;' /* LATIN CAPITAL LETTER N WITH TILDE */,
  [String.fromCodePoint(210)]: '&Ograve;' /* LATIN CAPITAL LETTER O WITH GRAVE */,
  [String.fromCodePoint(211)]: '&Oacute;' /* LATIN CAPITAL LETTER O WITH ACUTE */,
  [String.fromCodePoint(212)]: '&Ocirc;' /* LATIN CAPITAL LETTER O WITH CIRCUMFLEX */,
  [String.fromCodePoint(213)]: '&Otilde;' /* LATIN CAPITAL LETTER O WITH TILDE */,
  [String.fromCodePoint(214)]: '&Ouml;' /* LATIN CAPITAL LETTER O WITH DIAERESIS */,
  [String.fromCodePoint(215)]: '&times;' /* MULTIPLICATION SIGN */,
  [String.fromCodePoint(216)]: '&Oslash;' /* LATIN CAPITAL LETTER O WITH STROKE */,
  [String.fromCodePoint(217)]: '&Ugrave;' /* LATIN CAPITAL LETTER U WITH GRAVE */,
  [String.fromCodePoint(218)]: '&Uacute;' /* LATIN CAPITAL LETTER U WITH ACUTE */,
  [String.fromCodePoint(219)]: '&Ucirc;' /* LATIN CAPITAL LETTER U WITH CIRCUMFLEX */,
  [String.fromCodePoint(220)]: '&Uuml;' /* LATIN CAPITAL LETTER U WITH DIAERESIS */,
  [String.fromCodePoint(221)]: '&Yacute;' /* LATIN CAPITAL LETTER Y WITH ACUTE */,
  [String.fromCodePoint(222)]: '&THORN;' /* LATIN CAPITAL LETTER THORN */,
  [String.fromCodePoint(223)]: '&szlig;' /* LATIN SMALL LETTER SHARP S */,
  [String.fromCodePoint(224)]: '&agrave;' /* LATIN SMALL LETTER A WITH GRAVE */,
  [String.fromCodePoint(225)]: '&aacute;' /* LATIN SMALL LETTER A WITH ACUTE */,
  [String.fromCodePoint(226)]: '&acirc;' /* LATIN SMALL LETTER A WITH CIRCUMFLEX */,
  [String.fromCodePoint(227)]: '&atilde;' /* LATIN SMALL LETTER A WITH TILDE */,
  [String.fromCodePoint(228)]: '&auml;' /* LATIN SMALL LETTER A WITH DIAERESIS */,
  [String.fromCodePoint(229)]: '&aring;' /* LATIN SMALL LETTER A WITH RING ABOVE */,
  [String.fromCodePoint(230)]: '&aelig;' /* LATIN SMALL LETTER AE */,
  [String.fromCodePoint(231)]: '&ccedil;' /* LATIN SMALL LETTER C WITH CEDILLA */,
  [String.fromCodePoint(232)]: '&egrave;' /* LATIN SMALL LETTER E WITH GRAVE */,
  [String.fromCodePoint(233)]: '&eacute;' /* LATIN SMALL LETTER E WITH ACUTE */,
  [String.fromCodePoint(234)]: '&ecirc;' /* LATIN SMALL LETTER E WITH CIRCUMFLEX */,
  [String.fromCodePoint(235)]: '&euml;' /* LATIN SMALL LETTER E WITH DIAERESIS */,
  [String.fromCodePoint(236)]: '&igrave;' /* LATIN SMALL LETTER I WITH GRAVE */,
  [String.fromCodePoint(237)]: '&iacute;' /* LATIN SMALL LETTER I WITH ACUTE */,
  [String.fromCodePoint(238)]: '&icirc;' /* LATIN SMALL LETTER I WITH CIRCUMFLEX */,
  [String.fromCodePoint(239)]: '&iuml;' /* LATIN SMALL LETTER I WITH DIAERESIS */,
  [String.fromCodePoint(240)]: '&eth;' /* LATIN SMALL LETTER ETH */,
  [String.fromCodePoint(241)]: '&ntilde;' /* LATIN SMALL LETTER N WITH TILDE */,
  [String.fromCodePoint(242)]: '&ograve;' /* LATIN SMALL LETTER O WITH GRAVE */,
  [String.fromCodePoint(243)]: '&oacute;' /* LATIN SMALL LETTER O WITH ACUTE */,
  [String.fromCodePoint(244)]: '&ocirc;' /* LATIN SMALL LETTER O WITH CIRCUMFLEX */,
  [String.fromCodePoint(245)]: '&otilde;' /* LATIN SMALL LETTER O WITH TILDE */,
  [String.fromCodePoint(246)]: '&ouml;' /* LATIN SMALL LETTER O WITH DIAERESIS */,
  [String.fromCodePoint(247)]: '&div;' /* DIVISION SIGN */,
  [String.fromCodePoint(248)]: '&oslash;' /* LATIN SMALL LETTER O WITH STROKE */,
  [String.fromCodePoint(249)]: '&ugrave;' /* LATIN SMALL LETTER U WITH GRAVE */,
  [String.fromCodePoint(250)]: '&uacute;' /* LATIN SMALL LETTER U WITH ACUTE */,
  [String.fromCodePoint(251)]: '&ucirc;' /* LATIN SMALL LETTER U WITH CIRCUMFLEX */,
  [String.fromCodePoint(252)]: '&uuml;' /* LATIN SMALL LETTER U WITH DIAERESIS */,
  [String.fromCodePoint(253)]: '&yacute;' /* LATIN SMALL LETTER Y WITH ACUTE */,
  [String.fromCodePoint(254)]: '&thorn;' /* LATIN SMALL LETTER THORN */,
  [String.fromCodePoint(255)]: '&yuml;' /* LATIN SMALL LETTER Y WITH DIAERESIS */,
  [String.fromCodePoint(256)]: '&Amacr;' /* LATIN CAPITAL LETTER A WITH MACRON */,
  [String.fromCodePoint(257)]: '&amacr;' /* LATIN SMALL LETTER A WITH MACRON */,
  [String.fromCodePoint(258)]: '&Abreve;' /* LATIN CAPITAL LETTER A WITH BREVE */,
  [String.fromCodePoint(259)]: '&abreve;' /* LATIN SMALL LETTER A WITH BREVE */,
  [String.fromCodePoint(260)]: '&Aogon;' /* LATIN CAPITAL LETTER A WITH OGONEK */,
  [String.fromCodePoint(261)]: '&aogon;' /* LATIN SMALL LETTER A WITH OGONEK */,
  [String.fromCodePoint(262)]: '&Cacute;' /* LATIN CAPITAL LETTER C WITH ACUTE */,
  [String.fromCodePoint(263)]: '&cacute;' /* LATIN SMALL LETTER C WITH ACUTE */,
  [String.fromCodePoint(264)]: '&Ccirc;' /* LATIN CAPITAL LETTER C WITH CIRCUMFLEX */,
  [String.fromCodePoint(265)]: '&ccirc;' /* LATIN SMALL LETTER C WITH CIRCUMFLEX */,
  [String.fromCodePoint(266)]: '&Cdot;' /* LATIN CAPITAL LETTER C WITH DOT ABOVE */,
  [String.fromCodePoint(267)]: '&cdot;' /* LATIN SMALL LETTER C WITH DOT ABOVE */,
  [String.fromCodePoint(268)]: '&Ccaron;' /* LATIN CAPITAL LETTER C WITH CARON */,
  [String.fromCodePoint(269)]: '&ccaron;' /* LATIN SMALL LETTER C WITH CARON */,
  [String.fromCodePoint(270)]: '&Dcaron;' /* LATIN CAPITAL LETTER D WITH CARON */,
  [String.fromCodePoint(271)]: '&dcaron;' /* LATIN SMALL LETTER D WITH CARON */,
  [String.fromCodePoint(272)]: '&Dstrok;' /* LATIN CAPITAL LETTER D WITH STROKE */,
  [String.fromCodePoint(273)]: '&dstrok;' /* LATIN SMALL LETTER D WITH STROKE */,
  [String.fromCodePoint(274)]: '&Emacr;' /* LATIN CAPITAL LETTER E WITH MACRON */,
  [String.fromCodePoint(275)]: '&emacr;' /* LATIN SMALL LETTER E WITH MACRON */,
  [String.fromCodePoint(278)]: '&Edot;' /* LATIN CAPITAL LETTER E WITH DOT ABOVE */,
  [String.fromCodePoint(279)]: '&edot;' /* LATIN SMALL LETTER E WITH DOT ABOVE */,
  [String.fromCodePoint(280)]: '&Eogon;' /* LATIN CAPITAL LETTER E WITH OGONEK */,
  [String.fromCodePoint(281)]: '&eogon;' /* LATIN SMALL LETTER E WITH OGONEK */,
  [String.fromCodePoint(282)]: '&Ecaron;' /* LATIN CAPITAL LETTER E WITH CARON */,
  [String.fromCodePoint(283)]: '&ecaron;' /* LATIN SMALL LETTER E WITH CARON */,
  [String.fromCodePoint(284)]: '&Gcirc;' /* LATIN CAPITAL LETTER G WITH CIRCUMFLEX */,
  [String.fromCodePoint(285)]: '&gcirc;' /* LATIN SMALL LETTER G WITH CIRCUMFLEX */,
  [String.fromCodePoint(286)]: '&Gbreve;' /* LATIN CAPITAL LETTER G WITH BREVE */,
  [String.fromCodePoint(287)]: '&gbreve;' /* LATIN SMALL LETTER G WITH BREVE */,
  [String.fromCodePoint(288)]: '&Gdot;' /* LATIN CAPITAL LETTER G WITH DOT ABOVE */,
  [String.fromCodePoint(289)]: '&gdot;' /* LATIN SMALL LETTER G WITH DOT ABOVE */,
  [String.fromCodePoint(290)]: '&Gcedil;' /* LATIN CAPITAL LETTER G WITH CEDILLA */,
  [String.fromCodePoint(292)]: '&Hcirc;' /* LATIN CAPITAL LETTER H WITH CIRCUMFLEX */,
  [String.fromCodePoint(293)]: '&hcirc;' /* LATIN SMALL LETTER H WITH CIRCUMFLEX */,
  [String.fromCodePoint(294)]: '&Hstrok;' /* LATIN CAPITAL LETTER H WITH STROKE */,
  [String.fromCodePoint(295)]: '&hstrok;' /* LATIN SMALL LETTER H WITH STROKE */,
  [String.fromCodePoint(296)]: '&Itilde;' /* LATIN CAPITAL LETTER I WITH TILDE */,
  [String.fromCodePoint(297)]: '&itilde;' /* LATIN SMALL LETTER I WITH TILDE */,
  [String.fromCodePoint(298)]: '&Imacr;' /* LATIN CAPITAL LETTER I WITH MACRON */,
  [String.fromCodePoint(299)]: '&imacr;' /* LATIN SMALL LETTER I WITH MACRON */,
  [String.fromCodePoint(302)]: '&Iogon;' /* LATIN CAPITAL LETTER I WITH OGONEK */,
  [String.fromCodePoint(303)]: '&iogon;' /* LATIN SMALL LETTER I WITH OGONEK */,
  [String.fromCodePoint(304)]: '&Idot;' /* LATIN CAPITAL LETTER I WITH DOT ABOVE */,
  [String.fromCodePoint(305)]: '&inodot;' /* LATIN SMALL LETTER DOTLESS I */,
  [String.fromCodePoint(306)]: '&IJlig;' /* LATIN CAPITAL LIGATURE IJ */,
  [String.fromCodePoint(307)]: '&ijlig;' /* LATIN SMALL LIGATURE IJ */,
  [String.fromCodePoint(308)]: '&Jcirc;' /* LATIN CAPITAL LETTER J WITH CIRCUMFLEX */,
  [String.fromCodePoint(309)]: '&jcirc;' /* LATIN SMALL LETTER J WITH CIRCUMFLEX */,
  [String.fromCodePoint(310)]: '&Kcedil;' /* LATIN CAPITAL LETTER K WITH CEDILLA */,
  [String.fromCodePoint(311)]: '&kcedil;' /* LATIN SMALL LETTER K WITH CEDILLA */,
  [String.fromCodePoint(312)]: '&kgreen;' /* LATIN SMALL LETTER KRA */,
  [String.fromCodePoint(313)]: '&Lacute;' /* LATIN CAPITAL LETTER L WITH ACUTE */,
  [String.fromCodePoint(314)]: '&lacute;' /* LATIN SMALL LETTER L WITH ACUTE */,
  [String.fromCodePoint(315)]: '&Lcedil;' /* LATIN CAPITAL LETTER L WITH CEDILLA */,
  [String.fromCodePoint(316)]: '&lcedil;' /* LATIN SMALL LETTER L WITH CEDILLA */,
  [String.fromCodePoint(317)]: '&Lcaron;' /* LATIN CAPITAL LETTER L WITH CARON */,
  [String.fromCodePoint(318)]: '&lcaron;' /* LATIN SMALL LETTER L WITH CARON */,
  [String.fromCodePoint(319)]: '&Lmidot;' /* LATIN CAPITAL LETTER L WITH MIDDLE DOT */,
  [String.fromCodePoint(320)]: '&lmidot;' /* LATIN SMALL LETTER L WITH MIDDLE DOT */,
  [String.fromCodePoint(321)]: '&Lstrok;' /* LATIN CAPITAL LETTER L WITH STROKE */,
  [String.fromCodePoint(322)]: '&lstrok;' /* LATIN SMALL LETTER L WITH STROKE */,
  [String.fromCodePoint(323)]: '&Nacute;' /* LATIN CAPITAL LETTER N WITH ACUTE */,
  [String.fromCodePoint(324)]: '&nacute;' /* LATIN SMALL LETTER N WITH ACUTE */,
  [String.fromCodePoint(325)]: '&Ncedil;' /* LATIN CAPITAL LETTER N WITH CEDILLA */,
  [String.fromCodePoint(326)]: '&ncedil;' /* LATIN SMALL LETTER N WITH CEDILLA */,
  [String.fromCodePoint(327)]: '&Ncaron;' /* LATIN CAPITAL LETTER N WITH CARON */,
  [String.fromCodePoint(328)]: '&ncaron;' /* LATIN SMALL LETTER N WITH CARON */,
  [String.fromCodePoint(329)]: '&napos;' /* LATIN SMALL LETTER N PRECEDED BY APOSTROPHE */,
  [String.fromCodePoint(330)]: '&ENG;' /* LATIN CAPITAL LETTER ENG */,
  [String.fromCodePoint(331)]: '&eng;' /* LATIN SMALL LETTER ENG */,
  [String.fromCodePoint(332)]: '&Omacr;' /* LATIN CAPITAL LETTER O WITH MACRON */,
  [String.fromCodePoint(333)]: '&omacr;' /* LATIN SMALL LETTER O WITH MACRON */,
  [String.fromCodePoint(336)]: '&Odblac;' /* LATIN CAPITAL LETTER O WITH DOUBLE ACUTE */,
  [String.fromCodePoint(337)]: '&odblac;' /* LATIN SMALL LETTER O WITH DOUBLE ACUTE */,
  [String.fromCodePoint(338)]: '&OElig;' /* LATIN CAPITAL LIGATURE OE */,
  [String.fromCodePoint(339)]: '&oelig;' /* LATIN SMALL LIGATURE OE */,
  [String.fromCodePoint(340)]: '&Racute;' /* LATIN CAPITAL LETTER R WITH ACUTE */,
  [String.fromCodePoint(341)]: '&racute;' /* LATIN SMALL LETTER R WITH ACUTE */,
  [String.fromCodePoint(342)]: '&Rcedil;' /* LATIN CAPITAL LETTER R WITH CEDILLA */,
  [String.fromCodePoint(343)]: '&rcedil;' /* LATIN SMALL LETTER R WITH CEDILLA */,
  [String.fromCodePoint(344)]: '&Rcaron;' /* LATIN CAPITAL LETTER R WITH CARON */,
  [String.fromCodePoint(345)]: '&rcaron;' /* LATIN SMALL LETTER R WITH CARON */,
  [String.fromCodePoint(346)]: '&Sacute;' /* LATIN CAPITAL LETTER S WITH ACUTE */,
  [String.fromCodePoint(347)]: '&sacute;' /* LATIN SMALL LETTER S WITH ACUTE */,
  [String.fromCodePoint(348)]: '&Scirc;' /* LATIN CAPITAL LETTER S WITH CIRCUMFLEX */,
  [String.fromCodePoint(349)]: '&scirc;' /* LATIN SMALL LETTER S WITH CIRCUMFLEX */,
  [String.fromCodePoint(350)]: '&Scedil;' /* LATIN CAPITAL LETTER S WITH CEDILLA */,
  [String.fromCodePoint(351)]: '&scedil;' /* LATIN SMALL LETTER S WITH CEDILLA */,
  [String.fromCodePoint(352)]: '&Scaron;' /* LATIN CAPITAL LETTER S WITH CARON */,
  [String.fromCodePoint(353)]: '&scaron;' /* LATIN SMALL LETTER S WITH CARON */,
  [String.fromCodePoint(354)]: '&Tcedil;' /* LATIN CAPITAL LETTER T WITH CEDILLA */,
  [String.fromCodePoint(355)]: '&tcedil;' /* LATIN SMALL LETTER T WITH CEDILLA */,
  [String.fromCodePoint(356)]: '&Tcaron;' /* LATIN CAPITAL LETTER T WITH CARON */,
  [String.fromCodePoint(357)]: '&tcaron;' /* LATIN SMALL LETTER T WITH CARON */,
  [String.fromCodePoint(358)]: '&Tstrok;' /* LATIN CAPITAL LETTER T WITH STROKE */,
  [String.fromCodePoint(359)]: '&tstrok;' /* LATIN SMALL LETTER T WITH STROKE */,
  [String.fromCodePoint(360)]: '&Utilde;' /* LATIN CAPITAL LETTER U WITH TILDE */,
  [String.fromCodePoint(361)]: '&utilde;' /* LATIN SMALL LETTER U WITH TILDE */,
  [String.fromCodePoint(362)]: '&Umacr;' /* LATIN CAPITAL LETTER U WITH MACRON */,
  [String.fromCodePoint(363)]: '&umacr;' /* LATIN SMALL LETTER U WITH MACRON */,
  [String.fromCodePoint(364)]: '&Ubreve;' /* LATIN CAPITAL LETTER U WITH BREVE */,
  [String.fromCodePoint(365)]: '&ubreve;' /* LATIN SMALL LETTER U WITH BREVE */,
  [String.fromCodePoint(366)]: '&Uring;' /* LATIN CAPITAL LETTER U WITH RING ABOVE */,
  [String.fromCodePoint(367)]: '&uring;' /* LATIN SMALL LETTER U WITH RING ABOVE */,
  [String.fromCodePoint(368)]: '&Udblac;' /* LATIN CAPITAL LETTER U WITH DOUBLE ACUTE */,
  [String.fromCodePoint(369)]: '&udblac;' /* LATIN SMALL LETTER U WITH DOUBLE ACUTE */,
  [String.fromCodePoint(370)]: '&Uogon;' /* LATIN CAPITAL LETTER U WITH OGONEK */,
  [String.fromCodePoint(371)]: '&uogon;' /* LATIN SMALL LETTER U WITH OGONEK */,
  [String.fromCodePoint(372)]: '&Wcirc;' /* LATIN CAPITAL LETTER W WITH CIRCUMFLEX */,
  [String.fromCodePoint(373)]: '&wcirc;' /* LATIN SMALL LETTER W WITH CIRCUMFLEX */,
  [String.fromCodePoint(374)]: '&Ycirc;' /* LATIN CAPITAL LETTER Y WITH CIRCUMFLEX */,
  [String.fromCodePoint(375)]: '&ycirc;' /* LATIN SMALL LETTER Y WITH CIRCUMFLEX */,
  [String.fromCodePoint(376)]: '&Yuml;' /* LATIN CAPITAL LETTER Y WITH DIAERESIS */,
  [String.fromCodePoint(377)]: '&Zacute;' /* LATIN CAPITAL LETTER Z WITH ACUTE */,
  [String.fromCodePoint(378)]: '&zacute;' /* LATIN SMALL LETTER Z WITH ACUTE */,
  [String.fromCodePoint(379)]: '&Zdot;' /* LATIN CAPITAL LETTER Z WITH DOT ABOVE */,
  [String.fromCodePoint(380)]: '&zdot;' /* LATIN SMALL LETTER Z WITH DOT ABOVE */,
  [String.fromCodePoint(381)]: '&Zcaron;' /* LATIN CAPITAL LETTER Z WITH CARON */,
  [String.fromCodePoint(382)]: '&zcaron;' /* LATIN SMALL LETTER Z WITH CARON */,
  [String.fromCodePoint(402)]: '&fnof;' /* LATIN SMALL LETTER F WITH HOOK */,
  [String.fromCodePoint(437)]: '&imped;' /* LATIN CAPITAL LETTER Z WITH STROKE */,
  [String.fromCodePoint(501)]: '&gacute;' /* LATIN SMALL LETTER G WITH ACUTE */,
  [String.fromCodePoint(567)]: '&jmath;' /* LATIN SMALL LETTER DOTLESS J */,
  [String.fromCodePoint(710)]: '&circ;' /* MODIFIER LETTER CIRCUMFLEX ACCENT */,
  [String.fromCodePoint(711)]: '&Hacek;' /* CARON */,
  [String.fromCodePoint(728)]: '&Breve;' /* BREVE */,
  [String.fromCodePoint(729)]: '&DiacriticalDot;' /* DOT ABOVE */,
  [String.fromCodePoint(730)]: '&ring;' /* RING ABOVE */,
  [String.fromCodePoint(731)]: '&ogon;' /* OGONEK */,
  [String.fromCodePoint(732)]: '&DiacriticalTilde;' /* SMALL TILDE */,
  [String.fromCodePoint(733)]: '&DiacriticalDoubleAcute;' /* DOUBLE ACUTE ACCENT */,
  [String.fromCodePoint(785)]: '&DownBreve;' /* COMBINING INVERTED BREVE */,
  [String.fromCodePoint(818)]: '&UnderBar;' /* COMBINING LOW LINE */,
  [String.fromCodePoint(913)]: '&Alpha;' /* GREEK CAPITAL LETTER ALPHA */,
  [String.fromCodePoint(914)]: '&Beta;' /* GREEK CAPITAL LETTER BETA */,
  [String.fromCodePoint(915)]: '&Gamma;' /* GREEK CAPITAL LETTER GAMMA */,
  [String.fromCodePoint(916)]: '&Delta;' /* GREEK CAPITAL LETTER DELTA */,
  [String.fromCodePoint(917)]: '&Epsilon;' /* GREEK CAPITAL LETTER EPSILON */,
  [String.fromCodePoint(918)]: '&Zeta;' /* GREEK CAPITAL LETTER ZETA */,
  [String.fromCodePoint(919)]: '&Eta;' /* GREEK CAPITAL LETTER ETA */,
  [String.fromCodePoint(920)]: '&Theta;' /* GREEK CAPITAL LETTER THETA */,
  [String.fromCodePoint(921)]: '&Iota;' /* GREEK CAPITAL LETTER IOTA */,
  [String.fromCodePoint(922)]: '&Kappa;' /* GREEK CAPITAL LETTER KAPPA */,
  [String.fromCodePoint(923)]: '&Lambda;' /* GREEK CAPITAL LETTER LAMDA */,
  [String.fromCodePoint(924)]: '&Mu;' /* GREEK CAPITAL LETTER MU */,
  [String.fromCodePoint(925)]: '&Nu;' /* GREEK CAPITAL LETTER NU */,
  [String.fromCodePoint(926)]: '&Xi;' /* GREEK CAPITAL LETTER XI */,
  [String.fromCodePoint(927)]: '&Omicron;' /* GREEK CAPITAL LETTER OMICRON */,
  [String.fromCodePoint(928)]: '&Pi;' /* GREEK CAPITAL LETTER PI */,
  [String.fromCodePoint(929)]: '&Rho;' /* GREEK CAPITAL LETTER RHO */,
  [String.fromCodePoint(931)]: '&Sigma;' /* GREEK CAPITAL LETTER SIGMA */,
  [String.fromCodePoint(932)]: '&Tau;' /* GREEK CAPITAL LETTER TAU */,
  [String.fromCodePoint(933)]: '&Upsilon;' /* GREEK CAPITAL LETTER UPSILON */,
  [String.fromCodePoint(934)]: '&Phi;' /* GREEK CAPITAL LETTER PHI */,
  [String.fromCodePoint(935)]: '&Chi;' /* GREEK CAPITAL LETTER CHI */,
  [String.fromCodePoint(936)]: '&Psi;' /* GREEK CAPITAL LETTER PSI */,
  [String.fromCodePoint(937)]: '&Omega;' /* GREEK CAPITAL LETTER OMEGA */,
  [String.fromCodePoint(945)]: '&alpha;' /* GREEK SMALL LETTER ALPHA */,
  [String.fromCodePoint(946)]: '&beta;' /* GREEK SMALL LETTER BETA */,
  [String.fromCodePoint(947)]: '&gamma;' /* GREEK SMALL LETTER GAMMA */,
  [String.fromCodePoint(948)]: '&delta;' /* GREEK SMALL LETTER DELTA */,
  [String.fromCodePoint(949)]: '&epsilon;' /* GREEK SMALL LETTER EPSILON */,
  [String.fromCodePoint(950)]: '&zeta;' /* GREEK SMALL LETTER ZETA */,
  [String.fromCodePoint(951)]: '&eta;' /* GREEK SMALL LETTER ETA */,
  [String.fromCodePoint(952)]: '&theta;' /* GREEK SMALL LETTER THETA */,
  [String.fromCodePoint(953)]: '&iota;' /* GREEK SMALL LETTER IOTA */,
  [String.fromCodePoint(954)]: '&kappa;' /* GREEK SMALL LETTER KAPPA */,
  [String.fromCodePoint(955)]: '&lambda;' /* GREEK SMALL LETTER LAMDA */,
  [String.fromCodePoint(956)]: '&mu;' /* GREEK SMALL LETTER MU */,
  [String.fromCodePoint(957)]: '&nu;' /* GREEK SMALL LETTER NU */,
  [String.fromCodePoint(958)]: '&xi;' /* GREEK SMALL LETTER XI */,
  [String.fromCodePoint(959)]: '&omicron;' /* GREEK SMALL LETTER OMICRON */,
  [String.fromCodePoint(960)]: '&pi;' /* GREEK SMALL LETTER PI */,
  [String.fromCodePoint(961)]: '&rho;' /* GREEK SMALL LETTER RHO */,
  [String.fromCodePoint(962)]: '&sigmaf;' /* GREEK SMALL LETTER FINAL SIGMA */,
  [String.fromCodePoint(963)]: '&sigma;' /* GREEK SMALL LETTER SIGMA */,
  [String.fromCodePoint(964)]: '&tau;' /* GREEK SMALL LETTER TAU */,
  [String.fromCodePoint(965)]: '&upsilon;' /* GREEK SMALL LETTER UPSILON */,
  [String.fromCodePoint(966)]: '&varphi;' /* GREEK SMALL LETTER PHI */,
  [String.fromCodePoint(967)]: '&chi;' /* GREEK SMALL LETTER CHI */,
  [String.fromCodePoint(968)]: '&psi;' /* GREEK SMALL LETTER PSI */,
  [String.fromCodePoint(969)]: '&omega;' /* GREEK SMALL LETTER OMEGA */,
  [String.fromCodePoint(977)]: '&thetasym;' /* GREEK THETA SYMBOL */,
  [String.fromCodePoint(978)]: '&upsih;' /* GREEK UPSILON WITH HOOK SYMBOL */,
  [String.fromCodePoint(981)]: '&straightphi;' /* GREEK PHI SYMBOL */,
  [String.fromCodePoint(982)]: '&varpi;' /* GREEK PI SYMBOL */,
  [String.fromCodePoint(988)]: '&Gammad;' /* GREEK LETTER DIGAMMA */,
  [String.fromCodePoint(989)]: '&digamma;' /* GREEK SMALL LETTER DIGAMMA */,
  [String.fromCodePoint(1008)]: '&varkappa;' /* GREEK KAPPA SYMBOL */,
  [String.fromCodePoint(1009)]: '&varrho;' /* GREEK RHO SYMBOL */,
  [String.fromCodePoint(1013)]: '&straightepsilon;' /* GREEK LUNATE EPSILON SYMBOL */,
  [String.fromCodePoint(1014)]: '&backepsilon;' /* GREEK REVERSED LUNATE EPSILON SYMBOL */,
  [String.fromCodePoint(1025)]: '&IOcy;' /* CYRILLIC CAPITAL LETTER IO */,
  [String.fromCodePoint(1026)]: '&DJcy;' /* CYRILLIC CAPITAL LETTER DJE */,
  [String.fromCodePoint(1027)]: '&GJcy;' /* CYRILLIC CAPITAL LETTER GJE */,
  [String.fromCodePoint(1028)]: '&Jukcy;' /* CYRILLIC CAPITAL LETTER UKRAINIAN IE */,
  [String.fromCodePoint(1029)]: '&DScy;' /* CYRILLIC CAPITAL LETTER DZE */,
  [String.fromCodePoint(1030)]: '&Iukcy;' /* CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I */,
  [String.fromCodePoint(1031)]: '&YIcy;' /* CYRILLIC CAPITAL LETTER YI */,
  [String.fromCodePoint(1032)]: '&Jsercy;' /* CYRILLIC CAPITAL LETTER JE */,
  [String.fromCodePoint(1033)]: '&LJcy;' /* CYRILLIC CAPITAL LETTER LJE */,
  [String.fromCodePoint(1034)]: '&NJcy;' /* CYRILLIC CAPITAL LETTER NJE */,
  [String.fromCodePoint(1035)]: '&TSHcy;' /* CYRILLIC CAPITAL LETTER TSHE */,
  [String.fromCodePoint(1036)]: '&KJcy;' /* CYRILLIC CAPITAL LETTER KJE */,
  [String.fromCodePoint(1038)]: '&Ubrcy;' /* CYRILLIC CAPITAL LETTER SHORT U */,
  [String.fromCodePoint(1039)]: '&DZcy;' /* CYRILLIC CAPITAL LETTER DZHE */,
  [String.fromCodePoint(1040)]: '&Acy;' /* CYRILLIC CAPITAL LETTER A */,
  [String.fromCodePoint(1041)]: '&Bcy;' /* CYRILLIC CAPITAL LETTER BE */,
  [String.fromCodePoint(1042)]: '&Vcy;' /* CYRILLIC CAPITAL LETTER VE */,
  [String.fromCodePoint(1043)]: '&Gcy;' /* CYRILLIC CAPITAL LETTER GHE */,
  [String.fromCodePoint(1044)]: '&Dcy;' /* CYRILLIC CAPITAL LETTER DE */,
  [String.fromCodePoint(1045)]: '&IEcy;' /* CYRILLIC CAPITAL LETTER IE */,
  [String.fromCodePoint(1046)]: '&ZHcy;' /* CYRILLIC CAPITAL LETTER ZHE */,
  [String.fromCodePoint(1047)]: '&Zcy;' /* CYRILLIC CAPITAL LETTER ZE */,
  [String.fromCodePoint(1048)]: '&Icy;' /* CYRILLIC CAPITAL LETTER I */,
  [String.fromCodePoint(1049)]: '&Jcy;' /* CYRILLIC CAPITAL LETTER SHORT I */,
  [String.fromCodePoint(1050)]: '&Kcy;' /* CYRILLIC CAPITAL LETTER KA */,
  [String.fromCodePoint(1051)]: '&Lcy;' /* CYRILLIC CAPITAL LETTER EL */,
  [String.fromCodePoint(1052)]: '&Mcy;' /* CYRILLIC CAPITAL LETTER EM */,
  [String.fromCodePoint(1053)]: '&Ncy;' /* CYRILLIC CAPITAL LETTER EN */,
  [String.fromCodePoint(1054)]: '&Ocy;' /* CYRILLIC CAPITAL LETTER O */,
  [String.fromCodePoint(1055)]: '&Pcy;' /* CYRILLIC CAPITAL LETTER PE */,
  [String.fromCodePoint(1056)]: '&Rcy;' /* CYRILLIC CAPITAL LETTER ER */,
  [String.fromCodePoint(1057)]: '&Scy;' /* CYRILLIC CAPITAL LETTER ES */,
  [String.fromCodePoint(1058)]: '&Tcy;' /* CYRILLIC CAPITAL LETTER TE */,
  [String.fromCodePoint(1059)]: '&Ucy;' /* CYRILLIC CAPITAL LETTER U */,
  [String.fromCodePoint(1060)]: '&Fcy;' /* CYRILLIC CAPITAL LETTER EF */,
  [String.fromCodePoint(1061)]: '&KHcy;' /* CYRILLIC CAPITAL LETTER HA */,
  [String.fromCodePoint(1062)]: '&TScy;' /* CYRILLIC CAPITAL LETTER TSE */,
  [String.fromCodePoint(1063)]: '&CHcy;' /* CYRILLIC CAPITAL LETTER CHE */,
  [String.fromCodePoint(1064)]: '&SHcy;' /* CYRILLIC CAPITAL LETTER SHA */,
  [String.fromCodePoint(1065)]: '&SHCHcy;' /* CYRILLIC CAPITAL LETTER SHCHA */,
  [String.fromCodePoint(1066)]: '&HARDcy;' /* CYRILLIC CAPITAL LETTER HARD SIGN */,
  [String.fromCodePoint(1067)]: '&Ycy;' /* CYRILLIC CAPITAL LETTER YERU */,
  [String.fromCodePoint(1068)]: '&SOFTcy;' /* CYRILLIC CAPITAL LETTER SOFT SIGN */,
  [String.fromCodePoint(1069)]: '&Ecy;' /* CYRILLIC CAPITAL LETTER E */,
  [String.fromCodePoint(1070)]: '&YUcy;' /* CYRILLIC CAPITAL LETTER YU */,
  [String.fromCodePoint(1071)]: '&YAcy;' /* CYRILLIC CAPITAL LETTER YA */,
  [String.fromCodePoint(1072)]: '&acy;' /* CYRILLIC SMALL LETTER A */,
  [String.fromCodePoint(1073)]: '&bcy;' /* CYRILLIC SMALL LETTER BE */,
  [String.fromCodePoint(1074)]: '&vcy;' /* CYRILLIC SMALL LETTER VE */,
  [String.fromCodePoint(1075)]: '&gcy;' /* CYRILLIC SMALL LETTER GHE */,
  [String.fromCodePoint(1076)]: '&dcy;' /* CYRILLIC SMALL LETTER DE */,
  [String.fromCodePoint(1077)]: '&iecy;' /* CYRILLIC SMALL LETTER IE */,
  [String.fromCodePoint(1078)]: '&zhcy;' /* CYRILLIC SMALL LETTER ZHE */,
  [String.fromCodePoint(1079)]: '&zcy;' /* CYRILLIC SMALL LETTER ZE */,
  [String.fromCodePoint(1080)]: '&icy;' /* CYRILLIC SMALL LETTER I */,
  [String.fromCodePoint(1081)]: '&jcy;' /* CYRILLIC SMALL LETTER SHORT I */,
  [String.fromCodePoint(1082)]: '&kcy;' /* CYRILLIC SMALL LETTER KA */,
  [String.fromCodePoint(1083)]: '&lcy;' /* CYRILLIC SMALL LETTER EL */,
  [String.fromCodePoint(1084)]: '&mcy;' /* CYRILLIC SMALL LETTER EM */,
  [String.fromCodePoint(1085)]: '&ncy;' /* CYRILLIC SMALL LETTER EN */,
  [String.fromCodePoint(1086)]: '&ocy;' /* CYRILLIC SMALL LETTER O */,
  [String.fromCodePoint(1087)]: '&pcy;' /* CYRILLIC SMALL LETTER PE */,
  [String.fromCodePoint(1088)]: '&rcy;' /* CYRILLIC SMALL LETTER ER */,
  [String.fromCodePoint(1089)]: '&scy;' /* CYRILLIC SMALL LETTER ES */,
  [String.fromCodePoint(1090)]: '&tcy;' /* CYRILLIC SMALL LETTER TE */,
  [String.fromCodePoint(1091)]: '&ucy;' /* CYRILLIC SMALL LETTER U */,
  [String.fromCodePoint(1092)]: '&fcy;' /* CYRILLIC SMALL LETTER EF */,
  [String.fromCodePoint(1093)]: '&khcy;' /* CYRILLIC SMALL LETTER HA */,
  [String.fromCodePoint(1094)]: '&tscy;' /* CYRILLIC SMALL LETTER TSE */,
  [String.fromCodePoint(1095)]: '&chcy;' /* CYRILLIC SMALL LETTER CHE */,
  [String.fromCodePoint(1096)]: '&shcy;' /* CYRILLIC SMALL LETTER SHA */,
  [String.fromCodePoint(1097)]: '&shchcy;' /* CYRILLIC SMALL LETTER SHCHA */,
  [String.fromCodePoint(1098)]: '&hardcy;' /* CYRILLIC SMALL LETTER HARD SIGN */,
  [String.fromCodePoint(1099)]: '&ycy;' /* CYRILLIC SMALL LETTER YERU */,
  [String.fromCodePoint(1100)]: '&softcy;' /* CYRILLIC SMALL LETTER SOFT SIGN */,
  [String.fromCodePoint(1101)]: '&ecy;' /* CYRILLIC SMALL LETTER E */,
  [String.fromCodePoint(1102)]: '&yucy;' /* CYRILLIC SMALL LETTER YU */,
  [String.fromCodePoint(1103)]: '&yacy;' /* CYRILLIC SMALL LETTER YA */,
  [String.fromCodePoint(1105)]: '&iocy;' /* CYRILLIC SMALL LETTER IO */,
  [String.fromCodePoint(1106)]: '&djcy;' /* CYRILLIC SMALL LETTER DJE */,
  [String.fromCodePoint(1107)]: '&gjcy;' /* CYRILLIC SMALL LETTER GJE */,
  [String.fromCodePoint(1108)]: '&jukcy;' /* CYRILLIC SMALL LETTER UKRAINIAN IE */,
  [String.fromCodePoint(1109)]: '&dscy;' /* CYRILLIC SMALL LETTER DZE */,
  [String.fromCodePoint(1110)]: '&iukcy;' /* CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I */,
  [String.fromCodePoint(1111)]: '&yicy;' /* CYRILLIC SMALL LETTER YI */,
  [String.fromCodePoint(1112)]: '&jsercy;' /* CYRILLIC SMALL LETTER JE */,
  [String.fromCodePoint(1113)]: '&ljcy;' /* CYRILLIC SMALL LETTER LJE */,
  [String.fromCodePoint(1114)]: '&njcy;' /* CYRILLIC SMALL LETTER NJE */,
  [String.fromCodePoint(1115)]: '&tshcy;' /* CYRILLIC SMALL LETTER TSHE */,
  [String.fromCodePoint(1116)]: '&kjcy;' /* CYRILLIC SMALL LETTER KJE */,
  [String.fromCodePoint(1118)]: '&ubrcy;' /* CYRILLIC SMALL LETTER SHORT U */,
  [String.fromCodePoint(1119)]: '&dzcy;' /* CYRILLIC SMALL LETTER DZHE */,
  [String.fromCodePoint(8194)]: '&ensp;' /* EN SPACE */,
  [String.fromCodePoint(8195)]: '&emsp;' /* EM SPACE */,
  [String.fromCodePoint(8196)]: '&emsp13;' /* THREE-PER-EM SPACE */,
  [String.fromCodePoint(8197)]: '&emsp14;' /* FOUR-PER-EM SPACE */,
  [String.fromCodePoint(8199)]: '&numsp;' /* FIGURE SPACE */,
  [String.fromCodePoint(8200)]: '&puncsp;' /* PUNCTUATION SPACE */,
  [String.fromCodePoint(8201)]: '&ThinSpace;' /* THIN SPACE */,
  [String.fromCodePoint(8202)]: '&VeryThinSpace;' /* HAIR SPACE */,
  [String.fromCodePoint(8203)]: '&NegativeThickSpace;' /* ZERO WIDTH SPACE */,
  [String.fromCodePoint(8204)]: '&zwnj;' /* ZERO WIDTH NON-JOINER */,
  [String.fromCodePoint(8205)]: '&zwj;' /* ZERO WIDTH JOINER */,
  [String.fromCodePoint(8206)]: '&lrm;' /* LEFT-TO-RIGHT MARK */,
  [String.fromCodePoint(8207)]: '&rlm;' /* RIGHT-TO-LEFT MARK */,
  [String.fromCodePoint(8208)]: '&dash;' /* HYPHEN */,
  [String.fromCodePoint(8211)]: '&ndash;' /* EN DASH */,
  [String.fromCodePoint(8212)]: '&mdash;' /* EM DASH */,
  [String.fromCodePoint(8213)]: '&horbar;' /* HORIZONTAL BAR */,
  [String.fromCodePoint(8214)]: '&Vert;' /* DOUBLE VERTICAL LINE */,
  [String.fromCodePoint(8216)]: '&OpenCurlyQuote;' /* LEFT SINGLE QUOTATION MARK */,
  [String.fromCodePoint(8217)]: '&CloseCurlyQuote;' /* RIGHT SINGLE QUOTATION MARK */,
  [String.fromCodePoint(8218)]: '&sbquo;' /* SINGLE LOW-9 QUOTATION MARK */,
  [String.fromCodePoint(8220)]: '&OpenCurlyDoubleQuote;' /* LEFT DOUBLE QUOTATION MARK */,
  [String.fromCodePoint(8221)]: '&CloseCurlyDoubleQuote;' /* RIGHT DOUBLE QUOTATION MARK */,
  [String.fromCodePoint(8222)]: '&bdquo;' /* DOUBLE LOW-9 QUOTATION MARK */,
  [String.fromCodePoint(8224)]: '&dagger;' /* DAGGER */,
  [String.fromCodePoint(8225)]: '&ddagger;' /* DOUBLE DAGGER */,
  [String.fromCodePoint(8226)]: '&bullet;' /* BULLET */,
  [String.fromCodePoint(8229)]: '&nldr;' /* TWO DOT LEADER */,
  [String.fromCodePoint(8230)]: '&mldr;' /* HORIZONTAL ELLIPSIS */,
  [String.fromCodePoint(8240)]: '&permil;' /* PER MILLE SIGN */,
  [String.fromCodePoint(8241)]: '&pertenk;' /* PER TEN THOUSAND SIGN */,
  [String.fromCodePoint(8242)]: '&prime;' /* PRIME */,
  [String.fromCodePoint(8243)]: '&Prime;' /* DOUBLE PRIME */,
  [String.fromCodePoint(8244)]: '&tprime;' /* TRIPLE PRIME */,
  [String.fromCodePoint(8245)]: '&backprime;' /* REVERSED PRIME */,
  [String.fromCodePoint(8249)]: '&lsaquo;' /* SINGLE LEFT-POINTING ANGLE QUOTATION MARK */,
  [String.fromCodePoint(8250)]: '&rsaquo;' /* SINGLE RIGHT-POINTING ANGLE QUOTATION MARK */,
  [String.fromCodePoint(8254)]: '&oline;' /* OVERLINE */,
  [String.fromCodePoint(8257)]: '&caret;' /* CARET INSERTION POINT */,
  [String.fromCodePoint(8259)]: '&hybull;' /* HYPHEN BULLET */,
  [String.fromCodePoint(8260)]: '&frasl;' /* FRACTION SLASH */,
  [String.fromCodePoint(8271)]: '&bsemi;' /* REVERSED SEMICOLON */,
  [String.fromCodePoint(8279)]: '&qprime;' /* QUADRUPLE PRIME */,
  [String.fromCodePoint(8287)]: '&MediumSpace;' /* MEDIUM MATHEMATICAL SPACE */,
  [String.fromCodePoint(8288)]: '&NoBreak;' /* WORD JOINER */,
  [String.fromCodePoint(8289)]: '&af;' /* FUNCTION APPLICATION */,
  [String.fromCodePoint(8290)]: '&it;' /* INVISIBLE TIMES */,
  [String.fromCodePoint(8291)]: '&ic;' /* INVISIBLE SEPARATOR */,
  [String.fromCodePoint(8364)]: '&euro;' /* EURO SIGN */,
  [String.fromCodePoint(8411)]: '&TripleDot;' /* COMBINING THREE DOTS ABOVE */,
  [String.fromCodePoint(8412)]: '&DotDot;' /* COMBINING FOUR DOTS ABOVE */,
  [String.fromCodePoint(8450)]: '&complexes;' /* DOUBLE-STRUCK CAPITAL C */,
  [String.fromCodePoint(8453)]: '&incare;' /* CARE OF */,
  [String.fromCodePoint(8458)]: '&gscr;' /* SCRIPT SMALL G */,
  [String.fromCodePoint(8459)]: '&Hscr;' /* SCRIPT CAPITAL H */,
  [String.fromCodePoint(8460)]: '&Poincareplane;' /* BLACK-LETTER CAPITAL H */,
  [String.fromCodePoint(8461)]: '&Hopf;' /* DOUBLE-STRUCK CAPITAL H */,
  [String.fromCodePoint(8462)]: '&planckh;' /* PLANCK CONSTANT */,
  [String.fromCodePoint(8463)]: '&hslash;' /* PLANCK CONSTANT OVER TWO PI */,
  [String.fromCodePoint(8464)]: '&imagline;' /* SCRIPT CAPITAL I */,
  [String.fromCodePoint(8465)]: '&Ifr;' /* BLACK-LETTER CAPITAL I */,
  [String.fromCodePoint(8466)]: '&Laplacetrf;' /* SCRIPT CAPITAL L */,
  [String.fromCodePoint(8467)]: '&ell;' /* SCRIPT SMALL L */,
  [String.fromCodePoint(8469)]: '&naturals;' /* DOUBLE-STRUCK CAPITAL N */,
  [String.fromCodePoint(8470)]: '&numero;' /* NUMERO SIGN */,
  [String.fromCodePoint(8471)]: '&copysr;' /* SOUND RECORDING COPYRIGHT */,
  [String.fromCodePoint(8472)]: '&wp;' /* SCRIPT CAPITAL P */,
  [String.fromCodePoint(8473)]: '&primes;' /* DOUBLE-STRUCK CAPITAL P */,
  [String.fromCodePoint(8474)]: '&Qopf;' /* DOUBLE-STRUCK CAPITAL Q */,
  [String.fromCodePoint(8475)]: '&realine;' /* SCRIPT CAPITAL R */,
  [String.fromCodePoint(8476)]: '&Rfr;' /* BLACK-LETTER CAPITAL R */,
  [String.fromCodePoint(8477)]: '&Ropf;' /* DOUBLE-STRUCK CAPITAL R */,
  [String.fromCodePoint(8478)]: '&rx;' /* PRESCRIPTION TAKE */,
  [String.fromCodePoint(8482)]: '&TRADE;' /* TRADE MARK SIGN */,
  [String.fromCodePoint(8484)]: '&Zopf;' /* DOUBLE-STRUCK CAPITAL Z */,
  [String.fromCodePoint(8486)]: '&ohm;' /* OHM SIGN */,
  [String.fromCodePoint(8487)]: '&mho;' /* INVERTED OHM SIGN */,
  [String.fromCodePoint(8488)]: '&zeetrf;' /* BLACK-LETTER CAPITAL Z */,
  [String.fromCodePoint(8489)]: '&iiota;' /* TURNED GREEK SMALL LETTER IOTA */,
  [String.fromCodePoint(8491)]: '&angst;' /* ANGSTROM SIGN */,
  [String.fromCodePoint(8492)]: '&Bscr;' /* SCRIPT CAPITAL B */,
  [String.fromCodePoint(8493)]: '&Cayleys;' /* BLACK-LETTER CAPITAL C */,
  [String.fromCodePoint(8495)]: '&escr;' /* SCRIPT SMALL E */,
  [String.fromCodePoint(8496)]: '&expectation;' /* SCRIPT CAPITAL E */,
  [String.fromCodePoint(8497)]: '&Fouriertrf;' /* SCRIPT CAPITAL F */,
  [String.fromCodePoint(8499)]: '&Mscr;' /* SCRIPT CAPITAL M */,
  [String.fromCodePoint(8500)]: '&oscr;' /* SCRIPT SMALL O */,
  [String.fromCodePoint(8501)]: '&aleph;' /* ALEF SYMBOL */,
  [String.fromCodePoint(8502)]: '&beth;' /* BET SYMBOL */,
  [String.fromCodePoint(8503)]: '&gimel;' /* GIMEL SYMBOL */,
  [String.fromCodePoint(8504)]: '&daleth;' /* DALET SYMBOL */,
  [String.fromCodePoint(8517)]: '&DD;' /* DOUBLE-STRUCK ITALIC CAPITAL D */,
  [String.fromCodePoint(8518)]: '&dd;' /* DOUBLE-STRUCK ITALIC SMALL D */,
  [String.fromCodePoint(8519)]: '&ee;' /* DOUBLE-STRUCK ITALIC SMALL E */,
  [String.fromCodePoint(8520)]: '&ii;' /* DOUBLE-STRUCK ITALIC SMALL I */,
  [String.fromCodePoint(8531)]: '&frac13;' /* VULGAR FRACTION ONE THIRD */,
  [String.fromCodePoint(8532)]: '&frac23;' /* VULGAR FRACTION TWO THIRDS */,
  [String.fromCodePoint(8533)]: '&frac15;' /* VULGAR FRACTION ONE FIFTH */,
  [String.fromCodePoint(8534)]: '&frac25;' /* VULGAR FRACTION TWO FIFTHS */,
  [String.fromCodePoint(8535)]: '&frac35;' /* VULGAR FRACTION THREE FIFTHS */,
  [String.fromCodePoint(8536)]: '&frac45;' /* VULGAR FRACTION FOUR FIFTHS */,
  [String.fromCodePoint(8537)]: '&frac16;' /* VULGAR FRACTION ONE SIXTH */,
  [String.fromCodePoint(8538)]: '&frac56;' /* VULGAR FRACTION FIVE SIXTHS */,
  [String.fromCodePoint(8539)]: '&frac18;' /* VULGAR FRACTION ONE EIGHTH */,
  [String.fromCodePoint(8540)]: '&frac38;' /* VULGAR FRACTION THREE EIGHTHS */,
  [String.fromCodePoint(8541)]: '&frac58;' /* VULGAR FRACTION FIVE EIGHTHS */,
  [String.fromCodePoint(8542)]: '&frac78;' /* VULGAR FRACTION SEVEN EIGHTHS */,
  [String.fromCodePoint(8592)]: '&ShortLeftArrow;' /* LEFTWARDS ARROW */,
  [String.fromCodePoint(8593)]: '&ShortUpArrow;' /* UPWARDS ARROW */,
  [String.fromCodePoint(8594)]: '&ShortRightArrow;' /* RIGHTWARDS ARROW */,
  [String.fromCodePoint(8595)]: '&ShortDownArrow;' /* DOWNWARDS ARROW */,
  [String.fromCodePoint(8596)]: '&LeftRightArrow;' /* LEFT RIGHT ARROW */,
  [String.fromCodePoint(8597)]: '&UpDownArrow;' /* UP DOWN ARROW */,
  [String.fromCodePoint(8598)]: '&nwarrow;' /* NORTH WEST ARROW */,
  [String.fromCodePoint(8599)]: '&nearrow;' /* NORTH EAST ARROW */,
  [String.fromCodePoint(8600)]: '&LowerRightArrow;' /* SOUTH EAST ARROW */,
  [String.fromCodePoint(8601)]: '&LowerLeftArrow;' /* SOUTH WEST ARROW */,
  [String.fromCodePoint(8602)]: '&nleftarrow;' /* LEFTWARDS ARROW WITH STROKE */,
  [String.fromCodePoint(8603)]: '&nrightarrow;' /* RIGHTWARDS ARROW WITH STROKE */,
  [String.fromCodePoint(8605)]: '&rightsquigarrow;' /* RIGHTWARDS WAVE ARROW */,
  [String.fromCodePoint(8606)]: '&twoheadleftarrow;' /* LEFTWARDS TWO HEADED ARROW */,
  [String.fromCodePoint(8607)]: '&Uarr;' /* UPWARDS TWO HEADED ARROW */,
  [String.fromCodePoint(8608)]: '&twoheadrightarrow;' /* RIGHTWARDS TWO HEADED ARROW */,
  [String.fromCodePoint(8609)]: '&Darr;' /* DOWNWARDS TWO HEADED ARROW */,
  [String.fromCodePoint(8610)]: '&leftarrowtail;' /* LEFTWARDS ARROW WITH TAIL */,
  [String.fromCodePoint(8611)]: '&rightarrowtail;' /* RIGHTWARDS ARROW WITH TAIL */,
  [String.fromCodePoint(8612)]: '&mapstoleft;' /* LEFTWARDS ARROW FROM BAR */,
  [String.fromCodePoint(8613)]: '&mapstoup;' /* UPWARDS ARROW FROM BAR */,
  [String.fromCodePoint(8614)]: '&mapsto;' /* RIGHTWARDS ARROW FROM BAR */,
  [String.fromCodePoint(8615)]: '&mapstodown;' /* DOWNWARDS ARROW FROM BAR */,
  [String.fromCodePoint(8617)]: '&hookleftarrow;' /* LEFTWARDS ARROW WITH HOOK */,
  [String.fromCodePoint(8618)]: '&hookrightarrow;' /* RIGHTWARDS ARROW WITH HOOK */,
  [String.fromCodePoint(8619)]: '&looparrowleft;' /* LEFTWARDS ARROW WITH LOOP */,
  [String.fromCodePoint(8620)]: '&looparrowright;' /* RIGHTWARDS ARROW WITH LOOP */,
  [String.fromCodePoint(8621)]: '&leftrightsquigarrow;' /* LEFT RIGHT WAVE ARROW */,
  [String.fromCodePoint(8622)]: '&nleftrightarrow;' /* LEFT RIGHT ARROW WITH STROKE */,
  [String.fromCodePoint(8624)]: '&Lsh;' /* UPWARDS ARROW WITH TIP LEFTWARDS */,
  [String.fromCodePoint(8625)]: '&Rsh;' /* UPWARDS ARROW WITH TIP RIGHTWARDS */,
  [String.fromCodePoint(8626)]: '&ldsh;' /* DOWNWARDS ARROW WITH TIP LEFTWARDS */,
  [String.fromCodePoint(8627)]: '&rdsh;' /* DOWNWARDS ARROW WITH TIP RIGHTWARDS */,
  [String.fromCodePoint(8629)]: '&crarr;' /* DOWNWARDS ARROW WITH CORNER LEFTWARDS */,
  [String.fromCodePoint(8630)]: '&curvearrowleft;' /* ANTICLOCKWISE TOP SEMICIRCLE ARROW */,
  [String.fromCodePoint(8631)]: '&curvearrowright;' /* CLOCKWISE TOP SEMICIRCLE ARROW */,
  [String.fromCodePoint(8634)]: '&circlearrowleft;' /* ANTICLOCKWISE OPEN CIRCLE ARROW */,
  [String.fromCodePoint(8635)]: '&circlearrowright;' /* CLOCKWISE OPEN CIRCLE ARROW */,
  [String.fromCodePoint(8636)]: '&leftharpoonup;' /* LEFTWARDS HARPOON WITH BARB UPWARDS */,
  [String.fromCodePoint(8637)]: '&DownLeftVector;' /* LEFTWARDS HARPOON WITH BARB DOWNWARDS */,
  [String.fromCodePoint(8638)]: '&RightUpVector;' /* UPWARDS HARPOON WITH BARB RIGHTWARDS */,
  [String.fromCodePoint(8639)]: '&LeftUpVector;' /* UPWARDS HARPOON WITH BARB LEFTWARDS */,
  [String.fromCodePoint(8640)]: '&rightharpoonup;' /* RIGHTWARDS HARPOON WITH BARB UPWARDS */,
  [String.fromCodePoint(8641)]: '&DownRightVector;' /* RIGHTWARDS HARPOON WITH BARB DOWNWARDS */,
  [String.fromCodePoint(8642)]: '&downharpoonright;' /* DOWNWARDS HARPOON WITH BARB RIGHTWARDS */,
  [String.fromCodePoint(8643)]: '&downharpoonleft;' /* DOWNWARDS HARPOON WITH BARB LEFTWARDS */,
  [String.fromCodePoint(8644)]: '&RightArrowLeftArrow;' /* RIGHTWARDS ARROW OVER LEFTWARDS ARROW */,
  [String.fromCodePoint(8645)]: '&UpArrowDownArrow;' /* UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW */,
  [String.fromCodePoint(8646)]: '&LeftArrowRightArrow;' /* LEFTWARDS ARROW OVER RIGHTWARDS ARROW */,
  [String.fromCodePoint(8647)]: '&leftleftarrows;' /* LEFTWARDS PAIRED ARROWS */,
  [String.fromCodePoint(8648)]: '&upuparrows;' /* UPWARDS PAIRED ARROWS */,
  [String.fromCodePoint(8649)]: '&rightrightarrows;' /* RIGHTWARDS PAIRED ARROWS */,
  [String.fromCodePoint(8650)]: '&downdownarrows;' /* DOWNWARDS PAIRED ARROWS */,
  [String.fromCodePoint(8651)]: '&leftrightharpoons;' /* LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON */,
  [String.fromCodePoint(8652)]: '&Equilibrium;' /* RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON */,
  [String.fromCodePoint(8653)]: '&nLeftarrow;' /* LEFTWARDS DOUBLE ARROW WITH STROKE */,
  [String.fromCodePoint(8654)]: '&nLeftrightarrow;' /* LEFT RIGHT DOUBLE ARROW WITH STROKE */,
  [String.fromCodePoint(8655)]: '&nRightarrow;' /* RIGHTWARDS DOUBLE ARROW WITH STROKE */,
  [String.fromCodePoint(8656)]: '&DoubleLeftArrow;' /* LEFTWARDS DOUBLE ARROW */,
  [String.fromCodePoint(8657)]: '&DoubleUpArrow;' /* UPWARDS DOUBLE ARROW */,
  [String.fromCodePoint(8658)]: '&DoubleRightArrow;' /* RIGHTWARDS DOUBLE ARROW */,
  [String.fromCodePoint(8659)]: '&DoubleDownArrow;' /* DOWNWARDS DOUBLE ARROW */,
  [String.fromCodePoint(8660)]: '&iff;' /* LEFT RIGHT DOUBLE ARROW */,
  [String.fromCodePoint(8661)]: '&DoubleUpDownArrow;' /* UP DOWN DOUBLE ARROW */,
  [String.fromCodePoint(8662)]: '&nwArr;' /* NORTH WEST DOUBLE ARROW */,
  [String.fromCodePoint(8663)]: '&neArr;' /* NORTH EAST DOUBLE ARROW */,
  [String.fromCodePoint(8664)]: '&seArr;' /* SOUTH EAST DOUBLE ARROW */,
  [String.fromCodePoint(8665)]: '&swArr;' /* SOUTH WEST DOUBLE ARROW */,
  [String.fromCodePoint(8666)]: '&Lleftarrow;' /* LEFTWARDS TRIPLE ARROW */,
  [String.fromCodePoint(8667)]: '&Rrightarrow;' /* RIGHTWARDS TRIPLE ARROW */,
  [String.fromCodePoint(8669)]: '&zigrarr;' /* RIGHTWARDS SQUIGGLE ARROW */,
  [String.fromCodePoint(8676)]: '&LeftArrowBar;' /* LEFTWARDS ARROW TO BAR */,
  [String.fromCodePoint(8677)]: '&RightArrowBar;' /* RIGHTWARDS ARROW TO BAR */,
  [String.fromCodePoint(8693)]: '&DownArrowUpArrow;' /* DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW */,
  [String.fromCodePoint(8701)]: '&loarr;' /* LEFTWARDS OPEN-HEADED ARROW */,
  [String.fromCodePoint(8702)]: '&roarr;' /* RIGHTWARDS OPEN-HEADED ARROW */,
  [String.fromCodePoint(8703)]: '&hoarr;' /* LEFT RIGHT OPEN-HEADED ARROW */,
  [String.fromCodePoint(8704)]: '&ForAll;' /* FOR ALL */,
  [String.fromCodePoint(8705)]: '&complement;' /* COMPLEMENT */,
  [String.fromCodePoint(8706)]: '&PartialD;' /* PARTIAL DIFFERENTIAL */,
  [String.fromCodePoint(8707)]: '&Exists;' /* THERE EXISTS */,
  [String.fromCodePoint(8708)]: '&nexists;' /* THERE DOES NOT EXIST */,
  [String.fromCodePoint(8709)]: '&varnothing;' /* EMPTY SET */,
  [String.fromCodePoint(8711)]: '&Del;' /* NABLA */,
  [String.fromCodePoint(8712)]: '&in;' /* ELEMENT OF */,
  [String.fromCodePoint(8713)]: '&notinva;' /* NOT AN ELEMENT OF */,
  [String.fromCodePoint(8715)]: '&SuchThat;' /* CONTAINS AS MEMBER */,
  [String.fromCodePoint(8716)]: '&NotReverseElement;' /* DOES NOT CONTAIN AS MEMBER */,
  [String.fromCodePoint(8719)]: '&Product;' /* N-ARY PRODUCT */,
  [String.fromCodePoint(8720)]: '&Coproduct;' /* N-ARY COPRODUCT */,
  [String.fromCodePoint(8721)]: '&Sum;' /* N-ARY SUMMATION */,
  [String.fromCodePoint(8722)]: '&minus;' /* MINUS SIGN */,
  [String.fromCodePoint(8723)]: '&MinusPlus;' /* MINUS-OR-PLUS SIGN */,
  [String.fromCodePoint(8724)]: '&dotplus;' /* DOT PLUS */,
  [String.fromCodePoint(8726)]: '&smallsetminus;' /* SET MINUS */,
  [String.fromCodePoint(8727)]: '&lowast;' /* ASTERISK OPERATOR */,
  [String.fromCodePoint(8728)]: '&SmallCircle;' /* RING OPERATOR */,
  [String.fromCodePoint(8730)]: '&Sqrt;' /* SQUARE ROOT */,
  [String.fromCodePoint(8733)]: '&varpropto;' /* PROPORTIONAL TO */,
  [String.fromCodePoint(8734)]: '&infin;' /* INFINITY */,
  [String.fromCodePoint(8735)]: '&angrt;' /* RIGHT ANGLE */,
  [String.fromCodePoint(8736)]: '&angle;' /* ANGLE */,
  [String.fromCodePoint(8737)]: '&measuredangle;' /* MEASURED ANGLE */,
  [String.fromCodePoint(8738)]: '&angsph;' /* SPHERICAL ANGLE */,
  [String.fromCodePoint(8739)]: '&shortmid;' /* DIVIDES */,
  [String.fromCodePoint(8740)]: '&nshortmid;' /* DOES NOT DIVIDE */,
  [String.fromCodePoint(8741)]: '&shortparallel;' /* PARALLEL TO */,
  [String.fromCodePoint(8742)]: '&nshortparallel;' /* NOT PARALLEL TO */,
  [String.fromCodePoint(8743)]: '&wedge;' /* LOGICAL AND */,
  [String.fromCodePoint(8744)]: '&vee;' /* LOGICAL OR */,
  [String.fromCodePoint(8745)]: '&cap;' /* INTERSECTION */,
  [String.fromCodePoint(8746)]: '&cup;' /* UNION */,
  [String.fromCodePoint(8747)]: '&Integral;' /* INTEGRAL */,
  [String.fromCodePoint(8748)]: '&Int;' /* DOUBLE INTEGRAL */,
  [String.fromCodePoint(8749)]: '&iiint;' /* TRIPLE INTEGRAL */,
  [String.fromCodePoint(8750)]: '&ContourIntegral;' /* CONTOUR INTEGRAL */,
  [String.fromCodePoint(8751)]: '&DoubleContourIntegral;' /* SURFACE INTEGRAL */,
  [String.fromCodePoint(8752)]: '&Cconint;' /* VOLUME INTEGRAL */,
  [String.fromCodePoint(8753)]: '&cwint;' /* CLOCKWISE INTEGRAL */,
  [String.fromCodePoint(8754)]: '&ClockwiseContourIntegral;' /* CLOCKWISE CONTOUR INTEGRAL */,
  [String.fromCodePoint(8755)]: '&CounterClockwiseContourIntegral;' /* ANTICLOCKWISE CONTOUR INTEGRAL */,
  [String.fromCodePoint(8756)]: '&Therefore;' /* THEREFORE */,
  [String.fromCodePoint(8757)]: '&Because;' /* BECAUSE */,
  [String.fromCodePoint(8758)]: '&ratio;' /* RATIO */,
  [String.fromCodePoint(8759)]: '&Proportion;' /* PROPORTION */,
  [String.fromCodePoint(8760)]: '&dotminus;' /* DOT MINUS */,
  [String.fromCodePoint(8762)]: '&mDDot;' /* GEOMETRIC PROPORTION */,
  [String.fromCodePoint(8763)]: '&homtht;' /* HOMOTHETIC */,
  [String.fromCodePoint(8764)]: '&thicksim;' /* TILDE OPERATOR */,
  [String.fromCodePoint(8765)]: '&backsim;' /* REVERSED TILDE */,
  [String.fromCodePoint(8766)]: '&mstpos;' /* INVERTED LAZY S */,
  [String.fromCodePoint(8767)]: '&acd;' /* SINE WAVE */,
  [String.fromCodePoint(8768)]: '&wr;' /* WREATH PRODUCT */,
  [String.fromCodePoint(8769)]: '&NotTilde;' /* NOT TILDE */,
  [String.fromCodePoint(8770)]: '&eqsim;' /* MINUS TILDE */,
  [String.fromCodePoint(8771)]: '&simeq;' /* ASYMPTOTICALLY EQUAL TO */,
  [String.fromCodePoint(8772)]: '&NotTildeEqual;' /* NOT ASYMPTOTICALLY EQUAL TO */,
  [String.fromCodePoint(8773)]: '&TildeFullEqual;' /* APPROXIMATELY EQUAL TO */,
  [String.fromCodePoint(8774)]: '&simne;' /* APPROXIMATELY BUT NOT ACTUALLY EQUAL TO */,
  [String.fromCodePoint(8775)]: '&NotTildeFullEqual;' /* NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO */,
  [String.fromCodePoint(8776)]: '&thickapprox;' /* ALMOST EQUAL TO */,
  [String.fromCodePoint(8777)]: '&napprox;' /* NOT ALMOST EQUAL TO */,
  [String.fromCodePoint(8778)]: '&approxeq;' /* ALMOST EQUAL OR EQUAL TO */,
  [String.fromCodePoint(8779)]: '&apid;' /* TRIPLE TILDE */,
  [String.fromCodePoint(8780)]: '&backcong;' /* ALL EQUAL TO */,
  [String.fromCodePoint(8781)]: '&CupCap;' /* EQUIVALENT TO */,
  [String.fromCodePoint(8782)]: '&Bumpeq;' /* GEOMETRICALLY EQUIVALENT TO */,
  [String.fromCodePoint(8783)]: '&bumpeq;' /* DIFFERENCE BETWEEN */,
  [String.fromCodePoint(8784)]: '&doteq;' /* APPROACHES THE LIMIT */,
  [String.fromCodePoint(8785)]: '&doteqdot;' /* GEOMETRICALLY EQUAL TO */,
  [String.fromCodePoint(8786)]: '&fallingdotseq;' /* APPROXIMATELY EQUAL TO OR THE IMAGE OF */,
  [String.fromCodePoint(8787)]: '&risingdotseq;' /* IMAGE OF OR APPROXIMATELY EQUAL TO */,
  [String.fromCodePoint(8788)]: '&Assign;' /* COLON EQUALS */,
  [String.fromCodePoint(8789)]: '&eqcolon;' /* EQUALS COLON */,
  [String.fromCodePoint(8790)]: '&eqcirc;' /* RING IN EQUAL TO */,
  [String.fromCodePoint(8791)]: '&circeq;' /* RING EQUAL TO */,
  [String.fromCodePoint(8793)]: '&wedgeq;' /* ESTIMATES */,
  [String.fromCodePoint(8794)]: '&veeeq;' /* EQUIANGULAR TO */,
  [String.fromCodePoint(8796)]: '&triangleq;' /* DELTA EQUAL TO */,
  [String.fromCodePoint(8799)]: '&questeq;' /* QUESTIONED EQUAL TO */,
  [String.fromCodePoint(8800)]: '&NotEqual;' /* NOT EQUAL TO */,
  [String.fromCodePoint(8801)]: '&Congruent;' /* IDENTICAL TO */,
  [String.fromCodePoint(8802)]: '&NotCongruent;' /* NOT IDENTICAL TO */,
  [String.fromCodePoint(8804)]: '&leq;' /* LESS-THAN OR EQUAL TO */,
  [String.fromCodePoint(8805)]: '&geq;' /* GREATER-THAN OR EQUAL TO */,
  [String.fromCodePoint(8806)]: '&leqq;' /* LESS-THAN OVER EQUAL TO */,
  [String.fromCodePoint(8807)]: '&geqq;' /* GREATER-THAN OVER EQUAL TO */,
  [String.fromCodePoint(8808)]: '&lneqq;' /* LESS-THAN BUT NOT EQUAL TO */,
  [String.fromCodePoint(8809)]: '&gneqq;' /* GREATER-THAN BUT NOT EQUAL TO */,
  [String.fromCodePoint(8810)]: '&ll;' /* MUCH LESS-THAN */,
  [String.fromCodePoint(8811)]: '&gg;' /* MUCH GREATER-THAN */,
  [String.fromCodePoint(8812)]: '&between;' /* BETWEEN */,
  [String.fromCodePoint(8813)]: '&NotCupCap;' /* NOT EQUIVALENT TO */,
  [String.fromCodePoint(8814)]: '&nless;' /* NOT LESS-THAN */,
  [String.fromCodePoint(8815)]: '&ngtr;' /* NOT GREATER-THAN */,
  [String.fromCodePoint(8816)]: '&nleq;' /* NEITHER LESS-THAN NOR EQUAL TO */,
  [String.fromCodePoint(8817)]: '&ngeq;' /* NEITHER GREATER-THAN NOR EQUAL TO */,
  [String.fromCodePoint(8818)]: '&lesssim;' /* LESS-THAN OR EQUIVALENT TO */,
  [String.fromCodePoint(8819)]: '&GreaterTilde;' /* GREATER-THAN OR EQUIVALENT TO */,
  [String.fromCodePoint(8820)]: '&NotLessTilde;' /* NEITHER LESS-THAN NOR EQUIVALENT TO */,
  [String.fromCodePoint(8821)]: '&NotGreaterTilde;' /* NEITHER GREATER-THAN NOR EQUIVALENT TO */,
  [String.fromCodePoint(8822)]: '&LessGreater;' /* LESS-THAN OR GREATER-THAN */,
  [String.fromCodePoint(8823)]: '&GreaterLess;' /* GREATER-THAN OR LESS-THAN */,
  [String.fromCodePoint(8824)]: '&NotLessGreater;' /* NEITHER LESS-THAN NOR GREATER-THAN */,
  [String.fromCodePoint(8825)]: '&NotGreaterLess;' /* NEITHER GREATER-THAN NOR LESS-THAN */,
  [String.fromCodePoint(8826)]: '&prec;' /* PRECEDES */,
  [String.fromCodePoint(8827)]: '&succ;' /* SUCCEEDS */,
  [String.fromCodePoint(8828)]: '&preccurlyeq;' /* PRECEDES OR EQUAL TO */,
  [String.fromCodePoint(8829)]: '&succcurlyeq;' /* SUCCEEDS OR EQUAL TO */,
  [String.fromCodePoint(8830)]: '&PrecedesTilde;' /* PRECEDES OR EQUIVALENT TO */,
  [String.fromCodePoint(8831)]: '&SucceedsTilde;' /* SUCCEEDS OR EQUIVALENT TO */,
  [String.fromCodePoint(8832)]: '&NotPrecedes;' /* DOES NOT PRECEDE */,
  [String.fromCodePoint(8833)]: '&NotSucceeds;' /* DOES NOT SUCCEED */,
  [String.fromCodePoint(8834)]: '&subset;' /* SUBSET OF */,
  [String.fromCodePoint(8835)]: '&Superset;' /* SUPERSET OF */,
  [String.fromCodePoint(8836)]: '&nsub;' /* NOT A SUBSET OF */,
  [String.fromCodePoint(8837)]: '&nsup;' /* NOT A SUPERSET OF */,
  [String.fromCodePoint(8838)]: '&subseteq;' /* SUBSET OF OR EQUAL TO */,
  [String.fromCodePoint(8839)]: '&SupersetEqual;' /* SUPERSET OF OR EQUAL TO */,
  [String.fromCodePoint(8840)]: '&NotSubsetEqual;' /* NEITHER A SUBSET OF NOR EQUAL TO */,
  [String.fromCodePoint(8841)]: '&NotSupersetEqual;' /* NEITHER A SUPERSET OF NOR EQUAL TO */,
  [String.fromCodePoint(8842)]: '&subsetneq;' /* SUBSET OF WITH NOT EQUAL TO */,
  [String.fromCodePoint(8843)]: '&supsetneq;' /* SUPERSET OF WITH NOT EQUAL TO */,
  [String.fromCodePoint(8845)]: '&cupdot;' /* MULTISET MULTIPLICATION */,
  [String.fromCodePoint(8846)]: '&UnionPlus;' /* MULTISET UNION */,
  [String.fromCodePoint(8847)]: '&sqsubset;' /* SQUARE IMAGE OF */,
  [String.fromCodePoint(8848)]: '&sqsupset;' /* SQUARE ORIGINAL OF */,
  [String.fromCodePoint(8849)]: '&sqsubseteq;' /* SQUARE IMAGE OF OR EQUAL TO */,
  [String.fromCodePoint(8850)]: '&sqsupseteq;' /* SQUARE ORIGINAL OF OR EQUAL TO */,
  [String.fromCodePoint(8851)]: '&SquareIntersection;' /* SQUARE CAP */,
  [String.fromCodePoint(8852)]: '&SquareUnion;' /* SQUARE CUP */,
  [String.fromCodePoint(8853)]: '&CirclePlus;' /* CIRCLED PLUS */,
  [String.fromCodePoint(8854)]: '&CircleMinus;' /* CIRCLED MINUS */,
  [String.fromCodePoint(8855)]: '&CircleTimes;' /* CIRCLED TIMES */,
  [String.fromCodePoint(8856)]: '&osol;' /* CIRCLED DIVISION SLASH */,
  [String.fromCodePoint(8857)]: '&CircleDot;' /* CIRCLED DOT OPERATOR */,
  [String.fromCodePoint(8858)]: '&circledcirc;' /* CIRCLED RING OPERATOR */,
  [String.fromCodePoint(8859)]: '&circledast;' /* CIRCLED ASTERISK OPERATOR */,
  [String.fromCodePoint(8861)]: '&circleddash;' /* CIRCLED DASH */,
  [String.fromCodePoint(8862)]: '&boxplus;' /* SQUARED PLUS */,
  [String.fromCodePoint(8863)]: '&boxminus;' /* SQUARED MINUS */,
  [String.fromCodePoint(8864)]: '&boxtimes;' /* SQUARED TIMES */,
  [String.fromCodePoint(8865)]: '&dotsquare;' /* SQUARED DOT OPERATOR */,
  [String.fromCodePoint(8866)]: '&RightTee;' /* RIGHT TACK */,
  [String.fromCodePoint(8867)]: '&LeftTee;' /* LEFT TACK */,
  [String.fromCodePoint(8868)]: '&DownTee;' /* DOWN TACK */,
  [String.fromCodePoint(8869)]: '&UpTee;' /* UP TACK */,
  [String.fromCodePoint(8871)]: '&models;' /* MODELS */,
  [String.fromCodePoint(8872)]: '&DoubleRightTee;' /* TRUE */,
  [String.fromCodePoint(8873)]: '&Vdash;' /* FORCES */,
  [String.fromCodePoint(8874)]: '&Vvdash;' /* TRIPLE VERTICAL BAR RIGHT TURNSTILE */,
  [String.fromCodePoint(8875)]: '&VDash;' /* DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE */,
  [String.fromCodePoint(8876)]: '&nvdash;' /* DOES NOT PROVE */,
  [String.fromCodePoint(8877)]: '&nvDash;' /* NOT TRUE */,
  [String.fromCodePoint(8878)]: '&nVdash;' /* DOES NOT FORCE */,
  [String.fromCodePoint(8879)]: '&nVDash;' /* NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE */,
  [String.fromCodePoint(8880)]: '&prurel;' /* PRECEDES UNDER RELATION */,
  [String.fromCodePoint(8882)]: '&LeftTriangle;' /* NORMAL SUBGROUP OF */,
  [String.fromCodePoint(8883)]: '&RightTriangle;' /* CONTAINS AS NORMAL SUBGROUP */,
  [String.fromCodePoint(8884)]: '&LeftTriangleEqual;' /* NORMAL SUBGROUP OF OR EQUAL TO */,
  [String.fromCodePoint(8885)]: '&RightTriangleEqual;' /* CONTAINS AS NORMAL SUBGROUP OR EQUAL TO */,
  [String.fromCodePoint(8886)]: '&origof;' /* ORIGINAL OF */,
  [String.fromCodePoint(8887)]: '&imof;' /* IMAGE OF */,
  [String.fromCodePoint(8888)]: '&multimap;' /* MULTIMAP */,
  [String.fromCodePoint(8889)]: '&hercon;' /* HERMITIAN CONJUGATE MATRIX */,
  [String.fromCodePoint(8890)]: '&intercal;' /* INTERCALATE */,
  [String.fromCodePoint(8891)]: '&veebar;' /* XOR */,
  [String.fromCodePoint(8893)]: '&barvee;' /* NOR */,
  [String.fromCodePoint(8894)]: '&angrtvb;' /* RIGHT ANGLE WITH ARC */,
  [String.fromCodePoint(8895)]: '&lrtri;' /* RIGHT TRIANGLE */,
  [String.fromCodePoint(8896)]: '&bigwedge;' /* N-ARY LOGICAL AND */,
  [String.fromCodePoint(8897)]: '&bigvee;' /* N-ARY LOGICAL OR */,
  [String.fromCodePoint(8898)]: '&bigcap;' /* N-ARY INTERSECTION */,
  [String.fromCodePoint(8899)]: '&bigcup;' /* N-ARY UNION */,
  [String.fromCodePoint(8900)]: '&Diamond;' /* DIAMOND OPERATOR */,
  [String.fromCodePoint(8901)]: '&sdot;' /* DOT OPERATOR */,
  [String.fromCodePoint(8902)]: '&Star;' /* STAR OPERATOR */,
  [String.fromCodePoint(8903)]: '&divideontimes;' /* DIVISION TIMES */,
  [String.fromCodePoint(8904)]: '&bowtie;' /* BOWTIE */,
  [String.fromCodePoint(8905)]: '&ltimes;' /* LEFT NORMAL FACTOR SEMIDIRECT PRODUCT */,
  [String.fromCodePoint(8906)]: '&rtimes;' /* RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT */,
  [String.fromCodePoint(8907)]: '&leftthreetimes;' /* LEFT SEMIDIRECT PRODUCT */,
  [String.fromCodePoint(8908)]: '&rightthreetimes;' /* RIGHT SEMIDIRECT PRODUCT */,
  [String.fromCodePoint(8909)]: '&backsimeq;' /* REVERSED TILDE EQUALS */,
  [String.fromCodePoint(8910)]: '&curlyvee;' /* CURLY LOGICAL OR */,
  [String.fromCodePoint(8911)]: '&curlywedge;' /* CURLY LOGICAL AND */,
  [String.fromCodePoint(8912)]: '&Subset;' /* DOUBLE SUBSET */,
  [String.fromCodePoint(8913)]: '&Supset;' /* DOUBLE SUPERSET */,
  [String.fromCodePoint(8914)]: '&Cap;' /* DOUBLE INTERSECTION */,
  [String.fromCodePoint(8915)]: '&Cup;' /* DOUBLE UNION */,
  [String.fromCodePoint(8916)]: '&pitchfork;' /* PITCHFORK */,
  [String.fromCodePoint(8917)]: '&epar;' /* EQUAL AND PARALLEL TO */,
  [String.fromCodePoint(8918)]: '&lessdot;' /* LESS-THAN WITH DOT */,
  [String.fromCodePoint(8919)]: '&gtrdot;' /* GREATER-THAN WITH DOT */,
  [String.fromCodePoint(8920)]: '&Ll;' /* VERY MUCH LESS-THAN */,
  [String.fromCodePoint(8921)]: '&ggg;' /* VERY MUCH GREATER-THAN */,
  [String.fromCodePoint(8922)]: '&lesseqgtr;' /* LESS-THAN EQUAL TO OR GREATER-THAN */,
  [String.fromCodePoint(8923)]: '&GreaterEqualLess;' /* GREATER-THAN EQUAL TO OR LESS-THAN */,
  [String.fromCodePoint(8926)]: '&curlyeqprec;' /* EQUAL TO OR PRECEDES */,
  [String.fromCodePoint(8927)]: '&curlyeqsucc;' /* EQUAL TO OR SUCCEEDS */,
  [String.fromCodePoint(8928)]: '&NotPrecedesSlantEqual;' /* DOES NOT PRECEDE OR EQUAL */,
  [String.fromCodePoint(8929)]: '&NotSucceedsSlantEqual;' /* DOES NOT SUCCEED OR EQUAL */,
  [String.fromCodePoint(8930)]: '&NotSquareSubsetEqual;' /* NOT SQUARE IMAGE OF OR EQUAL TO */,
  [String.fromCodePoint(8931)]: '&NotSquareSupersetEqual;' /* NOT SQUARE ORIGINAL OF OR EQUAL TO */,
  [String.fromCodePoint(8934)]: '&lnsim;' /* LESS-THAN BUT NOT EQUIVALENT TO */,
  [String.fromCodePoint(8935)]: '&gnsim;' /* GREATER-THAN BUT NOT EQUIVALENT TO */,
  [String.fromCodePoint(8936)]: '&precnsim;' /* PRECEDES BUT NOT EQUIVALENT TO */,
  [String.fromCodePoint(8937)]: '&succnsim;' /* SUCCEEDS BUT NOT EQUIVALENT TO */,
  [String.fromCodePoint(8938)]: '&NotLeftTriangle;' /* NOT NORMAL SUBGROUP OF */,
  [String.fromCodePoint(8939)]: '&NotRightTriangle;' /* DOES NOT CONTAIN AS NORMAL SUBGROUP */,
  [String.fromCodePoint(8940)]: '&NotLeftTriangleEqual;' /* NOT NORMAL SUBGROUP OF OR EQUAL TO */,
  [String.fromCodePoint(8941)]: '&NotRightTriangleEqual;' /* DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL */,
  [String.fromCodePoint(8942)]: '&vellip;' /* VERTICAL ELLIPSIS */,
  [String.fromCodePoint(8943)]: '&ctdot;' /* MIDLINE HORIZONTAL ELLIPSIS */,
  [String.fromCodePoint(8944)]: '&utdot;' /* UP RIGHT DIAGONAL ELLIPSIS */,
  [String.fromCodePoint(8945)]: '&dtdot;' /* DOWN RIGHT DIAGONAL ELLIPSIS */,
  [String.fromCodePoint(8946)]: '&disin;' /* ELEMENT OF WITH LONG HORIZONTAL STROKE */,
  [String.fromCodePoint(8947)]: '&isinsv;' /* ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE */,
  [String.fromCodePoint(8948)]: '&isins;' /* SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE */,
  [String.fromCodePoint(8949)]: '&isindot;' /* ELEMENT OF WITH DOT ABOVE */,
  [String.fromCodePoint(8950)]: '&notinvc;' /* ELEMENT OF WITH OVERBAR */,
  [String.fromCodePoint(8951)]: '&notinvb;' /* SMALL ELEMENT OF WITH OVERBAR */,
  [String.fromCodePoint(8953)]: '&isinE;' /* ELEMENT OF WITH TWO HORIZONTAL STROKES */,
  [String.fromCodePoint(8954)]: '&nisd;' /* CONTAINS WITH LONG HORIZONTAL STROKE */,
  [String.fromCodePoint(8955)]: '&xnis;' /* CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE */,
  [String.fromCodePoint(8956)]: '&nis;' /* SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE */,
  [String.fromCodePoint(8957)]: '&notnivc;' /* CONTAINS WITH OVERBAR */,
  [String.fromCodePoint(8958)]: '&notnivb;' /* SMALL CONTAINS WITH OVERBAR */,
  [String.fromCodePoint(8965)]: '&barwedge;' /* PROJECTIVE */,
  [String.fromCodePoint(8966)]: '&doublebarwedge;' /* PERSPECTIVE */,
  [String.fromCodePoint(8968)]: '&LeftCeiling;' /* LEFT CEILING */,
  [String.fromCodePoint(8969)]: '&RightCeiling;' /* RIGHT CEILING */,
  [String.fromCodePoint(8970)]: '&LeftFloor;' /* LEFT FLOOR */,
  [String.fromCodePoint(8971)]: '&RightFloor;' /* RIGHT FLOOR */,
  [String.fromCodePoint(8972)]: '&drcrop;' /* BOTTOM RIGHT CROP */,
  [String.fromCodePoint(8973)]: '&dlcrop;' /* BOTTOM LEFT CROP */,
  [String.fromCodePoint(8974)]: '&urcrop;' /* TOP RIGHT CROP */,
  [String.fromCodePoint(8975)]: '&ulcrop;' /* TOP LEFT CROP */,
  [String.fromCodePoint(8976)]: '&bnot;' /* REVERSED NOT SIGN */,
  [String.fromCodePoint(8978)]: '&profline;' /* ARC */,
  [String.fromCodePoint(8979)]: '&profsurf;' /* SEGMENT */,
  [String.fromCodePoint(8981)]: '&telrec;' /* TELEPHONE RECORDER */,
  [String.fromCodePoint(8982)]: '&target;' /* POSITION INDICATOR */,
  [String.fromCodePoint(8988)]: '&ulcorner;' /* TOP LEFT CORNER */,
  [String.fromCodePoint(8989)]: '&urcorner;' /* TOP RIGHT CORNER */,
  [String.fromCodePoint(8990)]: '&llcorner;' /* BOTTOM LEFT CORNER */,
  [String.fromCodePoint(8991)]: '&lrcorner;' /* BOTTOM RIGHT CORNER */,
  [String.fromCodePoint(8994)]: '&sfrown;' /* FROWN */,
  [String.fromCodePoint(8995)]: '&ssmile;' /* SMILE */,
  [String.fromCodePoint(9005)]: '&cylcty;' /* CYLINDRICITY */,
  [String.fromCodePoint(9006)]: '&profalar;' /* ALL AROUND-PROFILE */,
  [String.fromCodePoint(9014)]: '&topbot;' /* APL FUNCTIONAL SYMBOL I-BEAM */,
  [String.fromCodePoint(9021)]: '&ovbar;' /* APL FUNCTIONAL SYMBOL CIRCLE STILE */,
  [String.fromCodePoint(9023)]: '&solbar;' /* APL FUNCTIONAL SYMBOL SLASH BAR */,
  [String.fromCodePoint(9084)]: '&angzarr;' /* RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW */,
  [String.fromCodePoint(9136)]: '&lmoustache;' /* UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION */,
  [String.fromCodePoint(9137)]: '&rmoustache;' /* UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION */,
  [String.fromCodePoint(9140)]: '&OverBracket;' /* TOP SQUARE BRACKET */,
  [String.fromCodePoint(9141)]: '&UnderBracket;' /* BOTTOM SQUARE BRACKET */,
  [String.fromCodePoint(9142)]: '&bbrktbrk;' /* BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET */,
  [String.fromCodePoint(9180)]: '&OverParenthesis;' /* TOP PARENTHESIS */,
  [String.fromCodePoint(9181)]: '&UnderParenthesis;' /* BOTTOM PARENTHESIS */,
  [String.fromCodePoint(9182)]: '&OverBrace;' /* TOP CURLY BRACKET */,
  [String.fromCodePoint(9183)]: '&UnderBrace;' /* BOTTOM CURLY BRACKET */,
  [String.fromCodePoint(9186)]: '&trpezium;' /* WHITE TRAPEZIUM */,
  [String.fromCodePoint(9191)]: '&elinters;' /* ELECTRICAL INTERSECTION */,
  [String.fromCodePoint(9251)]: '&blank;' /* OPEN BOX */,
  [String.fromCodePoint(9416)]: '&circledS;' /* CIRCLED LATIN CAPITAL LETTER S */,
  [String.fromCodePoint(9472)]: '&HorizontalLine;' /* BOX DRAWINGS LIGHT HORIZONTAL */,
  [String.fromCodePoint(9474)]: '&boxv;' /* BOX DRAWINGS LIGHT VERTICAL */,
  [String.fromCodePoint(9484)]: '&boxdr;' /* BOX DRAWINGS LIGHT DOWN AND RIGHT */,
  [String.fromCodePoint(9488)]: '&boxdl;' /* BOX DRAWINGS LIGHT DOWN AND LEFT */,
  [String.fromCodePoint(9492)]: '&boxur;' /* BOX DRAWINGS LIGHT UP AND RIGHT */,
  [String.fromCodePoint(9496)]: '&boxul;' /* BOX DRAWINGS LIGHT UP AND LEFT */,
  [String.fromCodePoint(9500)]: '&boxvr;' /* BOX DRAWINGS LIGHT VERTICAL AND RIGHT */,
  [String.fromCodePoint(9508)]: '&boxvl;' /* BOX DRAWINGS LIGHT VERTICAL AND LEFT */,
  [String.fromCodePoint(9516)]: '&boxhd;' /* BOX DRAWINGS LIGHT DOWN AND HORIZONTAL */,
  [String.fromCodePoint(9524)]: '&boxhu;' /* BOX DRAWINGS LIGHT UP AND HORIZONTAL */,
  [String.fromCodePoint(9532)]: '&boxvh;' /* BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL */,
  [String.fromCodePoint(9552)]: '&boxH;' /* BOX DRAWINGS DOUBLE HORIZONTAL */,
  [String.fromCodePoint(9553)]: '&boxV;' /* BOX DRAWINGS DOUBLE VERTICAL */,
  [String.fromCodePoint(9554)]: '&boxdR;' /* BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE */,
  [String.fromCodePoint(9555)]: '&boxDr;' /* BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE */,
  [String.fromCodePoint(9556)]: '&boxDR;' /* BOX DRAWINGS DOUBLE DOWN AND RIGHT */,
  [String.fromCodePoint(9557)]: '&boxdL;' /* BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE */,
  [String.fromCodePoint(9558)]: '&boxDl;' /* BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE */,
  [String.fromCodePoint(9559)]: '&boxDL;' /* BOX DRAWINGS DOUBLE DOWN AND LEFT */,
  [String.fromCodePoint(9560)]: '&boxuR;' /* BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE */,
  [String.fromCodePoint(9561)]: '&boxUr;' /* BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE */,
  [String.fromCodePoint(9562)]: '&boxUR;' /* BOX DRAWINGS DOUBLE UP AND RIGHT */,
  [String.fromCodePoint(9563)]: '&boxuL;' /* BOX DRAWINGS UP SINGLE AND LEFT DOUBLE */,
  [String.fromCodePoint(9564)]: '&boxUl;' /* BOX DRAWINGS UP DOUBLE AND LEFT SINGLE */,
  [String.fromCodePoint(9565)]: '&boxUL;' /* BOX DRAWINGS DOUBLE UP AND LEFT */,
  [String.fromCodePoint(9566)]: '&boxvR;' /* BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE */,
  [String.fromCodePoint(9567)]: '&boxVr;' /* BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE */,
  [String.fromCodePoint(9568)]: '&boxVR;' /* BOX DRAWINGS DOUBLE VERTICAL AND RIGHT */,
  [String.fromCodePoint(9569)]: '&boxvL;' /* BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE */,
  [String.fromCodePoint(9570)]: '&boxVl;' /* BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE */,
  [String.fromCodePoint(9571)]: '&boxVL;' /* BOX DRAWINGS DOUBLE VERTICAL AND LEFT */,
  [String.fromCodePoint(9572)]: '&boxHd;' /* BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE */,
  [String.fromCodePoint(9573)]: '&boxhD;' /* BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE */,
  [String.fromCodePoint(9574)]: '&boxHD;' /* BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL */,
  [String.fromCodePoint(9575)]: '&boxHu;' /* BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE */,
  [String.fromCodePoint(9576)]: '&boxhU;' /* BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE */,
  [String.fromCodePoint(9577)]: '&boxHU;' /* BOX DRAWINGS DOUBLE UP AND HORIZONTAL */,
  [String.fromCodePoint(9578)]: '&boxvH;' /* BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE */,
  [String.fromCodePoint(9579)]: '&boxVh;' /* BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE */,
  [String.fromCodePoint(9580)]: '&boxVH;' /* BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL */,
  [String.fromCodePoint(9600)]: '&uhblk;' /* UPPER HALF BLOCK */,
  [String.fromCodePoint(9604)]: '&lhblk;' /* LOWER HALF BLOCK */,
  [String.fromCodePoint(9608)]: '&block;' /* FULL BLOCK */,
  [String.fromCodePoint(9617)]: '&blk14;' /* LIGHT SHADE */,
  [String.fromCodePoint(9618)]: '&blk12;' /* MEDIUM SHADE */,
  [String.fromCodePoint(9619)]: '&blk34;' /* DARK SHADE */,
  [String.fromCodePoint(9633)]: '&Square;' /* WHITE SQUARE */,
  [String.fromCodePoint(9642)]: '&FilledVerySmallSquare;' /* BLACK SMALL SQUARE */,
  [String.fromCodePoint(9643)]: '&EmptyVerySmallSquare;' /* WHITE SMALL SQUARE */,
  [String.fromCodePoint(9645)]: '&rect;' /* WHITE RECTANGLE */,
  [String.fromCodePoint(9646)]: '&marker;' /* BLACK VERTICAL RECTANGLE */,
  [String.fromCodePoint(9649)]: '&fltns;' /* WHITE PARALLELOGRAM */,
  [String.fromCodePoint(9651)]: '&bigtriangleup;' /* WHITE UP-POINTING TRIANGLE */,
  [String.fromCodePoint(9652)]: '&blacktriangle;' /* BLACK UP-POINTING SMALL TRIANGLE */,
  [String.fromCodePoint(9653)]: '&triangle;' /* WHITE UP-POINTING SMALL TRIANGLE */,
  [String.fromCodePoint(9656)]: '&blacktriangleright;' /* BLACK RIGHT-POINTING SMALL TRIANGLE */,
  [String.fromCodePoint(9657)]: '&triangleright;' /* WHITE RIGHT-POINTING SMALL TRIANGLE */,
  [String.fromCodePoint(9661)]: '&bigtriangledown;' /* WHITE DOWN-POINTING TRIANGLE */,
  [String.fromCodePoint(9662)]: '&blacktriangledown;' /* BLACK DOWN-POINTING SMALL TRIANGLE */,
  [String.fromCodePoint(9663)]: '&triangledown;' /* WHITE DOWN-POINTING SMALL TRIANGLE */,
  [String.fromCodePoint(9666)]: '&blacktriangleleft;' /* BLACK LEFT-POINTING SMALL TRIANGLE */,
  [String.fromCodePoint(9667)]: '&triangleleft;' /* WHITE LEFT-POINTING SMALL TRIANGLE */,
  [String.fromCodePoint(9674)]: '&lozenge;' /* LOZENGE */,
  [String.fromCodePoint(9675)]: '&cir;' /* WHITE CIRCLE */,
  [String.fromCodePoint(9708)]: '&tridot;' /* WHITE UP-POINTING TRIANGLE WITH DOT */,
  [String.fromCodePoint(9711)]: '&bigcirc;' /* LARGE CIRCLE */,
  [String.fromCodePoint(9720)]: '&ultri;' /* UPPER LEFT TRIANGLE */,
  [String.fromCodePoint(9721)]: '&urtri;' /* UPPER RIGHT TRIANGLE */,
  [String.fromCodePoint(9722)]: '&lltri;' /* LOWER LEFT TRIANGLE */,
  [String.fromCodePoint(9723)]: '&EmptySmallSquare;' /* WHITE MEDIUM SQUARE */,
  [String.fromCodePoint(9724)]: '&FilledSmallSquare;' /* BLACK MEDIUM SQUARE */,
  [String.fromCodePoint(9733)]: '&bigstar;' /* BLACK STAR */,
  [String.fromCodePoint(9734)]: '&star;' /* WHITE STAR */,
  [String.fromCodePoint(9742)]: '&phone;' /* BLACK TELEPHONE */,
  [String.fromCodePoint(9792)]: '&female;' /* FEMALE SIGN */,
  [String.fromCodePoint(9794)]: '&male;' /* MALE SIGN */,
  [String.fromCodePoint(9824)]: '&spadesuit;' /* BLACK SPADE SUIT */,
  [String.fromCodePoint(9827)]: '&clubsuit;' /* BLACK CLUB SUIT */,
  [String.fromCodePoint(9829)]: '&heartsuit;' /* BLACK HEART SUIT */,
  [String.fromCodePoint(9830)]: '&diamondsuit;' /* BLACK DIAMOND SUIT */,
  [String.fromCodePoint(9834)]: '&sung;' /* EIGHTH NOTE */,
  [String.fromCodePoint(9837)]: '&flat;' /* MUSIC FLAT SIGN */,
  [String.fromCodePoint(9838)]: '&natural;' /* MUSIC NATURAL SIGN */,
  [String.fromCodePoint(9839)]: '&sharp;' /* MUSIC SHARP SIGN */,
  [String.fromCodePoint(10003)]: '&checkmark;' /* CHECK MARK */,
  [String.fromCodePoint(10007)]: '&cross;' /* BALLOT X */,
  [String.fromCodePoint(10016)]: '&maltese;' /* MALTESE CROSS */,
  [String.fromCodePoint(10038)]: '&sext;' /* SIX POINTED BLACK STAR */,
  [String.fromCodePoint(10072)]: '&VerticalSeparator;' /* LIGHT VERTICAL BAR */,
  [String.fromCodePoint(10098)]: '&lbbrk;' /* LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT */,
  [String.fromCodePoint(10099)]: '&rbbrk;' /* LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT */,
  [String.fromCodePoint(10214)]: '&LeftDoubleBracket;' /* MATHEMATICAL LEFT WHITE SQUARE BRACKET */,
  [String.fromCodePoint(10215)]: '&RightDoubleBracket;' /* MATHEMATICAL RIGHT WHITE SQUARE BRACKET */,
  [String.fromCodePoint(10216)]: '&langle;' /* MATHEMATICAL LEFT ANGLE BRACKET */,
  [String.fromCodePoint(10217)]: '&rangle;' /* MATHEMATICAL RIGHT ANGLE BRACKET */,
  [String.fromCodePoint(10218)]: '&Lang;' /* MATHEMATICAL LEFT DOUBLE ANGLE BRACKET */,
  [String.fromCodePoint(10219)]: '&Rang;' /* MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET */,
  [String.fromCodePoint(10220)]: '&loang;' /* MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET */,
  [String.fromCodePoint(10221)]: '&roang;' /* MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET */,
  [String.fromCodePoint(10229)]: '&LongLeftArrow;' /* LONG LEFTWARDS ARROW */,
  [String.fromCodePoint(10230)]: '&LongRightArrow;' /* LONG RIGHTWARDS ARROW */,
  [String.fromCodePoint(10231)]: '&LongLeftRightArrow;' /* LONG LEFT RIGHT ARROW */,
  [String.fromCodePoint(10232)]: '&DoubleLongLeftArrow;' /* LONG LEFTWARDS DOUBLE ARROW */,
  [String.fromCodePoint(10233)]: '&DoubleLongRightArrow;' /* LONG RIGHTWARDS DOUBLE ARROW */,
  [String.fromCodePoint(10234)]: '&DoubleLongLeftRightArrow;' /* LONG LEFT RIGHT DOUBLE ARROW */,
  [String.fromCodePoint(10236)]: '&longmapsto;' /* LONG RIGHTWARDS ARROW FROM BAR */,
  [String.fromCodePoint(10239)]: '&dzigrarr;' /* LONG RIGHTWARDS SQUIGGLE ARROW */,
  [String.fromCodePoint(10498)]: '&nvlArr;' /* LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE */,
  [String.fromCodePoint(10499)]: '&nvrArr;' /* RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE */,
  [String.fromCodePoint(10500)]: '&nvHarr;' /* LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE */,
  [String.fromCodePoint(10501)]: '&Map;' /* RIGHTWARDS TWO-HEADED ARROW FROM BAR */,
  [String.fromCodePoint(10508)]: '&lbarr;' /* LEFTWARDS DOUBLE DASH ARROW */,
  [String.fromCodePoint(10509)]: '&bkarow;' /* RIGHTWARDS DOUBLE DASH ARROW */,
  [String.fromCodePoint(10510)]: '&lBarr;' /* LEFTWARDS TRIPLE DASH ARROW */,
  [String.fromCodePoint(10511)]: '&dbkarow;' /* RIGHTWARDS TRIPLE DASH ARROW */,
  [String.fromCodePoint(10512)]: '&drbkarow;' /* RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW */,
  [String.fromCodePoint(10513)]: '&DDotrahd;' /* RIGHTWARDS ARROW WITH DOTTED STEM */,
  [String.fromCodePoint(10514)]: '&UpArrowBar;' /* UPWARDS ARROW TO BAR */,
  [String.fromCodePoint(10515)]: '&DownArrowBar;' /* DOWNWARDS ARROW TO BAR */,
  [String.fromCodePoint(10518)]: '&Rarrtl;' /* RIGHTWARDS TWO-HEADED ARROW WITH TAIL */,
  [String.fromCodePoint(10521)]: '&latail;' /* LEFTWARDS ARROW-TAIL */,
  [String.fromCodePoint(10522)]: '&ratail;' /* RIGHTWARDS ARROW-TAIL */,
  [String.fromCodePoint(10523)]: '&lAtail;' /* LEFTWARDS DOUBLE ARROW-TAIL */,
  [String.fromCodePoint(10524)]: '&rAtail;' /* RIGHTWARDS DOUBLE ARROW-TAIL */,
  [String.fromCodePoint(10525)]: '&larrfs;' /* LEFTWARDS ARROW TO BLACK DIAMOND */,
  [String.fromCodePoint(10526)]: '&rarrfs;' /* RIGHTWARDS ARROW TO BLACK DIAMOND */,
  [String.fromCodePoint(10527)]: '&larrbfs;' /* LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND */,
  [String.fromCodePoint(10528)]: '&rarrbfs;' /* RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND */,
  [String.fromCodePoint(10531)]: '&nwarhk;' /* NORTH WEST ARROW WITH HOOK */,
  [String.fromCodePoint(10532)]: '&nearhk;' /* NORTH EAST ARROW WITH HOOK */,
  [String.fromCodePoint(10533)]: '&hksearow;' /* SOUTH EAST ARROW WITH HOOK */,
  [String.fromCodePoint(10534)]: '&hkswarow;' /* SOUTH WEST ARROW WITH HOOK */,
  [String.fromCodePoint(10535)]: '&nwnear;' /* NORTH WEST ARROW AND NORTH EAST ARROW */,
  [String.fromCodePoint(10536)]: '&toea;' /* NORTH EAST ARROW AND SOUTH EAST ARROW */,
  [String.fromCodePoint(10537)]: '&tosa;' /* SOUTH EAST ARROW AND SOUTH WEST ARROW */,
  [String.fromCodePoint(10538)]: '&swnwar;' /* SOUTH WEST ARROW AND NORTH WEST ARROW */,
  [String.fromCodePoint(10547)]: '&rarrc;' /* WAVE ARROW POINTING DIRECTLY RIGHT */,
  [String.fromCodePoint(10549)]: '&cudarrr;' /* ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS */,
  [String.fromCodePoint(10550)]: '&ldca;' /* ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS */,
  [String.fromCodePoint(10551)]: '&rdca;' /* ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS */,
  [String.fromCodePoint(10552)]: '&cudarrl;' /* RIGHT-SIDE ARC CLOCKWISE ARROW */,
  [String.fromCodePoint(10553)]: '&larrpl;' /* LEFT-SIDE ARC ANTICLOCKWISE ARROW */,
  [String.fromCodePoint(10556)]: '&curarrm;' /* TOP ARC CLOCKWISE ARROW WITH MINUS */,
  [String.fromCodePoint(10557)]: '&cularrp;' /* TOP ARC ANTICLOCKWISE ARROW WITH PLUS */,
  [String.fromCodePoint(10565)]: '&rarrpl;' /* RIGHTWARDS ARROW WITH PLUS BELOW */,
  [String.fromCodePoint(10568)]: '&harrcir;' /* LEFT RIGHT ARROW THROUGH SMALL CIRCLE */,
  [String.fromCodePoint(10569)]: '&Uarrocir;' /* UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE */,
  [String.fromCodePoint(10570)]: '&lurdshar;' /* LEFT BARB UP RIGHT BARB DOWN HARPOON */,
  [String.fromCodePoint(10571)]: '&ldrushar;' /* LEFT BARB DOWN RIGHT BARB UP HARPOON */,
  [String.fromCodePoint(10574)]: '&LeftRightVector;' /* LEFT BARB UP RIGHT BARB UP HARPOON */,
  [String.fromCodePoint(10575)]: '&RightUpDownVector;' /* UP BARB RIGHT DOWN BARB RIGHT HARPOON */,
  [String.fromCodePoint(10576)]: '&DownLeftRightVector;' /* LEFT BARB DOWN RIGHT BARB DOWN HARPOON */,
  [String.fromCodePoint(10577)]: '&LeftUpDownVector;' /* UP BARB LEFT DOWN BARB LEFT HARPOON */,
  [String.fromCodePoint(10578)]: '&LeftVectorBar;' /* LEFTWARDS HARPOON WITH BARB UP TO BAR */,
  [String.fromCodePoint(10579)]: '&RightVectorBar;' /* RIGHTWARDS HARPOON WITH BARB UP TO BAR */,
  [String.fromCodePoint(10580)]: '&RightUpVectorBar;' /* UPWARDS HARPOON WITH BARB RIGHT TO BAR */,
  [String.fromCodePoint(10581)]: '&RightDownVectorBar;' /* DOWNWARDS HARPOON WITH BARB RIGHT TO BAR */,
  [String.fromCodePoint(10582)]: '&DownLeftVectorBar;' /* LEFTWARDS HARPOON WITH BARB DOWN TO BAR */,
  [String.fromCodePoint(10583)]: '&DownRightVectorBar;' /* RIGHTWARDS HARPOON WITH BARB DOWN TO BAR */,
  [String.fromCodePoint(10584)]: '&LeftUpVectorBar;' /* UPWARDS HARPOON WITH BARB LEFT TO BAR */,
  [String.fromCodePoint(10585)]: '&LeftDownVectorBar;' /* DOWNWARDS HARPOON WITH BARB LEFT TO BAR */,
  [String.fromCodePoint(10586)]: '&LeftTeeVector;' /* LEFTWARDS HARPOON WITH BARB UP FROM BAR */,
  [String.fromCodePoint(10587)]: '&RightTeeVector;' /* RIGHTWARDS HARPOON WITH BARB UP FROM BAR */,
  [String.fromCodePoint(10588)]: '&RightUpTeeVector;' /* UPWARDS HARPOON WITH BARB RIGHT FROM BAR */,
  [String.fromCodePoint(10589)]: '&RightDownTeeVector;' /* DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR */,
  [String.fromCodePoint(10590)]: '&DownLeftTeeVector;' /* LEFTWARDS HARPOON WITH BARB DOWN FROM BAR */,
  [String.fromCodePoint(10591)]: '&DownRightTeeVector;' /* RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR */,
  [String.fromCodePoint(10592)]: '&LeftUpTeeVector;' /* UPWARDS HARPOON WITH BARB LEFT FROM BAR */,
  [String.fromCodePoint(10593)]: '&LeftDownTeeVector;' /* DOWNWARDS HARPOON WITH BARB LEFT FROM BAR */,
  [String.fromCodePoint(10594)]: '&lHar;' /* LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN */,
  [String.fromCodePoint(10595)]: '&uHar;' /* UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT */,
  [String.fromCodePoint(10596)]: '&rHar;' /* RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN */,
  [String.fromCodePoint(10597)]: '&dHar;' /* DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT */,
  [String.fromCodePoint(10598)]: '&luruhar;' /* LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP */,
  [String.fromCodePoint(10599)]: '&ldrdhar;' /* LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN */,
  [String.fromCodePoint(10600)]: '&ruluhar;' /* RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP */,
  [String.fromCodePoint(10601)]: '&rdldhar;' /* RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN */,
  [String.fromCodePoint(10602)]: '&lharul;' /* LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH */,
  [String.fromCodePoint(10603)]: '&llhard;' /* LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH */,
  [String.fromCodePoint(10604)]: '&rharul;' /* RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH */,
  [String.fromCodePoint(10605)]: '&lrhard;' /* RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH */,
  [String.fromCodePoint(10606)]: '&UpEquilibrium;' /* UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT */,
  [String.fromCodePoint(10607)]: '&ReverseUpEquilibrium;' /* DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT */,
  [String.fromCodePoint(10608)]: '&RoundImplies;' /* RIGHT DOUBLE ARROW WITH ROUNDED HEAD */,
  [String.fromCodePoint(10609)]: '&erarr;' /* EQUALS SIGN ABOVE RIGHTWARDS ARROW */,
  [String.fromCodePoint(10610)]: '&simrarr;' /* TILDE OPERATOR ABOVE RIGHTWARDS ARROW */,
  [String.fromCodePoint(10611)]: '&larrsim;' /* LEFTWARDS ARROW ABOVE TILDE OPERATOR */,
  [String.fromCodePoint(10612)]: '&rarrsim;' /* RIGHTWARDS ARROW ABOVE TILDE OPERATOR */,
  [String.fromCodePoint(10613)]: '&rarrap;' /* RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO */,
  [String.fromCodePoint(10614)]: '&ltlarr;' /* LESS-THAN ABOVE LEFTWARDS ARROW */,
  [String.fromCodePoint(10616)]: '&gtrarr;' /* GREATER-THAN ABOVE RIGHTWARDS ARROW */,
  [String.fromCodePoint(10617)]: '&subrarr;' /* SUBSET ABOVE RIGHTWARDS ARROW */,
  [String.fromCodePoint(10619)]: '&suplarr;' /* SUPERSET ABOVE LEFTWARDS ARROW */,
  [String.fromCodePoint(10620)]: '&lfisht;' /* LEFT FISH TAIL */,
  [String.fromCodePoint(10621)]: '&rfisht;' /* RIGHT FISH TAIL */,
  [String.fromCodePoint(10622)]: '&ufisht;' /* UP FISH TAIL */,
  [String.fromCodePoint(10623)]: '&dfisht;' /* DOWN FISH TAIL */,
  [String.fromCodePoint(10629)]: '&lopar;' /* LEFT WHITE PARENTHESIS */,
  [String.fromCodePoint(10630)]: '&ropar;' /* RIGHT WHITE PARENTHESIS */,
  [String.fromCodePoint(10635)]: '&lbrke;' /* LEFT SQUARE BRACKET WITH UNDERBAR */,
  [String.fromCodePoint(10636)]: '&rbrke;' /* RIGHT SQUARE BRACKET WITH UNDERBAR */,
  [String.fromCodePoint(10637)]: '&lbrkslu;' /* LEFT SQUARE BRACKET WITH TICK IN TOP CORNER */,
  [String.fromCodePoint(10638)]: '&rbrksld;' /* RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER */,
  [String.fromCodePoint(10639)]: '&lbrksld;' /* LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER */,
  [String.fromCodePoint(10640)]: '&rbrkslu;' /* RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER */,
  [String.fromCodePoint(10641)]: '&langd;' /* LEFT ANGLE BRACKET WITH DOT */,
  [String.fromCodePoint(10642)]: '&rangd;' /* RIGHT ANGLE BRACKET WITH DOT */,
  [String.fromCodePoint(10643)]: '&lparlt;' /* LEFT ARC LESS-THAN BRACKET */,
  [String.fromCodePoint(10644)]: '&rpargt;' /* RIGHT ARC GREATER-THAN BRACKET */,
  [String.fromCodePoint(10645)]: '&gtlPar;' /* DOUBLE LEFT ARC GREATER-THAN BRACKET */,
  [String.fromCodePoint(10646)]: '&ltrPar;' /* DOUBLE RIGHT ARC LESS-THAN BRACKET */,
  [String.fromCodePoint(10650)]: '&vzigzag;' /* VERTICAL ZIGZAG LINE */,
  [String.fromCodePoint(10652)]: '&vangrt;' /* RIGHT ANGLE VARIANT WITH SQUARE */,
  [String.fromCodePoint(10653)]: '&angrtvbd;' /* MEASURED RIGHT ANGLE WITH DOT */,
  [String.fromCodePoint(10660)]: '&ange;' /* ANGLE WITH UNDERBAR */,
  [String.fromCodePoint(10661)]: '&range;' /* REVERSED ANGLE WITH UNDERBAR */,
  [String.fromCodePoint(10662)]: '&dwangle;' /* OBLIQUE ANGLE OPENING UP */,
  [String.fromCodePoint(10663)]: '&uwangle;' /* OBLIQUE ANGLE OPENING DOWN */,
  [String.fromCodePoint(10664)]: '&angmsdaa;' /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT */,
  [String.fromCodePoint(10665)]: '&angmsdab;' /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT */,
  [String.fromCodePoint(10666)]: '&angmsdac;' /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT */,
  [String.fromCodePoint(10667)]: '&angmsdad;' /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT */,
  [String.fromCodePoint(10668)]: '&angmsdae;' /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP */,
  [String.fromCodePoint(10669)]: '&angmsdaf;' /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP */,
  [String.fromCodePoint(10670)]: '&angmsdag;' /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN */,
  [String.fromCodePoint(10671)]: '&angmsdah;' /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN */,
  [String.fromCodePoint(10672)]: '&bemptyv;' /* REVERSED EMPTY SET */,
  [String.fromCodePoint(10673)]: '&demptyv;' /* EMPTY SET WITH OVERBAR */,
  [String.fromCodePoint(10674)]: '&cemptyv;' /* EMPTY SET WITH SMALL CIRCLE ABOVE */,
  [String.fromCodePoint(10675)]: '&raemptyv;' /* EMPTY SET WITH RIGHT ARROW ABOVE */,
  [String.fromCodePoint(10676)]: '&laemptyv;' /* EMPTY SET WITH LEFT ARROW ABOVE */,
  [String.fromCodePoint(10677)]: '&ohbar;' /* CIRCLE WITH HORIZONTAL BAR */,
  [String.fromCodePoint(10678)]: '&omid;' /* CIRCLED VERTICAL BAR */,
  [String.fromCodePoint(10679)]: '&opar;' /* CIRCLED PARALLEL */,
  [String.fromCodePoint(10681)]: '&operp;' /* CIRCLED PERPENDICULAR */,
  [String.fromCodePoint(10683)]: '&olcross;' /* CIRCLE WITH SUPERIMPOSED X */,
  [String.fromCodePoint(10684)]: '&odsold;' /* CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN */,
  [String.fromCodePoint(10686)]: '&olcir;' /* CIRCLED WHITE BULLET */,
  [String.fromCodePoint(10687)]: '&ofcir;' /* CIRCLED BULLET */,
  [String.fromCodePoint(10688)]: '&olt;' /* CIRCLED LESS-THAN */,
  [String.fromCodePoint(10689)]: '&ogt;' /* CIRCLED GREATER-THAN */,
  [String.fromCodePoint(10690)]: '&cirscir;' /* CIRCLE WITH SMALL CIRCLE TO THE RIGHT */,
  [String.fromCodePoint(10691)]: '&cirE;' /* CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT */,
  [String.fromCodePoint(10692)]: '&solb;' /* SQUARED RISING DIAGONAL SLASH */,
  [String.fromCodePoint(10693)]: '&bsolb;' /* SQUARED FALLING DIAGONAL SLASH */,
  [String.fromCodePoint(10697)]: '&boxbox;' /* TWO JOINED SQUARES */,
  [String.fromCodePoint(10701)]: '&trisb;' /* TRIANGLE WITH SERIFS AT BOTTOM */,
  [String.fromCodePoint(10702)]: '&rtriltri;' /* RIGHT TRIANGLE ABOVE LEFT TRIANGLE */,
  [String.fromCodePoint(10703)]: '&LeftTriangleBar;' /* LEFT TRIANGLE BESIDE VERTICAL BAR */,
  [String.fromCodePoint(10704)]: '&RightTriangleBar;' /* VERTICAL BAR BESIDE RIGHT TRIANGLE */,
  [String.fromCodePoint(10714)]: '&race;' /* LEFT DOUBLE WIGGLY FENCE */,
  [String.fromCodePoint(10716)]: '&iinfin;' /* INCOMPLETE INFINITY */,
  [String.fromCodePoint(10717)]: '&infintie;' /* TIE OVER INFINITY */,
  [String.fromCodePoint(10718)]: '&nvinfin;' /* INFINITY NEGATED WITH VERTICAL BAR */,
  [String.fromCodePoint(10723)]: '&eparsl;' /* EQUALS SIGN AND SLANTED PARALLEL */,
  [String.fromCodePoint(10724)]: '&smeparsl;' /* EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE */,
  [String.fromCodePoint(10725)]: '&eqvparsl;' /* IDENTICAL TO AND SLANTED PARALLEL */,
  [String.fromCodePoint(10731)]: '&blacklozenge;' /* BLACK LOZENGE */,
  [String.fromCodePoint(10740)]: '&RuleDelayed;' /* RULE-DELAYED */,
  [String.fromCodePoint(10742)]: '&dsol;' /* SOLIDUS WITH OVERBAR */,
  [String.fromCodePoint(10752)]: '&bigodot;' /* N-ARY CIRCLED DOT OPERATOR */,
  [String.fromCodePoint(10753)]: '&bigoplus;' /* N-ARY CIRCLED PLUS OPERATOR */,
  [String.fromCodePoint(10754)]: '&bigotimes;' /* N-ARY CIRCLED TIMES OPERATOR */,
  [String.fromCodePoint(10756)]: '&biguplus;' /* N-ARY UNION OPERATOR WITH PLUS */,
  [String.fromCodePoint(10758)]: '&bigsqcup;' /* N-ARY SQUARE UNION OPERATOR */,
  [String.fromCodePoint(10764)]: '&iiiint;' /* QUADRUPLE INTEGRAL OPERATOR */,
  [String.fromCodePoint(10765)]: '&fpartint;' /* FINITE PART INTEGRAL */,
  [String.fromCodePoint(10768)]: '&cirfnint;' /* CIRCULATION FUNCTION */,
  [String.fromCodePoint(10769)]: '&awint;' /* ANTICLOCKWISE INTEGRATION */,
  [String.fromCodePoint(10770)]: '&rppolint;' /* LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE */,
  [String.fromCodePoint(10771)]: '&scpolint;' /* LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE */,
  [String.fromCodePoint(10772)]: '&npolint;' /* LINE INTEGRATION NOT INCLUDING THE POLE */,
  [String.fromCodePoint(10773)]: '&pointint;' /* INTEGRAL AROUND A POINT OPERATOR */,
  [String.fromCodePoint(10774)]: '&quatint;' /* QUATERNION INTEGRAL OPERATOR */,
  [String.fromCodePoint(10775)]: '&intlarhk;' /* INTEGRAL WITH LEFTWARDS ARROW WITH HOOK */,
  [String.fromCodePoint(10786)]: '&pluscir;' /* PLUS SIGN WITH SMALL CIRCLE ABOVE */,
  [String.fromCodePoint(10787)]: '&plusacir;' /* PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE */,
  [String.fromCodePoint(10788)]: '&simplus;' /* PLUS SIGN WITH TILDE ABOVE */,
  [String.fromCodePoint(10789)]: '&plusdu;' /* PLUS SIGN WITH DOT BELOW */,
  [String.fromCodePoint(10790)]: '&plussim;' /* PLUS SIGN WITH TILDE BELOW */,
  [String.fromCodePoint(10791)]: '&plustwo;' /* PLUS SIGN WITH SUBSCRIPT TWO */,
  [String.fromCodePoint(10793)]: '&mcomma;' /* MINUS SIGN WITH COMMA ABOVE */,
  [String.fromCodePoint(10794)]: '&minusdu;' /* MINUS SIGN WITH DOT BELOW */,
  [String.fromCodePoint(10797)]: '&loplus;' /* PLUS SIGN IN LEFT HALF CIRCLE */,
  [String.fromCodePoint(10798)]: '&roplus;' /* PLUS SIGN IN RIGHT HALF CIRCLE */,
  [String.fromCodePoint(10799)]: '&Cross;' /* VECTOR OR CROSS PRODUCT */,
  [String.fromCodePoint(10800)]: '&timesd;' /* MULTIPLICATION SIGN WITH DOT ABOVE */,
  [String.fromCodePoint(10801)]: '&timesbar;' /* MULTIPLICATION SIGN WITH UNDERBAR */,
  [String.fromCodePoint(10803)]: '&smashp;' /* SMASH PRODUCT */,
  [String.fromCodePoint(10804)]: '&lotimes;' /* MULTIPLICATION SIGN IN LEFT HALF CIRCLE */,
  [String.fromCodePoint(10805)]: '&rotimes;' /* MULTIPLICATION SIGN IN RIGHT HALF CIRCLE */,
  [String.fromCodePoint(10806)]: '&otimesas;' /* CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT */,
  [String.fromCodePoint(10807)]: '&Otimes;' /* MULTIPLICATION SIGN IN DOUBLE CIRCLE */,
  [String.fromCodePoint(10808)]: '&odiv;' /* CIRCLED DIVISION SIGN */,
  [String.fromCodePoint(10809)]: '&triplus;' /* PLUS SIGN IN TRIANGLE */,
  [String.fromCodePoint(10810)]: '&triminus;' /* MINUS SIGN IN TRIANGLE */,
  [String.fromCodePoint(10811)]: '&tritime;' /* MULTIPLICATION SIGN IN TRIANGLE */,
  [String.fromCodePoint(10812)]: '&intprod;' /* INTERIOR PRODUCT */,
  [String.fromCodePoint(10815)]: '&amalg;' /* AMALGAMATION OR COPRODUCT */,
  [String.fromCodePoint(10816)]: '&capdot;' /* INTERSECTION WITH DOT */,
  [String.fromCodePoint(10818)]: '&ncup;' /* UNION WITH OVERBAR */,
  [String.fromCodePoint(10819)]: '&ncap;' /* INTERSECTION WITH OVERBAR */,
  [String.fromCodePoint(10820)]: '&capand;' /* INTERSECTION WITH LOGICAL AND */,
  [String.fromCodePoint(10821)]: '&cupor;' /* UNION WITH LOGICAL OR */,
  [String.fromCodePoint(10822)]: '&cupcap;' /* UNION ABOVE INTERSECTION */,
  [String.fromCodePoint(10823)]: '&capcup;' /* INTERSECTION ABOVE UNION */,
  [String.fromCodePoint(10824)]: '&cupbrcap;' /* UNION ABOVE BAR ABOVE INTERSECTION */,
  [String.fromCodePoint(10825)]: '&capbrcup;' /* INTERSECTION ABOVE BAR ABOVE UNION */,
  [String.fromCodePoint(10826)]: '&cupcup;' /* UNION BESIDE AND JOINED WITH UNION */,
  [String.fromCodePoint(10827)]: '&capcap;' /* INTERSECTION BESIDE AND JOINED WITH INTERSECTION */,
  [String.fromCodePoint(10828)]: '&ccups;' /* CLOSED UNION WITH SERIFS */,
  [String.fromCodePoint(10829)]: '&ccaps;' /* CLOSED INTERSECTION WITH SERIFS */,
  [String.fromCodePoint(10832)]: '&ccupssm;' /* CLOSED UNION WITH SERIFS AND SMASH PRODUCT */,
  [String.fromCodePoint(10835)]: '&And;' /* DOUBLE LOGICAL AND */,
  [String.fromCodePoint(10836)]: '&Or;' /* DOUBLE LOGICAL OR */,
  [String.fromCodePoint(10837)]: '&andand;' /* TWO INTERSECTING LOGICAL AND */,
  [String.fromCodePoint(10838)]: '&oror;' /* TWO INTERSECTING LOGICAL OR */,
  [String.fromCodePoint(10839)]: '&orslope;' /* SLOPING LARGE OR */,
  [String.fromCodePoint(10840)]: '&andslope;' /* SLOPING LARGE AND */,
  [String.fromCodePoint(10842)]: '&andv;' /* LOGICAL AND WITH MIDDLE STEM */,
  [String.fromCodePoint(10843)]: '&orv;' /* LOGICAL OR WITH MIDDLE STEM */,
  [String.fromCodePoint(10844)]: '&andd;' /* LOGICAL AND WITH HORIZONTAL DASH */,
  [String.fromCodePoint(10845)]: '&ord;' /* LOGICAL OR WITH HORIZONTAL DASH */,
  [String.fromCodePoint(10847)]: '&wedbar;' /* LOGICAL AND WITH UNDERBAR */,
  [String.fromCodePoint(10854)]: '&sdote;' /* EQUALS SIGN WITH DOT BELOW */,
  [String.fromCodePoint(10858)]: '&simdot;' /* TILDE OPERATOR WITH DOT ABOVE */,
  [String.fromCodePoint(10861)]: '&congdot;' /* CONGRUENT WITH DOT ABOVE */,
  [String.fromCodePoint(10862)]: '&easter;' /* EQUALS WITH ASTERISK */,
  [String.fromCodePoint(10863)]: '&apacir;' /* ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT */,
  [String.fromCodePoint(10864)]: '&apE;' /* APPROXIMATELY EQUAL OR EQUAL TO */,
  [String.fromCodePoint(10865)]: '&eplus;' /* EQUALS SIGN ABOVE PLUS SIGN */,
  [String.fromCodePoint(10866)]: '&pluse;' /* PLUS SIGN ABOVE EQUALS SIGN */,
  [String.fromCodePoint(10867)]: '&Esim;' /* EQUALS SIGN ABOVE TILDE OPERATOR */,
  [String.fromCodePoint(10868)]: '&Colone;' /* DOUBLE COLON EQUAL */,
  [String.fromCodePoint(10869)]: '&Equal;' /* TWO CONSECUTIVE EQUALS SIGNS */,
  [String.fromCodePoint(10871)]: '&ddotseq;' /* EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW */,
  [String.fromCodePoint(10872)]: '&equivDD;' /* EQUIVALENT WITH FOUR DOTS ABOVE */,
  [String.fromCodePoint(10873)]: '&ltcir;' /* LESS-THAN WITH CIRCLE INSIDE */,
  [String.fromCodePoint(10874)]: '&gtcir;' /* GREATER-THAN WITH CIRCLE INSIDE */,
  [String.fromCodePoint(10875)]: '&ltquest;' /* LESS-THAN WITH QUESTION MARK ABOVE */,
  [String.fromCodePoint(10876)]: '&gtquest;' /* GREATER-THAN WITH QUESTION MARK ABOVE */,
  [String.fromCodePoint(10877)]: '&leqslant;' /* LESS-THAN OR SLANTED EQUAL TO */,
  [String.fromCodePoint(10878)]: '&geqslant;' /* GREATER-THAN OR SLANTED EQUAL TO */,
  [String.fromCodePoint(10879)]: '&lesdot;' /* LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE */,
  [String.fromCodePoint(10880)]: '&gesdot;' /* GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE */,
  [String.fromCodePoint(10881)]: '&lesdoto;' /* LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE */,
  [String.fromCodePoint(10882)]: '&gesdoto;' /* GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE */,
  [String.fromCodePoint(10883)]: '&lesdotor;' /* LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT */,
  [String.fromCodePoint(10884)]: '&gesdotol;' /* GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT */,
  [String.fromCodePoint(10885)]: '&lessapprox;' /* LESS-THAN OR APPROXIMATE */,
  [String.fromCodePoint(10886)]: '&gtrapprox;' /* GREATER-THAN OR APPROXIMATE */,
  [String.fromCodePoint(10887)]: '&lneq;' /* LESS-THAN AND SINGLE-LINE NOT EQUAL TO */,
  [String.fromCodePoint(10888)]: '&gneq;' /* GREATER-THAN AND SINGLE-LINE NOT EQUAL TO */,
  [String.fromCodePoint(10889)]: '&lnapprox;' /* LESS-THAN AND NOT APPROXIMATE */,
  [String.fromCodePoint(10890)]: '&gnapprox;' /* GREATER-THAN AND NOT APPROXIMATE */,
  [String.fromCodePoint(10891)]: '&lesseqqgtr;' /* LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN */,
  [String.fromCodePoint(10892)]: '&gtreqqless;' /* GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN */,
  [String.fromCodePoint(10893)]: '&lsime;' /* LESS-THAN ABOVE SIMILAR OR EQUAL */,
  [String.fromCodePoint(10894)]: '&gsime;' /* GREATER-THAN ABOVE SIMILAR OR EQUAL */,
  [String.fromCodePoint(10895)]: '&lsimg;' /* LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN */,
  [String.fromCodePoint(10896)]: '&gsiml;' /* GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN */,
  [String.fromCodePoint(10897)]: '&lgE;' /* LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL */,
  [String.fromCodePoint(10898)]: '&glE;' /* GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL */,
  [String.fromCodePoint(10899)]: '&lesges;' /* LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL */,
  [String.fromCodePoint(10900)]: '&gesles;' /* GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL */,
  [String.fromCodePoint(10901)]: '&eqslantless;' /* SLANTED EQUAL TO OR LESS-THAN */,
  [String.fromCodePoint(10902)]: '&eqslantgtr;' /* SLANTED EQUAL TO OR GREATER-THAN */,
  [String.fromCodePoint(10903)]: '&elsdot;' /* SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE */,
  [String.fromCodePoint(10904)]: '&egsdot;' /* SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE */,
  [String.fromCodePoint(10905)]: '&el;' /* DOUBLE-LINE EQUAL TO OR LESS-THAN */,
  [String.fromCodePoint(10906)]: '&eg;' /* DOUBLE-LINE EQUAL TO OR GREATER-THAN */,
  [String.fromCodePoint(10909)]: '&siml;' /* SIMILAR OR LESS-THAN */,
  [String.fromCodePoint(10910)]: '&simg;' /* SIMILAR OR GREATER-THAN */,
  [String.fromCodePoint(10911)]: '&simlE;' /* SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN */,
  [String.fromCodePoint(10912)]: '&simgE;' /* SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN */,
  [String.fromCodePoint(10913)]: '&LessLess;' /* DOUBLE NESTED LESS-THAN */,
  [String.fromCodePoint(10914)]: '&GreaterGreater;' /* DOUBLE NESTED GREATER-THAN */,
  [String.fromCodePoint(10916)]: '&glj;' /* GREATER-THAN OVERLAPPING LESS-THAN */,
  [String.fromCodePoint(10917)]: '&gla;' /* GREATER-THAN BESIDE LESS-THAN */,
  [String.fromCodePoint(10918)]: '&ltcc;' /* LESS-THAN CLOSED BY CURVE */,
  [String.fromCodePoint(10919)]: '&gtcc;' /* GREATER-THAN CLOSED BY CURVE */,
  [String.fromCodePoint(10920)]: '&lescc;' /* LESS-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL */,
  [String.fromCodePoint(10921)]: '&gescc;' /* GREATER-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL */,
  [String.fromCodePoint(10922)]: '&smt;' /* SMALLER THAN */,
  [String.fromCodePoint(10923)]: '&lat;' /* LARGER THAN */,
  [String.fromCodePoint(10924)]: '&smte;' /* SMALLER THAN OR EQUAL TO */,
  [String.fromCodePoint(10925)]: '&late;' /* LARGER THAN OR EQUAL TO */,
  [String.fromCodePoint(10926)]: '&bumpE;' /* EQUALS SIGN WITH BUMPY ABOVE */,
  [String.fromCodePoint(10927)]: '&PrecedesEqual;' /* PRECEDES ABOVE SINGLE-LINE EQUALS SIGN */,
  [String.fromCodePoint(10928)]: '&SucceedsEqual;' /* SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN */,
  [String.fromCodePoint(10931)]: '&prE;' /* PRECEDES ABOVE EQUALS SIGN */,
  [String.fromCodePoint(10932)]: '&scE;' /* SUCCEEDS ABOVE EQUALS SIGN */,
  [String.fromCodePoint(10933)]: '&precneqq;' /* PRECEDES ABOVE NOT EQUAL TO */,
  [String.fromCodePoint(10934)]: '&succneqq;' /* SUCCEEDS ABOVE NOT EQUAL TO */,
  [String.fromCodePoint(10935)]: '&precapprox;' /* PRECEDES ABOVE ALMOST EQUAL TO */,
  [String.fromCodePoint(10936)]: '&succapprox;' /* SUCCEEDS ABOVE ALMOST EQUAL TO */,
  [String.fromCodePoint(10937)]: '&precnapprox;' /* PRECEDES ABOVE NOT ALMOST EQUAL TO */,
  [String.fromCodePoint(10938)]: '&succnapprox;' /* SUCCEEDS ABOVE NOT ALMOST EQUAL TO */,
  [String.fromCodePoint(10939)]: '&Pr;' /* DOUBLE PRECEDES */,
  [String.fromCodePoint(10940)]: '&Sc;' /* DOUBLE SUCCEEDS */,
  [String.fromCodePoint(10941)]: '&subdot;' /* SUBSET WITH DOT */,
  [String.fromCodePoint(10942)]: '&supdot;' /* SUPERSET WITH DOT */,
  [String.fromCodePoint(10943)]: '&subplus;' /* SUBSET WITH PLUS SIGN BELOW */,
  [String.fromCodePoint(10944)]: '&supplus;' /* SUPERSET WITH PLUS SIGN BELOW */,
  [String.fromCodePoint(10945)]: '&submult;' /* SUBSET WITH MULTIPLICATION SIGN BELOW */,
  [String.fromCodePoint(10946)]: '&supmult;' /* SUPERSET WITH MULTIPLICATION SIGN BELOW */,
  [String.fromCodePoint(10947)]: '&subedot;' /* SUBSET OF OR EQUAL TO WITH DOT ABOVE */,
  [String.fromCodePoint(10948)]: '&supedot;' /* SUPERSET OF OR EQUAL TO WITH DOT ABOVE */,
  [String.fromCodePoint(10949)]: '&subseteqq;' /* SUBSET OF ABOVE EQUALS SIGN */,
  [String.fromCodePoint(10950)]: '&supseteqq;' /* SUPERSET OF ABOVE EQUALS SIGN */,
  [String.fromCodePoint(10951)]: '&subsim;' /* SUBSET OF ABOVE TILDE OPERATOR */,
  [String.fromCodePoint(10952)]: '&supsim;' /* SUPERSET OF ABOVE TILDE OPERATOR */,
  [String.fromCodePoint(10955)]: '&subsetneqq;' /* SUBSET OF ABOVE NOT EQUAL TO */,
  [String.fromCodePoint(10956)]: '&supsetneqq;' /* SUPERSET OF ABOVE NOT EQUAL TO */,
  [String.fromCodePoint(10959)]: '&csub;' /* CLOSED SUBSET */,
  [String.fromCodePoint(10960)]: '&csup;' /* CLOSED SUPERSET */,
  [String.fromCodePoint(10961)]: '&csube;' /* CLOSED SUBSET OR EQUAL TO */,
  [String.fromCodePoint(10962)]: '&csupe;' /* CLOSED SUPERSET OR EQUAL TO */,
  [String.fromCodePoint(10963)]: '&subsup;' /* SUBSET ABOVE SUPERSET */,
  [String.fromCodePoint(10964)]: '&supsub;' /* SUPERSET ABOVE SUBSET */,
  [String.fromCodePoint(10965)]: '&subsub;' /* SUBSET ABOVE SUBSET */,
  [String.fromCodePoint(10966)]: '&supsup;' /* SUPERSET ABOVE SUPERSET */,
  [String.fromCodePoint(10967)]: '&suphsub;' /* SUPERSET BESIDE SUBSET */,
  [String.fromCodePoint(10968)]: '&supdsub;' /* SUPERSET BESIDE AND JOINED BY DASH WITH SUBSET */,
  [String.fromCodePoint(10969)]: '&forkv;' /* ELEMENT OF OPENING DOWNWARDS */,
  [String.fromCodePoint(10970)]: '&topfork;' /* PITCHFORK WITH TEE TOP */,
  [String.fromCodePoint(10971)]: '&mlcp;' /* TRANSVERSAL INTERSECTION */,
  [String.fromCodePoint(10980)]: '&DoubleLeftTee;' /* VERTICAL BAR DOUBLE LEFT TURNSTILE */,
  [String.fromCodePoint(10982)]: '&Vdashl;' /* LONG DASH FROM LEFT MEMBER OF DOUBLE VERTICAL */,
  [String.fromCodePoint(10983)]: '&Barv;' /* SHORT DOWN TACK WITH OVERBAR */,
  [String.fromCodePoint(10984)]: '&vBar;' /* SHORT UP TACK WITH UNDERBAR */,
  [String.fromCodePoint(10985)]: '&vBarv;' /* SHORT UP TACK ABOVE SHORT DOWN TACK */,
  [String.fromCodePoint(10987)]: '&Vbar;' /* DOUBLE UP TACK */,
  [String.fromCodePoint(10988)]: '&Not;' /* DOUBLE STROKE NOT SIGN */,
  [String.fromCodePoint(10989)]: '&bNot;' /* REVERSED DOUBLE STROKE NOT SIGN */,
  [String.fromCodePoint(10990)]: '&rnmid;' /* DOES NOT DIVIDE WITH REVERSED NEGATION SLASH */,
  [String.fromCodePoint(10991)]: '&cirmid;' /* VERTICAL LINE WITH CIRCLE ABOVE */,
  [String.fromCodePoint(10992)]: '&midcir;' /* VERTICAL LINE WITH CIRCLE BELOW */,
  [String.fromCodePoint(10993)]: '&topcir;' /* DOWN TACK WITH CIRCLE BELOW */,
  [String.fromCodePoint(10994)]: '&nhpar;' /* PARALLEL WITH HORIZONTAL STROKE */,
  [String.fromCodePoint(10995)]: '&parsim;' /* PARALLEL WITH TILDE OPERATOR */,
  [String.fromCodePoint(11005)]: '&parsl;' /* DOUBLE SOLIDUS OPERATOR */,
  [String.fromCodePoint(64256)]: '&fflig;' /* LATIN SMALL LIGATURE FF */,
  [String.fromCodePoint(64257)]: '&filig;' /* LATIN SMALL LIGATURE FI */,
  [String.fromCodePoint(64258)]: '&fllig;' /* LATIN SMALL LIGATURE FL */,
  [String.fromCodePoint(64259)]: '&ffilig;' /* LATIN SMALL LIGATURE FFI */,
  [String.fromCodePoint(64260)]: '&ffllig;' /* LATIN SMALL LIGATURE FFL */,
  [String.fromCodePoint(119964)]: '&Ascr;' /* MATHEMATICAL SCRIPT CAPITAL A */,
  [String.fromCodePoint(119966)]: '&Cscr;' /* MATHEMATICAL SCRIPT CAPITAL C */,
  [String.fromCodePoint(119967)]: '&Dscr;' /* MATHEMATICAL SCRIPT CAPITAL D */,
  [String.fromCodePoint(119970)]: '&Gscr;' /* MATHEMATICAL SCRIPT CAPITAL G */,
  [String.fromCodePoint(119973)]: '&Jscr;' /* MATHEMATICAL SCRIPT CAPITAL J */,
  [String.fromCodePoint(119974)]: '&Kscr;' /* MATHEMATICAL SCRIPT CAPITAL K */,
  [String.fromCodePoint(119977)]: '&Nscr;' /* MATHEMATICAL SCRIPT CAPITAL N */,
  [String.fromCodePoint(119978)]: '&Oscr;' /* MATHEMATICAL SCRIPT CAPITAL O */,
  [String.fromCodePoint(119979)]: '&Pscr;' /* MATHEMATICAL SCRIPT CAPITAL P */,
  [String.fromCodePoint(119980)]: '&Qscr;' /* MATHEMATICAL SCRIPT CAPITAL Q */,
  [String.fromCodePoint(119982)]: '&Sscr;' /* MATHEMATICAL SCRIPT CAPITAL S */,
  [String.fromCodePoint(119983)]: '&Tscr;' /* MATHEMATICAL SCRIPT CAPITAL T */,
  [String.fromCodePoint(119984)]: '&Uscr;' /* MATHEMATICAL SCRIPT CAPITAL U */,
  [String.fromCodePoint(119985)]: '&Vscr;' /* MATHEMATICAL SCRIPT CAPITAL V */,
  [String.fromCodePoint(119986)]: '&Wscr;' /* MATHEMATICAL SCRIPT CAPITAL W */,
  [String.fromCodePoint(119987)]: '&Xscr;' /* MATHEMATICAL SCRIPT CAPITAL X */,
  [String.fromCodePoint(119988)]: '&Yscr;' /* MATHEMATICAL SCRIPT CAPITAL Y */,
  [String.fromCodePoint(119989)]: '&Zscr;' /* MATHEMATICAL SCRIPT CAPITAL Z */,
  [String.fromCodePoint(119990)]: '&ascr;' /* MATHEMATICAL SCRIPT SMALL A */,
  [String.fromCodePoint(119991)]: '&bscr;' /* MATHEMATICAL SCRIPT SMALL B */,
  [String.fromCodePoint(119992)]: '&cscr;' /* MATHEMATICAL SCRIPT SMALL C */,
  [String.fromCodePoint(119993)]: '&dscr;' /* MATHEMATICAL SCRIPT SMALL D */,
  [String.fromCodePoint(119995)]: '&fscr;' /* MATHEMATICAL SCRIPT SMALL F */,
  [String.fromCodePoint(119997)]: '&hscr;' /* MATHEMATICAL SCRIPT SMALL H */,
  [String.fromCodePoint(119998)]: '&iscr;' /* MATHEMATICAL SCRIPT SMALL I */,
  [String.fromCodePoint(119999)]: '&jscr;' /* MATHEMATICAL SCRIPT SMALL J */,
  [String.fromCodePoint(120000)]: '&kscr;' /* MATHEMATICAL SCRIPT SMALL K */,
  [String.fromCodePoint(120001)]: '&lscr;' /* MATHEMATICAL SCRIPT SMALL L */,
  [String.fromCodePoint(120002)]: '&mscr;' /* MATHEMATICAL SCRIPT SMALL M */,
  [String.fromCodePoint(120003)]: '&nscr;' /* MATHEMATICAL SCRIPT SMALL N */,
  [String.fromCodePoint(120005)]: '&pscr;' /* MATHEMATICAL SCRIPT SMALL P */,
  [String.fromCodePoint(120006)]: '&qscr;' /* MATHEMATICAL SCRIPT SMALL Q */,
  [String.fromCodePoint(120007)]: '&rscr;' /* MATHEMATICAL SCRIPT SMALL R */,
  [String.fromCodePoint(120008)]: '&sscr;' /* MATHEMATICAL SCRIPT SMALL S */,
  [String.fromCodePoint(120009)]: '&tscr;' /* MATHEMATICAL SCRIPT SMALL T */,
  [String.fromCodePoint(120010)]: '&uscr;' /* MATHEMATICAL SCRIPT SMALL U */,
  [String.fromCodePoint(120011)]: '&vscr;' /* MATHEMATICAL SCRIPT SMALL V */,
  [String.fromCodePoint(120012)]: '&wscr;' /* MATHEMATICAL SCRIPT SMALL W */,
  [String.fromCodePoint(120013)]: '&xscr;' /* MATHEMATICAL SCRIPT SMALL X */,
  [String.fromCodePoint(120014)]: '&yscr;' /* MATHEMATICAL SCRIPT SMALL Y */,
  [String.fromCodePoint(120015)]: '&zscr;' /* MATHEMATICAL SCRIPT SMALL Z */,
  [String.fromCodePoint(120068)]: '&Afr;' /* MATHEMATICAL FRAKTUR CAPITAL A */,
  [String.fromCodePoint(120069)]: '&Bfr;' /* MATHEMATICAL FRAKTUR CAPITAL B */,
  [String.fromCodePoint(120071)]: '&Dfr;' /* MATHEMATICAL FRAKTUR CAPITAL D */,
  [String.fromCodePoint(120072)]: '&Efr;' /* MATHEMATICAL FRAKTUR CAPITAL E */,
  [String.fromCodePoint(120073)]: '&Ffr;' /* MATHEMATICAL FRAKTUR CAPITAL F */,
  [String.fromCodePoint(120074)]: '&Gfr;' /* MATHEMATICAL FRAKTUR CAPITAL G */,
  [String.fromCodePoint(120077)]: '&Jfr;' /* MATHEMATICAL FRAKTUR CAPITAL J */,
  [String.fromCodePoint(120078)]: '&Kfr;' /* MATHEMATICAL FRAKTUR CAPITAL K */,
  [String.fromCodePoint(120079)]: '&Lfr;' /* MATHEMATICAL FRAKTUR CAPITAL L */,
  [String.fromCodePoint(120080)]: '&Mfr;' /* MATHEMATICAL FRAKTUR CAPITAL M */,
  [String.fromCodePoint(120081)]: '&Nfr;' /* MATHEMATICAL FRAKTUR CAPITAL N */,
  [String.fromCodePoint(120082)]: '&Ofr;' /* MATHEMATICAL FRAKTUR CAPITAL O */,
  [String.fromCodePoint(120083)]: '&Pfr;' /* MATHEMATICAL FRAKTUR CAPITAL P */,
  [String.fromCodePoint(120084)]: '&Qfr;' /* MATHEMATICAL FRAKTUR CAPITAL Q */,
  [String.fromCodePoint(120086)]: '&Sfr;' /* MATHEMATICAL FRAKTUR CAPITAL S */,
  [String.fromCodePoint(120087)]: '&Tfr;' /* MATHEMATICAL FRAKTUR CAPITAL T */,
  [String.fromCodePoint(120088)]: '&Ufr;' /* MATHEMATICAL FRAKTUR CAPITAL U */,
  [String.fromCodePoint(120089)]: '&Vfr;' /* MATHEMATICAL FRAKTUR CAPITAL V */,
  [String.fromCodePoint(120090)]: '&Wfr;' /* MATHEMATICAL FRAKTUR CAPITAL W */,
  [String.fromCodePoint(120091)]: '&Xfr;' /* MATHEMATICAL FRAKTUR CAPITAL X */,
  [String.fromCodePoint(120092)]: '&Yfr;' /* MATHEMATICAL FRAKTUR CAPITAL Y */,
  [String.fromCodePoint(120094)]: '&afr;' /* MATHEMATICAL FRAKTUR SMALL A */,
  [String.fromCodePoint(120095)]: '&bfr;' /* MATHEMATICAL FRAKTUR SMALL B */,
  [String.fromCodePoint(120096)]: '&cfr;' /* MATHEMATICAL FRAKTUR SMALL C */,
  [String.fromCodePoint(120097)]: '&dfr;' /* MATHEMATICAL FRAKTUR SMALL D */,
  [String.fromCodePoint(120098)]: '&efr;' /* MATHEMATICAL FRAKTUR SMALL E */,
  [String.fromCodePoint(120099)]: '&ffr;' /* MATHEMATICAL FRAKTUR SMALL F */,
  [String.fromCodePoint(120100)]: '&gfr;' /* MATHEMATICAL FRAKTUR SMALL G */,
  [String.fromCodePoint(120101)]: '&hfr;' /* MATHEMATICAL FRAKTUR SMALL H */,
  [String.fromCodePoint(120102)]: '&ifr;' /* MATHEMATICAL FRAKTUR SMALL I */,
  [String.fromCodePoint(120103)]: '&jfr;' /* MATHEMATICAL FRAKTUR SMALL J */,
  [String.fromCodePoint(120104)]: '&kfr;' /* MATHEMATICAL FRAKTUR SMALL K */,
  [String.fromCodePoint(120105)]: '&lfr;' /* MATHEMATICAL FRAKTUR SMALL L */,
  [String.fromCodePoint(120106)]: '&mfr;' /* MATHEMATICAL FRAKTUR SMALL M */,
  [String.fromCodePoint(120107)]: '&nfr;' /* MATHEMATICAL FRAKTUR SMALL N */,
  [String.fromCodePoint(120108)]: '&ofr;' /* MATHEMATICAL FRAKTUR SMALL O */,
  [String.fromCodePoint(120109)]: '&pfr;' /* MATHEMATICAL FRAKTUR SMALL P */,
  [String.fromCodePoint(120110)]: '&qfr;' /* MATHEMATICAL FRAKTUR SMALL Q */,
  [String.fromCodePoint(120111)]: '&rfr;' /* MATHEMATICAL FRAKTUR SMALL R */,
  [String.fromCodePoint(120112)]: '&sfr;' /* MATHEMATICAL FRAKTUR SMALL S */,
  [String.fromCodePoint(120113)]: '&tfr;' /* MATHEMATICAL FRAKTUR SMALL T */,
  [String.fromCodePoint(120114)]: '&ufr;' /* MATHEMATICAL FRAKTUR SMALL U */,
  [String.fromCodePoint(120115)]: '&vfr;' /* MATHEMATICAL FRAKTUR SMALL V */,
  [String.fromCodePoint(120116)]: '&wfr;' /* MATHEMATICAL FRAKTUR SMALL W */,
  [String.fromCodePoint(120117)]: '&xfr;' /* MATHEMATICAL FRAKTUR SMALL X */,
  [String.fromCodePoint(120118)]: '&yfr;' /* MATHEMATICAL FRAKTUR SMALL Y */,
  [String.fromCodePoint(120119)]: '&zfr;' /* MATHEMATICAL FRAKTUR SMALL Z */,
  [String.fromCodePoint(120120)]: '&Aopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL A */,
  [String.fromCodePoint(120121)]: '&Bopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL B */,
  [String.fromCodePoint(120123)]: '&Dopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL D */,
  [String.fromCodePoint(120124)]: '&Eopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL E */,
  [String.fromCodePoint(120125)]: '&Fopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL F */,
  [String.fromCodePoint(120126)]: '&Gopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL G */,
  [String.fromCodePoint(120128)]: '&Iopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL I */,
  [String.fromCodePoint(120129)]: '&Jopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL J */,
  [String.fromCodePoint(120130)]: '&Kopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL K */,
  [String.fromCodePoint(120131)]: '&Lopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL L */,
  [String.fromCodePoint(120132)]: '&Mopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL M */,
  [String.fromCodePoint(120134)]: '&Oopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL O */,
  [String.fromCodePoint(120138)]: '&Sopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL S */,
  [String.fromCodePoint(120139)]: '&Topf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL T */,
  [String.fromCodePoint(120140)]: '&Uopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL U */,
  [String.fromCodePoint(120141)]: '&Vopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL V */,
  [String.fromCodePoint(120142)]: '&Wopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL W */,
  [String.fromCodePoint(120143)]: '&Xopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL X */,
  [String.fromCodePoint(120144)]: '&Yopf;' /* MATHEMATICAL DOUBLE-STRUCK CAPITAL Y */,
  [String.fromCodePoint(120146)]: '&aopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL A */,
  [String.fromCodePoint(120147)]: '&bopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL B */,
  [String.fromCodePoint(120148)]: '&copf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL C */,
  [String.fromCodePoint(120149)]: '&dopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL D */,
  [String.fromCodePoint(120150)]: '&eopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL E */,
  [String.fromCodePoint(120151)]: '&fopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL F */,
  [String.fromCodePoint(120152)]: '&gopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL G */,
  [String.fromCodePoint(120153)]: '&hopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL H */,
  [String.fromCodePoint(120154)]: '&iopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL I */,
  [String.fromCodePoint(120155)]: '&jopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL J */,
  [String.fromCodePoint(120156)]: '&kopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL K */,
  [String.fromCodePoint(120157)]: '&lopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL L */,
  [String.fromCodePoint(120158)]: '&mopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL M */,
  [String.fromCodePoint(120159)]: '&nopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL N */,
  [String.fromCodePoint(120160)]: '&oopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL O */,
  [String.fromCodePoint(120161)]: '&popf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL P */,
  [String.fromCodePoint(120162)]: '&qopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL Q */,
  [String.fromCodePoint(120163)]: '&ropf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL R */,
  [String.fromCodePoint(120164)]: '&sopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL S */,
  [String.fromCodePoint(120165)]: '&topf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL T */,
  [String.fromCodePoint(120166)]: '&uopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL U */,
  [String.fromCodePoint(120167)]: '&vopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL V */,
  [String.fromCodePoint(120168)]: '&wopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL W */,
  [String.fromCodePoint(120169)]: '&xopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL X */,
  [String.fromCodePoint(120170)]: '&yopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL Y */,
  [String.fromCodePoint(120171)]: '&zopf;' /* MATHEMATICAL DOUBLE-STRUCK SMALL Z */
}
