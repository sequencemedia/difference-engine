/*
 *  https://dev.w3.org/html5/html-author/charref
 *
 *  August 18th 2021, 5:02:39
 */

export default {
  '&Tab;': String.fromCodePoint(9) /* CHARACTER TABULATION */,
  '&NewLine;': String.fromCodePoint(10) /* LINE FEED (LF) */,
  '&excl;': String.fromCodePoint(33) /* EXCLAMATION MARK */,
  '&QUOT;': String.fromCodePoint(34) /* QUOTATION MARK */,
  '&num;': String.fromCodePoint(35) /* NUMBER SIGN */,
  '&dollar;': String.fromCodePoint(36) /* DOLLAR SIGN */,
  '&percnt;': String.fromCodePoint(37) /* PERCENT SIGN */,
  '&AMP;': String.fromCodePoint(38) /* AMPERSAND */,
  '&apos;': String.fromCodePoint(39) /* APOSTROPHE */,
  '&lpar;': String.fromCodePoint(40) /* LEFT PARENTHESIS */,
  '&rpar;': String.fromCodePoint(41) /* RIGHT PARENTHESIS */,
  '&midast;': String.fromCodePoint(42) /* ASTERISK */,
  '&plus;': String.fromCodePoint(43) /* PLUS SIGN */,
  '&comma;': String.fromCodePoint(44) /* COMMA */,
  '&period;': String.fromCodePoint(46) /* FULL STOP */,
  '&sol;': String.fromCodePoint(47) /* SOLIDUS */,
  '&colon;': String.fromCodePoint(58) /* COLON */,
  '&semi;': String.fromCodePoint(59) /* SEMICOLON */,
  '&LT;': String.fromCodePoint(60) /* LESS-THAN SIGN */,
  '&equals;': String.fromCodePoint(61) /* EQUALS SIGN */,
  '&GT;': String.fromCodePoint(62) /* GREATER-THAN SIGN */,
  '&quest;': String.fromCodePoint(63) /* QUESTION MARK */,
  '&commat;': String.fromCodePoint(64) /* COMMERCIAL AT */,
  '&lbrack;': String.fromCodePoint(91) /* LEFT SQUARE BRACKET */,
  '&bsol;': String.fromCodePoint(92) /* REVERSE SOLIDUS */,
  '&rbrack;': String.fromCodePoint(93) /* RIGHT SQUARE BRACKET */,
  '&Hat;': String.fromCodePoint(94) /* CIRCUMFLEX ACCENT */,
  '&lowbar;': String.fromCodePoint(95) /* LOW LINE */,
  '&DiacriticalGrave;': String.fromCodePoint(96) /* GRAVE ACCENT */,
  '&lbrace;': String.fromCodePoint(123) /* LEFT CURLY BRACKET */,
  '&VerticalLine;': String.fromCodePoint(124) /* VERTICAL LINE */,
  '&rbrace;': String.fromCodePoint(125) /* RIGHT CURLY BRACKET */,
  '&NonBreakingSpace;': String.fromCodePoint(160) /* NO-BREAK SPACE */,
  '&iexcl;': String.fromCodePoint(161) /* INVERTED EXCLAMATION MARK */,
  '&cent;': String.fromCodePoint(162) /* CENT SIGN */,
  '&pound;': String.fromCodePoint(163) /* POUND SIGN */,
  '&curren;': String.fromCodePoint(164) /* CURRENCY SIGN */,
  '&yen;': String.fromCodePoint(165) /* YEN SIGN */,
  '&brvbar;': String.fromCodePoint(166) /* BROKEN BAR */,
  '&sect;': String.fromCodePoint(167) /* SECTION SIGN */,
  '&uml;': String.fromCodePoint(168) /* DIAERESIS */,
  '&COPY;': String.fromCodePoint(169) /* COPYRIGHT SIGN */,
  '&ordf;': String.fromCodePoint(170) /* FEMININE ORDINAL INDICATOR */,
  '&laquo;': String.fromCodePoint(171) /* LEFT-POINTING DOUBLE ANGLE QUOTATION MARK */,
  '&not;': String.fromCodePoint(172) /* NOT SIGN */,
  '&shy;': String.fromCodePoint(173) /* SOFT HYPHEN */,
  '&REG;': String.fromCodePoint(174) /* REGISTERED SIGN */,
  '&strns;': String.fromCodePoint(175) /* MACRON */,
  '&deg;': String.fromCodePoint(176) /* DEGREE SIGN */,
  '&PlusMinus;': String.fromCodePoint(177) /* PLUS-MINUS SIGN */,
  '&sup2;': String.fromCodePoint(178) /* SUPERSCRIPT TWO */,
  '&sup3;': String.fromCodePoint(179) /* SUPERSCRIPT THREE */,
  '&DiacriticalAcute;': String.fromCodePoint(180) /* ACUTE ACCENT */,
  '&micro;': String.fromCodePoint(181) /* MICRO SIGN */,
  '&para;': String.fromCodePoint(182) /* PILCROW SIGN */,
  '&CenterDot;': String.fromCodePoint(183) /* MIDDLE DOT */,
  '&Cedilla;': String.fromCodePoint(184) /* CEDILLA */,
  '&sup1;': String.fromCodePoint(185) /* SUPERSCRIPT ONE */,
  '&ordm;': String.fromCodePoint(186) /* MASCULINE ORDINAL INDICATOR */,
  '&raquo;': String.fromCodePoint(187) /* RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK */,
  '&frac14;': String.fromCodePoint(188) /* VULGAR FRACTION ONE QUARTER */,
  '&half;': String.fromCodePoint(189) /* VULGAR FRACTION ONE HALF */,
  '&frac34;': String.fromCodePoint(190) /* VULGAR FRACTION THREE QUARTERS */,
  '&iquest;': String.fromCodePoint(191) /* INVERTED QUESTION MARK */,
  '&Agrave;': String.fromCodePoint(192) /* LATIN CAPITAL LETTER A WITH GRAVE */,
  '&Aacute;': String.fromCodePoint(193) /* LATIN CAPITAL LETTER A WITH ACUTE */,
  '&Acirc;': String.fromCodePoint(194) /* LATIN CAPITAL LETTER A WITH CIRCUMFLEX */,
  '&Atilde;': String.fromCodePoint(195) /* LATIN CAPITAL LETTER A WITH TILDE */,
  '&Auml;': String.fromCodePoint(196) /* LATIN CAPITAL LETTER A WITH DIAERESIS */,
  '&Aring;': String.fromCodePoint(197) /* LATIN CAPITAL LETTER A WITH RING ABOVE */,
  '&AElig;': String.fromCodePoint(198) /* LATIN CAPITAL LETTER AE */,
  '&Ccedil;': String.fromCodePoint(199) /* LATIN CAPITAL LETTER C WITH CEDILLA */,
  '&Egrave;': String.fromCodePoint(200) /* LATIN CAPITAL LETTER E WITH GRAVE */,
  '&Eacute;': String.fromCodePoint(201) /* LATIN CAPITAL LETTER E WITH ACUTE */,
  '&Ecirc;': String.fromCodePoint(202) /* LATIN CAPITAL LETTER E WITH CIRCUMFLEX */,
  '&Euml;': String.fromCodePoint(203) /* LATIN CAPITAL LETTER E WITH DIAERESIS */,
  '&Igrave;': String.fromCodePoint(204) /* LATIN CAPITAL LETTER I WITH GRAVE */,
  '&Iacute;': String.fromCodePoint(205) /* LATIN CAPITAL LETTER I WITH ACUTE */,
  '&Icirc;': String.fromCodePoint(206) /* LATIN CAPITAL LETTER I WITH CIRCUMFLEX */,
  '&Iuml;': String.fromCodePoint(207) /* LATIN CAPITAL LETTER I WITH DIAERESIS */,
  '&ETH;': String.fromCodePoint(208) /* LATIN CAPITAL LETTER ETH */,
  '&Ntilde;': String.fromCodePoint(209) /* LATIN CAPITAL LETTER N WITH TILDE */,
  '&Ograve;': String.fromCodePoint(210) /* LATIN CAPITAL LETTER O WITH GRAVE */,
  '&Oacute;': String.fromCodePoint(211) /* LATIN CAPITAL LETTER O WITH ACUTE */,
  '&Ocirc;': String.fromCodePoint(212) /* LATIN CAPITAL LETTER O WITH CIRCUMFLEX */,
  '&Otilde;': String.fromCodePoint(213) /* LATIN CAPITAL LETTER O WITH TILDE */,
  '&Ouml;': String.fromCodePoint(214) /* LATIN CAPITAL LETTER O WITH DIAERESIS */,
  '&times;': String.fromCodePoint(215) /* MULTIPLICATION SIGN */,
  '&Oslash;': String.fromCodePoint(216) /* LATIN CAPITAL LETTER O WITH STROKE */,
  '&Ugrave;': String.fromCodePoint(217) /* LATIN CAPITAL LETTER U WITH GRAVE */,
  '&Uacute;': String.fromCodePoint(218) /* LATIN CAPITAL LETTER U WITH ACUTE */,
  '&Ucirc;': String.fromCodePoint(219) /* LATIN CAPITAL LETTER U WITH CIRCUMFLEX */,
  '&Uuml;': String.fromCodePoint(220) /* LATIN CAPITAL LETTER U WITH DIAERESIS */,
  '&Yacute;': String.fromCodePoint(221) /* LATIN CAPITAL LETTER Y WITH ACUTE */,
  '&THORN;': String.fromCodePoint(222) /* LATIN CAPITAL LETTER THORN */,
  '&szlig;': String.fromCodePoint(223) /* LATIN SMALL LETTER SHARP S */,
  '&agrave;': String.fromCodePoint(224) /* LATIN SMALL LETTER A WITH GRAVE */,
  '&aacute;': String.fromCodePoint(225) /* LATIN SMALL LETTER A WITH ACUTE */,
  '&acirc;': String.fromCodePoint(226) /* LATIN SMALL LETTER A WITH CIRCUMFLEX */,
  '&atilde;': String.fromCodePoint(227) /* LATIN SMALL LETTER A WITH TILDE */,
  '&auml;': String.fromCodePoint(228) /* LATIN SMALL LETTER A WITH DIAERESIS */,
  '&aring;': String.fromCodePoint(229) /* LATIN SMALL LETTER A WITH RING ABOVE */,
  '&aelig;': String.fromCodePoint(230) /* LATIN SMALL LETTER AE */,
  '&ccedil;': String.fromCodePoint(231) /* LATIN SMALL LETTER C WITH CEDILLA */,
  '&egrave;': String.fromCodePoint(232) /* LATIN SMALL LETTER E WITH GRAVE */,
  '&eacute;': String.fromCodePoint(233) /* LATIN SMALL LETTER E WITH ACUTE */,
  '&ecirc;': String.fromCodePoint(234) /* LATIN SMALL LETTER E WITH CIRCUMFLEX */,
  '&euml;': String.fromCodePoint(235) /* LATIN SMALL LETTER E WITH DIAERESIS */,
  '&igrave;': String.fromCodePoint(236) /* LATIN SMALL LETTER I WITH GRAVE */,
  '&iacute;': String.fromCodePoint(237) /* LATIN SMALL LETTER I WITH ACUTE */,
  '&icirc;': String.fromCodePoint(238) /* LATIN SMALL LETTER I WITH CIRCUMFLEX */,
  '&iuml;': String.fromCodePoint(239) /* LATIN SMALL LETTER I WITH DIAERESIS */,
  '&eth;': String.fromCodePoint(240) /* LATIN SMALL LETTER ETH */,
  '&ntilde;': String.fromCodePoint(241) /* LATIN SMALL LETTER N WITH TILDE */,
  '&ograve;': String.fromCodePoint(242) /* LATIN SMALL LETTER O WITH GRAVE */,
  '&oacute;': String.fromCodePoint(243) /* LATIN SMALL LETTER O WITH ACUTE */,
  '&ocirc;': String.fromCodePoint(244) /* LATIN SMALL LETTER O WITH CIRCUMFLEX */,
  '&otilde;': String.fromCodePoint(245) /* LATIN SMALL LETTER O WITH TILDE */,
  '&ouml;': String.fromCodePoint(246) /* LATIN SMALL LETTER O WITH DIAERESIS */,
  '&div;': String.fromCodePoint(247) /* DIVISION SIGN */,
  '&oslash;': String.fromCodePoint(248) /* LATIN SMALL LETTER O WITH STROKE */,
  '&ugrave;': String.fromCodePoint(249) /* LATIN SMALL LETTER U WITH GRAVE */,
  '&uacute;': String.fromCodePoint(250) /* LATIN SMALL LETTER U WITH ACUTE */,
  '&ucirc;': String.fromCodePoint(251) /* LATIN SMALL LETTER U WITH CIRCUMFLEX */,
  '&uuml;': String.fromCodePoint(252) /* LATIN SMALL LETTER U WITH DIAERESIS */,
  '&yacute;': String.fromCodePoint(253) /* LATIN SMALL LETTER Y WITH ACUTE */,
  '&thorn;': String.fromCodePoint(254) /* LATIN SMALL LETTER THORN */,
  '&yuml;': String.fromCodePoint(255) /* LATIN SMALL LETTER Y WITH DIAERESIS */,
  '&Amacr;': String.fromCodePoint(256) /* LATIN CAPITAL LETTER A WITH MACRON */,
  '&amacr;': String.fromCodePoint(257) /* LATIN SMALL LETTER A WITH MACRON */,
  '&Abreve;': String.fromCodePoint(258) /* LATIN CAPITAL LETTER A WITH BREVE */,
  '&abreve;': String.fromCodePoint(259) /* LATIN SMALL LETTER A WITH BREVE */,
  '&Aogon;': String.fromCodePoint(260) /* LATIN CAPITAL LETTER A WITH OGONEK */,
  '&aogon;': String.fromCodePoint(261) /* LATIN SMALL LETTER A WITH OGONEK */,
  '&Cacute;': String.fromCodePoint(262) /* LATIN CAPITAL LETTER C WITH ACUTE */,
  '&cacute;': String.fromCodePoint(263) /* LATIN SMALL LETTER C WITH ACUTE */,
  '&Ccirc;': String.fromCodePoint(264) /* LATIN CAPITAL LETTER C WITH CIRCUMFLEX */,
  '&ccirc;': String.fromCodePoint(265) /* LATIN SMALL LETTER C WITH CIRCUMFLEX */,
  '&Cdot;': String.fromCodePoint(266) /* LATIN CAPITAL LETTER C WITH DOT ABOVE */,
  '&cdot;': String.fromCodePoint(267) /* LATIN SMALL LETTER C WITH DOT ABOVE */,
  '&Ccaron;': String.fromCodePoint(268) /* LATIN CAPITAL LETTER C WITH CARON */,
  '&ccaron;': String.fromCodePoint(269) /* LATIN SMALL LETTER C WITH CARON */,
  '&Dcaron;': String.fromCodePoint(270) /* LATIN CAPITAL LETTER D WITH CARON */,
  '&dcaron;': String.fromCodePoint(271) /* LATIN SMALL LETTER D WITH CARON */,
  '&Dstrok;': String.fromCodePoint(272) /* LATIN CAPITAL LETTER D WITH STROKE */,
  '&dstrok;': String.fromCodePoint(273) /* LATIN SMALL LETTER D WITH STROKE */,
  '&Emacr;': String.fromCodePoint(274) /* LATIN CAPITAL LETTER E WITH MACRON */,
  '&emacr;': String.fromCodePoint(275) /* LATIN SMALL LETTER E WITH MACRON */,
  '&Edot;': String.fromCodePoint(278) /* LATIN CAPITAL LETTER E WITH DOT ABOVE */,
  '&edot;': String.fromCodePoint(279) /* LATIN SMALL LETTER E WITH DOT ABOVE */,
  '&Eogon;': String.fromCodePoint(280) /* LATIN CAPITAL LETTER E WITH OGONEK */,
  '&eogon;': String.fromCodePoint(281) /* LATIN SMALL LETTER E WITH OGONEK */,
  '&Ecaron;': String.fromCodePoint(282) /* LATIN CAPITAL LETTER E WITH CARON */,
  '&ecaron;': String.fromCodePoint(283) /* LATIN SMALL LETTER E WITH CARON */,
  '&Gcirc;': String.fromCodePoint(284) /* LATIN CAPITAL LETTER G WITH CIRCUMFLEX */,
  '&gcirc;': String.fromCodePoint(285) /* LATIN SMALL LETTER G WITH CIRCUMFLEX */,
  '&Gbreve;': String.fromCodePoint(286) /* LATIN CAPITAL LETTER G WITH BREVE */,
  '&gbreve;': String.fromCodePoint(287) /* LATIN SMALL LETTER G WITH BREVE */,
  '&Gdot;': String.fromCodePoint(288) /* LATIN CAPITAL LETTER G WITH DOT ABOVE */,
  '&gdot;': String.fromCodePoint(289) /* LATIN SMALL LETTER G WITH DOT ABOVE */,
  '&Gcedil;': String.fromCodePoint(290) /* LATIN CAPITAL LETTER G WITH CEDILLA */,
  '&Hcirc;': String.fromCodePoint(292) /* LATIN CAPITAL LETTER H WITH CIRCUMFLEX */,
  '&hcirc;': String.fromCodePoint(293) /* LATIN SMALL LETTER H WITH CIRCUMFLEX */,
  '&Hstrok;': String.fromCodePoint(294) /* LATIN CAPITAL LETTER H WITH STROKE */,
  '&hstrok;': String.fromCodePoint(295) /* LATIN SMALL LETTER H WITH STROKE */,
  '&Itilde;': String.fromCodePoint(296) /* LATIN CAPITAL LETTER I WITH TILDE */,
  '&itilde;': String.fromCodePoint(297) /* LATIN SMALL LETTER I WITH TILDE */,
  '&Imacr;': String.fromCodePoint(298) /* LATIN CAPITAL LETTER I WITH MACRON */,
  '&imacr;': String.fromCodePoint(299) /* LATIN SMALL LETTER I WITH MACRON */,
  '&Iogon;': String.fromCodePoint(302) /* LATIN CAPITAL LETTER I WITH OGONEK */,
  '&iogon;': String.fromCodePoint(303) /* LATIN SMALL LETTER I WITH OGONEK */,
  '&Idot;': String.fromCodePoint(304) /* LATIN CAPITAL LETTER I WITH DOT ABOVE */,
  '&inodot;': String.fromCodePoint(305) /* LATIN SMALL LETTER DOTLESS I */,
  '&IJlig;': String.fromCodePoint(306) /* LATIN CAPITAL LIGATURE IJ */,
  '&ijlig;': String.fromCodePoint(307) /* LATIN SMALL LIGATURE IJ */,
  '&Jcirc;': String.fromCodePoint(308) /* LATIN CAPITAL LETTER J WITH CIRCUMFLEX */,
  '&jcirc;': String.fromCodePoint(309) /* LATIN SMALL LETTER J WITH CIRCUMFLEX */,
  '&Kcedil;': String.fromCodePoint(310) /* LATIN CAPITAL LETTER K WITH CEDILLA */,
  '&kcedil;': String.fromCodePoint(311) /* LATIN SMALL LETTER K WITH CEDILLA */,
  '&kgreen;': String.fromCodePoint(312) /* LATIN SMALL LETTER KRA */,
  '&Lacute;': String.fromCodePoint(313) /* LATIN CAPITAL LETTER L WITH ACUTE */,
  '&lacute;': String.fromCodePoint(314) /* LATIN SMALL LETTER L WITH ACUTE */,
  '&Lcedil;': String.fromCodePoint(315) /* LATIN CAPITAL LETTER L WITH CEDILLA */,
  '&lcedil;': String.fromCodePoint(316) /* LATIN SMALL LETTER L WITH CEDILLA */,
  '&Lcaron;': String.fromCodePoint(317) /* LATIN CAPITAL LETTER L WITH CARON */,
  '&lcaron;': String.fromCodePoint(318) /* LATIN SMALL LETTER L WITH CARON */,
  '&Lmidot;': String.fromCodePoint(319) /* LATIN CAPITAL LETTER L WITH MIDDLE DOT */,
  '&lmidot;': String.fromCodePoint(320) /* LATIN SMALL LETTER L WITH MIDDLE DOT */,
  '&Lstrok;': String.fromCodePoint(321) /* LATIN CAPITAL LETTER L WITH STROKE */,
  '&lstrok;': String.fromCodePoint(322) /* LATIN SMALL LETTER L WITH STROKE */,
  '&Nacute;': String.fromCodePoint(323) /* LATIN CAPITAL LETTER N WITH ACUTE */,
  '&nacute;': String.fromCodePoint(324) /* LATIN SMALL LETTER N WITH ACUTE */,
  '&Ncedil;': String.fromCodePoint(325) /* LATIN CAPITAL LETTER N WITH CEDILLA */,
  '&ncedil;': String.fromCodePoint(326) /* LATIN SMALL LETTER N WITH CEDILLA */,
  '&Ncaron;': String.fromCodePoint(327) /* LATIN CAPITAL LETTER N WITH CARON */,
  '&ncaron;': String.fromCodePoint(328) /* LATIN SMALL LETTER N WITH CARON */,
  '&napos;': String.fromCodePoint(329) /* LATIN SMALL LETTER N PRECEDED BY APOSTROPHE */,
  '&ENG;': String.fromCodePoint(330) /* LATIN CAPITAL LETTER ENG */,
  '&eng;': String.fromCodePoint(331) /* LATIN SMALL LETTER ENG */,
  '&Omacr;': String.fromCodePoint(332) /* LATIN CAPITAL LETTER O WITH MACRON */,
  '&omacr;': String.fromCodePoint(333) /* LATIN SMALL LETTER O WITH MACRON */,
  '&Odblac;': String.fromCodePoint(336) /* LATIN CAPITAL LETTER O WITH DOUBLE ACUTE */,
  '&odblac;': String.fromCodePoint(337) /* LATIN SMALL LETTER O WITH DOUBLE ACUTE */,
  '&OElig;': String.fromCodePoint(338) /* LATIN CAPITAL LIGATURE OE */,
  '&oelig;': String.fromCodePoint(339) /* LATIN SMALL LIGATURE OE */,
  '&Racute;': String.fromCodePoint(340) /* LATIN CAPITAL LETTER R WITH ACUTE */,
  '&racute;': String.fromCodePoint(341) /* LATIN SMALL LETTER R WITH ACUTE */,
  '&Rcedil;': String.fromCodePoint(342) /* LATIN CAPITAL LETTER R WITH CEDILLA */,
  '&rcedil;': String.fromCodePoint(343) /* LATIN SMALL LETTER R WITH CEDILLA */,
  '&Rcaron;': String.fromCodePoint(344) /* LATIN CAPITAL LETTER R WITH CARON */,
  '&rcaron;': String.fromCodePoint(345) /* LATIN SMALL LETTER R WITH CARON */,
  '&Sacute;': String.fromCodePoint(346) /* LATIN CAPITAL LETTER S WITH ACUTE */,
  '&sacute;': String.fromCodePoint(347) /* LATIN SMALL LETTER S WITH ACUTE */,
  '&Scirc;': String.fromCodePoint(348) /* LATIN CAPITAL LETTER S WITH CIRCUMFLEX */,
  '&scirc;': String.fromCodePoint(349) /* LATIN SMALL LETTER S WITH CIRCUMFLEX */,
  '&Scedil;': String.fromCodePoint(350) /* LATIN CAPITAL LETTER S WITH CEDILLA */,
  '&scedil;': String.fromCodePoint(351) /* LATIN SMALL LETTER S WITH CEDILLA */,
  '&Scaron;': String.fromCodePoint(352) /* LATIN CAPITAL LETTER S WITH CARON */,
  '&scaron;': String.fromCodePoint(353) /* LATIN SMALL LETTER S WITH CARON */,
  '&Tcedil;': String.fromCodePoint(354) /* LATIN CAPITAL LETTER T WITH CEDILLA */,
  '&tcedil;': String.fromCodePoint(355) /* LATIN SMALL LETTER T WITH CEDILLA */,
  '&Tcaron;': String.fromCodePoint(356) /* LATIN CAPITAL LETTER T WITH CARON */,
  '&tcaron;': String.fromCodePoint(357) /* LATIN SMALL LETTER T WITH CARON */,
  '&Tstrok;': String.fromCodePoint(358) /* LATIN CAPITAL LETTER T WITH STROKE */,
  '&tstrok;': String.fromCodePoint(359) /* LATIN SMALL LETTER T WITH STROKE */,
  '&Utilde;': String.fromCodePoint(360) /* LATIN CAPITAL LETTER U WITH TILDE */,
  '&utilde;': String.fromCodePoint(361) /* LATIN SMALL LETTER U WITH TILDE */,
  '&Umacr;': String.fromCodePoint(362) /* LATIN CAPITAL LETTER U WITH MACRON */,
  '&umacr;': String.fromCodePoint(363) /* LATIN SMALL LETTER U WITH MACRON */,
  '&Ubreve;': String.fromCodePoint(364) /* LATIN CAPITAL LETTER U WITH BREVE */,
  '&ubreve;': String.fromCodePoint(365) /* LATIN SMALL LETTER U WITH BREVE */,
  '&Uring;': String.fromCodePoint(366) /* LATIN CAPITAL LETTER U WITH RING ABOVE */,
  '&uring;': String.fromCodePoint(367) /* LATIN SMALL LETTER U WITH RING ABOVE */,
  '&Udblac;': String.fromCodePoint(368) /* LATIN CAPITAL LETTER U WITH DOUBLE ACUTE */,
  '&udblac;': String.fromCodePoint(369) /* LATIN SMALL LETTER U WITH DOUBLE ACUTE */,
  '&Uogon;': String.fromCodePoint(370) /* LATIN CAPITAL LETTER U WITH OGONEK */,
  '&uogon;': String.fromCodePoint(371) /* LATIN SMALL LETTER U WITH OGONEK */,
  '&Wcirc;': String.fromCodePoint(372) /* LATIN CAPITAL LETTER W WITH CIRCUMFLEX */,
  '&wcirc;': String.fromCodePoint(373) /* LATIN SMALL LETTER W WITH CIRCUMFLEX */,
  '&Ycirc;': String.fromCodePoint(374) /* LATIN CAPITAL LETTER Y WITH CIRCUMFLEX */,
  '&ycirc;': String.fromCodePoint(375) /* LATIN SMALL LETTER Y WITH CIRCUMFLEX */,
  '&Yuml;': String.fromCodePoint(376) /* LATIN CAPITAL LETTER Y WITH DIAERESIS */,
  '&Zacute;': String.fromCodePoint(377) /* LATIN CAPITAL LETTER Z WITH ACUTE */,
  '&zacute;': String.fromCodePoint(378) /* LATIN SMALL LETTER Z WITH ACUTE */,
  '&Zdot;': String.fromCodePoint(379) /* LATIN CAPITAL LETTER Z WITH DOT ABOVE */,
  '&zdot;': String.fromCodePoint(380) /* LATIN SMALL LETTER Z WITH DOT ABOVE */,
  '&Zcaron;': String.fromCodePoint(381) /* LATIN CAPITAL LETTER Z WITH CARON */,
  '&zcaron;': String.fromCodePoint(382) /* LATIN SMALL LETTER Z WITH CARON */,
  '&fnof;': String.fromCodePoint(402) /* LATIN SMALL LETTER F WITH HOOK */,
  '&imped;': String.fromCodePoint(437) /* LATIN CAPITAL LETTER Z WITH STROKE */,
  '&gacute;': String.fromCodePoint(501) /* LATIN SMALL LETTER G WITH ACUTE */,
  '&jmath;': String.fromCodePoint(567) /* LATIN SMALL LETTER DOTLESS J */,
  '&circ;': String.fromCodePoint(710) /* MODIFIER LETTER CIRCUMFLEX ACCENT */,
  '&Hacek;': String.fromCodePoint(711) /* CARON */,
  '&Breve;': String.fromCodePoint(728) /* BREVE */,
  '&DiacriticalDot;': String.fromCodePoint(729) /* DOT ABOVE */,
  '&ring;': String.fromCodePoint(730) /* RING ABOVE */,
  '&ogon;': String.fromCodePoint(731) /* OGONEK */,
  '&DiacriticalTilde;': String.fromCodePoint(732) /* SMALL TILDE */,
  '&DiacriticalDoubleAcute;': String.fromCodePoint(733) /* DOUBLE ACUTE ACCENT */,
  '&DownBreve;': String.fromCodePoint(785) /* COMBINING INVERTED BREVE */,
  '&UnderBar;': String.fromCodePoint(818) /* COMBINING LOW LINE */,
  '&Alpha;': String.fromCodePoint(913) /* GREEK CAPITAL LETTER ALPHA */,
  '&Beta;': String.fromCodePoint(914) /* GREEK CAPITAL LETTER BETA */,
  '&Gamma;': String.fromCodePoint(915) /* GREEK CAPITAL LETTER GAMMA */,
  '&Delta;': String.fromCodePoint(916) /* GREEK CAPITAL LETTER DELTA */,
  '&Epsilon;': String.fromCodePoint(917) /* GREEK CAPITAL LETTER EPSILON */,
  '&Zeta;': String.fromCodePoint(918) /* GREEK CAPITAL LETTER ZETA */,
  '&Eta;': String.fromCodePoint(919) /* GREEK CAPITAL LETTER ETA */,
  '&Theta;': String.fromCodePoint(920) /* GREEK CAPITAL LETTER THETA */,
  '&Iota;': String.fromCodePoint(921) /* GREEK CAPITAL LETTER IOTA */,
  '&Kappa;': String.fromCodePoint(922) /* GREEK CAPITAL LETTER KAPPA */,
  '&Lambda;': String.fromCodePoint(923) /* GREEK CAPITAL LETTER LAMDA */,
  '&Mu;': String.fromCodePoint(924) /* GREEK CAPITAL LETTER MU */,
  '&Nu;': String.fromCodePoint(925) /* GREEK CAPITAL LETTER NU */,
  '&Xi;': String.fromCodePoint(926) /* GREEK CAPITAL LETTER XI */,
  '&Omicron;': String.fromCodePoint(927) /* GREEK CAPITAL LETTER OMICRON */,
  '&Pi;': String.fromCodePoint(928) /* GREEK CAPITAL LETTER PI */,
  '&Rho;': String.fromCodePoint(929) /* GREEK CAPITAL LETTER RHO */,
  '&Sigma;': String.fromCodePoint(931) /* GREEK CAPITAL LETTER SIGMA */,
  '&Tau;': String.fromCodePoint(932) /* GREEK CAPITAL LETTER TAU */,
  '&Upsilon;': String.fromCodePoint(933) /* GREEK CAPITAL LETTER UPSILON */,
  '&Phi;': String.fromCodePoint(934) /* GREEK CAPITAL LETTER PHI */,
  '&Chi;': String.fromCodePoint(935) /* GREEK CAPITAL LETTER CHI */,
  '&Psi;': String.fromCodePoint(936) /* GREEK CAPITAL LETTER PSI */,
  '&Omega;': String.fromCodePoint(937) /* GREEK CAPITAL LETTER OMEGA */,
  '&alpha;': String.fromCodePoint(945) /* GREEK SMALL LETTER ALPHA */,
  '&beta;': String.fromCodePoint(946) /* GREEK SMALL LETTER BETA */,
  '&gamma;': String.fromCodePoint(947) /* GREEK SMALL LETTER GAMMA */,
  '&delta;': String.fromCodePoint(948) /* GREEK SMALL LETTER DELTA */,
  '&epsilon;': String.fromCodePoint(949) /* GREEK SMALL LETTER EPSILON */,
  '&zeta;': String.fromCodePoint(950) /* GREEK SMALL LETTER ZETA */,
  '&eta;': String.fromCodePoint(951) /* GREEK SMALL LETTER ETA */,
  '&theta;': String.fromCodePoint(952) /* GREEK SMALL LETTER THETA */,
  '&iota;': String.fromCodePoint(953) /* GREEK SMALL LETTER IOTA */,
  '&kappa;': String.fromCodePoint(954) /* GREEK SMALL LETTER KAPPA */,
  '&lambda;': String.fromCodePoint(955) /* GREEK SMALL LETTER LAMDA */,
  '&mu;': String.fromCodePoint(956) /* GREEK SMALL LETTER MU */,
  '&nu;': String.fromCodePoint(957) /* GREEK SMALL LETTER NU */,
  '&xi;': String.fromCodePoint(958) /* GREEK SMALL LETTER XI */,
  '&omicron;': String.fromCodePoint(959) /* GREEK SMALL LETTER OMICRON */,
  '&pi;': String.fromCodePoint(960) /* GREEK SMALL LETTER PI */,
  '&rho;': String.fromCodePoint(961) /* GREEK SMALL LETTER RHO */,
  '&sigmaf;': String.fromCodePoint(962) /* GREEK SMALL LETTER FINAL SIGMA */,
  '&sigma;': String.fromCodePoint(963) /* GREEK SMALL LETTER SIGMA */,
  '&tau;': String.fromCodePoint(964) /* GREEK SMALL LETTER TAU */,
  '&upsilon;': String.fromCodePoint(965) /* GREEK SMALL LETTER UPSILON */,
  '&varphi;': String.fromCodePoint(966) /* GREEK SMALL LETTER PHI */,
  '&chi;': String.fromCodePoint(967) /* GREEK SMALL LETTER CHI */,
  '&psi;': String.fromCodePoint(968) /* GREEK SMALL LETTER PSI */,
  '&omega;': String.fromCodePoint(969) /* GREEK SMALL LETTER OMEGA */,
  '&thetasym;': String.fromCodePoint(977) /* GREEK THETA SYMBOL */,
  '&upsih;': String.fromCodePoint(978) /* GREEK UPSILON WITH HOOK SYMBOL */,
  '&straightphi;': String.fromCodePoint(981) /* GREEK PHI SYMBOL */,
  '&varpi;': String.fromCodePoint(982) /* GREEK PI SYMBOL */,
  '&Gammad;': String.fromCodePoint(988) /* GREEK LETTER DIGAMMA */,
  '&digamma;': String.fromCodePoint(989) /* GREEK SMALL LETTER DIGAMMA */,
  '&varkappa;': String.fromCodePoint(1008) /* GREEK KAPPA SYMBOL */,
  '&varrho;': String.fromCodePoint(1009) /* GREEK RHO SYMBOL */,
  '&straightepsilon;': String.fromCodePoint(1013) /* GREEK LUNATE EPSILON SYMBOL */,
  '&backepsilon;': String.fromCodePoint(1014) /* GREEK REVERSED LUNATE EPSILON SYMBOL */,
  '&IOcy;': String.fromCodePoint(1025) /* CYRILLIC CAPITAL LETTER IO */,
  '&DJcy;': String.fromCodePoint(1026) /* CYRILLIC CAPITAL LETTER DJE */,
  '&GJcy;': String.fromCodePoint(1027) /* CYRILLIC CAPITAL LETTER GJE */,
  '&Jukcy;': String.fromCodePoint(1028) /* CYRILLIC CAPITAL LETTER UKRAINIAN IE */,
  '&DScy;': String.fromCodePoint(1029) /* CYRILLIC CAPITAL LETTER DZE */,
  '&Iukcy;': String.fromCodePoint(1030) /* CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I */,
  '&YIcy;': String.fromCodePoint(1031) /* CYRILLIC CAPITAL LETTER YI */,
  '&Jsercy;': String.fromCodePoint(1032) /* CYRILLIC CAPITAL LETTER JE */,
  '&LJcy;': String.fromCodePoint(1033) /* CYRILLIC CAPITAL LETTER LJE */,
  '&NJcy;': String.fromCodePoint(1034) /* CYRILLIC CAPITAL LETTER NJE */,
  '&TSHcy;': String.fromCodePoint(1035) /* CYRILLIC CAPITAL LETTER TSHE */,
  '&KJcy;': String.fromCodePoint(1036) /* CYRILLIC CAPITAL LETTER KJE */,
  '&Ubrcy;': String.fromCodePoint(1038) /* CYRILLIC CAPITAL LETTER SHORT U */,
  '&DZcy;': String.fromCodePoint(1039) /* CYRILLIC CAPITAL LETTER DZHE */,
  '&Acy;': String.fromCodePoint(1040) /* CYRILLIC CAPITAL LETTER A */,
  '&Bcy;': String.fromCodePoint(1041) /* CYRILLIC CAPITAL LETTER BE */,
  '&Vcy;': String.fromCodePoint(1042) /* CYRILLIC CAPITAL LETTER VE */,
  '&Gcy;': String.fromCodePoint(1043) /* CYRILLIC CAPITAL LETTER GHE */,
  '&Dcy;': String.fromCodePoint(1044) /* CYRILLIC CAPITAL LETTER DE */,
  '&IEcy;': String.fromCodePoint(1045) /* CYRILLIC CAPITAL LETTER IE */,
  '&ZHcy;': String.fromCodePoint(1046) /* CYRILLIC CAPITAL LETTER ZHE */,
  '&Zcy;': String.fromCodePoint(1047) /* CYRILLIC CAPITAL LETTER ZE */,
  '&Icy;': String.fromCodePoint(1048) /* CYRILLIC CAPITAL LETTER I */,
  '&Jcy;': String.fromCodePoint(1049) /* CYRILLIC CAPITAL LETTER SHORT I */,
  '&Kcy;': String.fromCodePoint(1050) /* CYRILLIC CAPITAL LETTER KA */,
  '&Lcy;': String.fromCodePoint(1051) /* CYRILLIC CAPITAL LETTER EL */,
  '&Mcy;': String.fromCodePoint(1052) /* CYRILLIC CAPITAL LETTER EM */,
  '&Ncy;': String.fromCodePoint(1053) /* CYRILLIC CAPITAL LETTER EN */,
  '&Ocy;': String.fromCodePoint(1054) /* CYRILLIC CAPITAL LETTER O */,
  '&Pcy;': String.fromCodePoint(1055) /* CYRILLIC CAPITAL LETTER PE */,
  '&Rcy;': String.fromCodePoint(1056) /* CYRILLIC CAPITAL LETTER ER */,
  '&Scy;': String.fromCodePoint(1057) /* CYRILLIC CAPITAL LETTER ES */,
  '&Tcy;': String.fromCodePoint(1058) /* CYRILLIC CAPITAL LETTER TE */,
  '&Ucy;': String.fromCodePoint(1059) /* CYRILLIC CAPITAL LETTER U */,
  '&Fcy;': String.fromCodePoint(1060) /* CYRILLIC CAPITAL LETTER EF */,
  '&KHcy;': String.fromCodePoint(1061) /* CYRILLIC CAPITAL LETTER HA */,
  '&TScy;': String.fromCodePoint(1062) /* CYRILLIC CAPITAL LETTER TSE */,
  '&CHcy;': String.fromCodePoint(1063) /* CYRILLIC CAPITAL LETTER CHE */,
  '&SHcy;': String.fromCodePoint(1064) /* CYRILLIC CAPITAL LETTER SHA */,
  '&SHCHcy;': String.fromCodePoint(1065) /* CYRILLIC CAPITAL LETTER SHCHA */,
  '&HARDcy;': String.fromCodePoint(1066) /* CYRILLIC CAPITAL LETTER HARD SIGN */,
  '&Ycy;': String.fromCodePoint(1067) /* CYRILLIC CAPITAL LETTER YERU */,
  '&SOFTcy;': String.fromCodePoint(1068) /* CYRILLIC CAPITAL LETTER SOFT SIGN */,
  '&Ecy;': String.fromCodePoint(1069) /* CYRILLIC CAPITAL LETTER E */,
  '&YUcy;': String.fromCodePoint(1070) /* CYRILLIC CAPITAL LETTER YU */,
  '&YAcy;': String.fromCodePoint(1071) /* CYRILLIC CAPITAL LETTER YA */,
  '&acy;': String.fromCodePoint(1072) /* CYRILLIC SMALL LETTER A */,
  '&bcy;': String.fromCodePoint(1073) /* CYRILLIC SMALL LETTER BE */,
  '&vcy;': String.fromCodePoint(1074) /* CYRILLIC SMALL LETTER VE */,
  '&gcy;': String.fromCodePoint(1075) /* CYRILLIC SMALL LETTER GHE */,
  '&dcy;': String.fromCodePoint(1076) /* CYRILLIC SMALL LETTER DE */,
  '&iecy;': String.fromCodePoint(1077) /* CYRILLIC SMALL LETTER IE */,
  '&zhcy;': String.fromCodePoint(1078) /* CYRILLIC SMALL LETTER ZHE */,
  '&zcy;': String.fromCodePoint(1079) /* CYRILLIC SMALL LETTER ZE */,
  '&icy;': String.fromCodePoint(1080) /* CYRILLIC SMALL LETTER I */,
  '&jcy;': String.fromCodePoint(1081) /* CYRILLIC SMALL LETTER SHORT I */,
  '&kcy;': String.fromCodePoint(1082) /* CYRILLIC SMALL LETTER KA */,
  '&lcy;': String.fromCodePoint(1083) /* CYRILLIC SMALL LETTER EL */,
  '&mcy;': String.fromCodePoint(1084) /* CYRILLIC SMALL LETTER EM */,
  '&ncy;': String.fromCodePoint(1085) /* CYRILLIC SMALL LETTER EN */,
  '&ocy;': String.fromCodePoint(1086) /* CYRILLIC SMALL LETTER O */,
  '&pcy;': String.fromCodePoint(1087) /* CYRILLIC SMALL LETTER PE */,
  '&rcy;': String.fromCodePoint(1088) /* CYRILLIC SMALL LETTER ER */,
  '&scy;': String.fromCodePoint(1089) /* CYRILLIC SMALL LETTER ES */,
  '&tcy;': String.fromCodePoint(1090) /* CYRILLIC SMALL LETTER TE */,
  '&ucy;': String.fromCodePoint(1091) /* CYRILLIC SMALL LETTER U */,
  '&fcy;': String.fromCodePoint(1092) /* CYRILLIC SMALL LETTER EF */,
  '&khcy;': String.fromCodePoint(1093) /* CYRILLIC SMALL LETTER HA */,
  '&tscy;': String.fromCodePoint(1094) /* CYRILLIC SMALL LETTER TSE */,
  '&chcy;': String.fromCodePoint(1095) /* CYRILLIC SMALL LETTER CHE */,
  '&shcy;': String.fromCodePoint(1096) /* CYRILLIC SMALL LETTER SHA */,
  '&shchcy;': String.fromCodePoint(1097) /* CYRILLIC SMALL LETTER SHCHA */,
  '&hardcy;': String.fromCodePoint(1098) /* CYRILLIC SMALL LETTER HARD SIGN */,
  '&ycy;': String.fromCodePoint(1099) /* CYRILLIC SMALL LETTER YERU */,
  '&softcy;': String.fromCodePoint(1100) /* CYRILLIC SMALL LETTER SOFT SIGN */,
  '&ecy;': String.fromCodePoint(1101) /* CYRILLIC SMALL LETTER E */,
  '&yucy;': String.fromCodePoint(1102) /* CYRILLIC SMALL LETTER YU */,
  '&yacy;': String.fromCodePoint(1103) /* CYRILLIC SMALL LETTER YA */,
  '&iocy;': String.fromCodePoint(1105) /* CYRILLIC SMALL LETTER IO */,
  '&djcy;': String.fromCodePoint(1106) /* CYRILLIC SMALL LETTER DJE */,
  '&gjcy;': String.fromCodePoint(1107) /* CYRILLIC SMALL LETTER GJE */,
  '&jukcy;': String.fromCodePoint(1108) /* CYRILLIC SMALL LETTER UKRAINIAN IE */,
  '&dscy;': String.fromCodePoint(1109) /* CYRILLIC SMALL LETTER DZE */,
  '&iukcy;': String.fromCodePoint(1110) /* CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I */,
  '&yicy;': String.fromCodePoint(1111) /* CYRILLIC SMALL LETTER YI */,
  '&jsercy;': String.fromCodePoint(1112) /* CYRILLIC SMALL LETTER JE */,
  '&ljcy;': String.fromCodePoint(1113) /* CYRILLIC SMALL LETTER LJE */,
  '&njcy;': String.fromCodePoint(1114) /* CYRILLIC SMALL LETTER NJE */,
  '&tshcy;': String.fromCodePoint(1115) /* CYRILLIC SMALL LETTER TSHE */,
  '&kjcy;': String.fromCodePoint(1116) /* CYRILLIC SMALL LETTER KJE */,
  '&ubrcy;': String.fromCodePoint(1118) /* CYRILLIC SMALL LETTER SHORT U */,
  '&dzcy;': String.fromCodePoint(1119) /* CYRILLIC SMALL LETTER DZHE */,
  '&ensp;': String.fromCodePoint(8194) /* EN SPACE */,
  '&emsp;': String.fromCodePoint(8195) /* EM SPACE */,
  '&emsp13;': String.fromCodePoint(8196) /* THREE-PER-EM SPACE */,
  '&emsp14;': String.fromCodePoint(8197) /* FOUR-PER-EM SPACE */,
  '&numsp;': String.fromCodePoint(8199) /* FIGURE SPACE */,
  '&puncsp;': String.fromCodePoint(8200) /* PUNCTUATION SPACE */,
  '&ThinSpace;': String.fromCodePoint(8201) /* THIN SPACE */,
  '&VeryThinSpace;': String.fromCodePoint(8202) /* HAIR SPACE */,
  '&NegativeThickSpace;': String.fromCodePoint(8203) /* ZERO WIDTH SPACE */,
  '&zwnj;': String.fromCodePoint(8204) /* ZERO WIDTH NON-JOINER */,
  '&zwj;': String.fromCodePoint(8205) /* ZERO WIDTH JOINER */,
  '&lrm;': String.fromCodePoint(8206) /* LEFT-TO-RIGHT MARK */,
  '&rlm;': String.fromCodePoint(8207) /* RIGHT-TO-LEFT MARK */,
  '&dash;': String.fromCodePoint(8208) /* HYPHEN */,
  '&ndash;': String.fromCodePoint(8211) /* EN DASH */,
  '&mdash;': String.fromCodePoint(8212) /* EM DASH */,
  '&horbar;': String.fromCodePoint(8213) /* HORIZONTAL BAR */,
  '&Vert;': String.fromCodePoint(8214) /* DOUBLE VERTICAL LINE */,
  '&OpenCurlyQuote;': String.fromCodePoint(8216) /* LEFT SINGLE QUOTATION MARK */,
  '&CloseCurlyQuote;': String.fromCodePoint(8217) /* RIGHT SINGLE QUOTATION MARK */,
  '&sbquo;': String.fromCodePoint(8218) /* SINGLE LOW-9 QUOTATION MARK */,
  '&OpenCurlyDoubleQuote;': String.fromCodePoint(8220) /* LEFT DOUBLE QUOTATION MARK */,
  '&CloseCurlyDoubleQuote;': String.fromCodePoint(8221) /* RIGHT DOUBLE QUOTATION MARK */,
  '&bdquo;': String.fromCodePoint(8222) /* DOUBLE LOW-9 QUOTATION MARK */,
  '&dagger;': String.fromCodePoint(8224) /* DAGGER */,
  '&ddagger;': String.fromCodePoint(8225) /* DOUBLE DAGGER */,
  '&bullet;': String.fromCodePoint(8226) /* BULLET */,
  '&nldr;': String.fromCodePoint(8229) /* TWO DOT LEADER */,
  '&mldr;': String.fromCodePoint(8230) /* HORIZONTAL ELLIPSIS */,
  '&permil;': String.fromCodePoint(8240) /* PER MILLE SIGN */,
  '&pertenk;': String.fromCodePoint(8241) /* PER TEN THOUSAND SIGN */,
  '&prime;': String.fromCodePoint(8242) /* PRIME */,
  '&Prime;': String.fromCodePoint(8243) /* DOUBLE PRIME */,
  '&tprime;': String.fromCodePoint(8244) /* TRIPLE PRIME */,
  '&backprime;': String.fromCodePoint(8245) /* REVERSED PRIME */,
  '&lsaquo;': String.fromCodePoint(8249) /* SINGLE LEFT-POINTING ANGLE QUOTATION MARK */,
  '&rsaquo;': String.fromCodePoint(8250) /* SINGLE RIGHT-POINTING ANGLE QUOTATION MARK */,
  '&oline;': String.fromCodePoint(8254) /* OVERLINE */,
  '&caret;': String.fromCodePoint(8257) /* CARET INSERTION POINT */,
  '&hybull;': String.fromCodePoint(8259) /* HYPHEN BULLET */,
  '&frasl;': String.fromCodePoint(8260) /* FRACTION SLASH */,
  '&bsemi;': String.fromCodePoint(8271) /* REVERSED SEMICOLON */,
  '&qprime;': String.fromCodePoint(8279) /* QUADRUPLE PRIME */,
  '&MediumSpace;': String.fromCodePoint(8287) /* MEDIUM MATHEMATICAL SPACE */,
  '&NoBreak;': String.fromCodePoint(8288) /* WORD JOINER */,
  '&af;': String.fromCodePoint(8289) /* FUNCTION APPLICATION */,
  '&it;': String.fromCodePoint(8290) /* INVISIBLE TIMES */,
  '&ic;': String.fromCodePoint(8291) /* INVISIBLE SEPARATOR */,
  '&euro;': String.fromCodePoint(8364) /* EURO SIGN */,
  '&TripleDot;': String.fromCodePoint(8411) /* COMBINING THREE DOTS ABOVE */,
  '&DotDot;': String.fromCodePoint(8412) /* COMBINING FOUR DOTS ABOVE */,
  '&complexes;': String.fromCodePoint(8450) /* DOUBLE-STRUCK CAPITAL C */,
  '&incare;': String.fromCodePoint(8453) /* CARE OF */,
  '&gscr;': String.fromCodePoint(8458) /* SCRIPT SMALL G */,
  '&Hscr;': String.fromCodePoint(8459) /* SCRIPT CAPITAL H */,
  '&Poincareplane;': String.fromCodePoint(8460) /* BLACK-LETTER CAPITAL H */,
  '&Hopf;': String.fromCodePoint(8461) /* DOUBLE-STRUCK CAPITAL H */,
  '&planckh;': String.fromCodePoint(8462) /* PLANCK CONSTANT */,
  '&hslash;': String.fromCodePoint(8463) /* PLANCK CONSTANT OVER TWO PI */,
  '&imagline;': String.fromCodePoint(8464) /* SCRIPT CAPITAL I */,
  '&Ifr;': String.fromCodePoint(8465) /* BLACK-LETTER CAPITAL I */,
  '&Laplacetrf;': String.fromCodePoint(8466) /* SCRIPT CAPITAL L */,
  '&ell;': String.fromCodePoint(8467) /* SCRIPT SMALL L */,
  '&naturals;': String.fromCodePoint(8469) /* DOUBLE-STRUCK CAPITAL N */,
  '&numero;': String.fromCodePoint(8470) /* NUMERO SIGN */,
  '&copysr;': String.fromCodePoint(8471) /* SOUND RECORDING COPYRIGHT */,
  '&wp;': String.fromCodePoint(8472) /* SCRIPT CAPITAL P */,
  '&primes;': String.fromCodePoint(8473) /* DOUBLE-STRUCK CAPITAL P */,
  '&Qopf;': String.fromCodePoint(8474) /* DOUBLE-STRUCK CAPITAL Q */,
  '&realine;': String.fromCodePoint(8475) /* SCRIPT CAPITAL R */,
  '&Rfr;': String.fromCodePoint(8476) /* BLACK-LETTER CAPITAL R */,
  '&Ropf;': String.fromCodePoint(8477) /* DOUBLE-STRUCK CAPITAL R */,
  '&rx;': String.fromCodePoint(8478) /* PRESCRIPTION TAKE */,
  '&TRADE;': String.fromCodePoint(8482) /* TRADE MARK SIGN */,
  '&Zopf;': String.fromCodePoint(8484) /* DOUBLE-STRUCK CAPITAL Z */,
  '&ohm;': String.fromCodePoint(8486) /* OHM SIGN */,
  '&mho;': String.fromCodePoint(8487) /* INVERTED OHM SIGN */,
  '&zeetrf;': String.fromCodePoint(8488) /* BLACK-LETTER CAPITAL Z */,
  '&iiota;': String.fromCodePoint(8489) /* TURNED GREEK SMALL LETTER IOTA */,
  '&angst;': String.fromCodePoint(8491) /* ANGSTROM SIGN */,
  '&Bscr;': String.fromCodePoint(8492) /* SCRIPT CAPITAL B */,
  '&Cayleys;': String.fromCodePoint(8493) /* BLACK-LETTER CAPITAL C */,
  '&escr;': String.fromCodePoint(8495) /* SCRIPT SMALL E */,
  '&expectation;': String.fromCodePoint(8496) /* SCRIPT CAPITAL E */,
  '&Fouriertrf;': String.fromCodePoint(8497) /* SCRIPT CAPITAL F */,
  '&Mscr;': String.fromCodePoint(8499) /* SCRIPT CAPITAL M */,
  '&oscr;': String.fromCodePoint(8500) /* SCRIPT SMALL O */,
  '&aleph;': String.fromCodePoint(8501) /* ALEF SYMBOL */,
  '&beth;': String.fromCodePoint(8502) /* BET SYMBOL */,
  '&gimel;': String.fromCodePoint(8503) /* GIMEL SYMBOL */,
  '&daleth;': String.fromCodePoint(8504) /* DALET SYMBOL */,
  '&DD;': String.fromCodePoint(8517) /* DOUBLE-STRUCK ITALIC CAPITAL D */,
  '&dd;': String.fromCodePoint(8518) /* DOUBLE-STRUCK ITALIC SMALL D */,
  '&ee;': String.fromCodePoint(8519) /* DOUBLE-STRUCK ITALIC SMALL E */,
  '&ii;': String.fromCodePoint(8520) /* DOUBLE-STRUCK ITALIC SMALL I */,
  '&frac13;': String.fromCodePoint(8531) /* VULGAR FRACTION ONE THIRD */,
  '&frac23;': String.fromCodePoint(8532) /* VULGAR FRACTION TWO THIRDS */,
  '&frac15;': String.fromCodePoint(8533) /* VULGAR FRACTION ONE FIFTH */,
  '&frac25;': String.fromCodePoint(8534) /* VULGAR FRACTION TWO FIFTHS */,
  '&frac35;': String.fromCodePoint(8535) /* VULGAR FRACTION THREE FIFTHS */,
  '&frac45;': String.fromCodePoint(8536) /* VULGAR FRACTION FOUR FIFTHS */,
  '&frac16;': String.fromCodePoint(8537) /* VULGAR FRACTION ONE SIXTH */,
  '&frac56;': String.fromCodePoint(8538) /* VULGAR FRACTION FIVE SIXTHS */,
  '&frac18;': String.fromCodePoint(8539) /* VULGAR FRACTION ONE EIGHTH */,
  '&frac38;': String.fromCodePoint(8540) /* VULGAR FRACTION THREE EIGHTHS */,
  '&frac58;': String.fromCodePoint(8541) /* VULGAR FRACTION FIVE EIGHTHS */,
  '&frac78;': String.fromCodePoint(8542) /* VULGAR FRACTION SEVEN EIGHTHS */,
  '&ShortLeftArrow;': String.fromCodePoint(8592) /* LEFTWARDS ARROW */,
  '&ShortUpArrow;': String.fromCodePoint(8593) /* UPWARDS ARROW */,
  '&ShortRightArrow;': String.fromCodePoint(8594) /* RIGHTWARDS ARROW */,
  '&ShortDownArrow;': String.fromCodePoint(8595) /* DOWNWARDS ARROW */,
  '&LeftRightArrow;': String.fromCodePoint(8596) /* LEFT RIGHT ARROW */,
  '&UpDownArrow;': String.fromCodePoint(8597) /* UP DOWN ARROW */,
  '&nwarrow;': String.fromCodePoint(8598) /* NORTH WEST ARROW */,
  '&nearrow;': String.fromCodePoint(8599) /* NORTH EAST ARROW */,
  '&LowerRightArrow;': String.fromCodePoint(8600) /* SOUTH EAST ARROW */,
  '&LowerLeftArrow;': String.fromCodePoint(8601) /* SOUTH WEST ARROW */,
  '&nleftarrow;': String.fromCodePoint(8602) /* LEFTWARDS ARROW WITH STROKE */,
  '&nrightarrow;': String.fromCodePoint(8603) /* RIGHTWARDS ARROW WITH STROKE */,
  '&rightsquigarrow;': String.fromCodePoint(8605) /* RIGHTWARDS WAVE ARROW */,
  '&twoheadleftarrow;': String.fromCodePoint(8606) /* LEFTWARDS TWO HEADED ARROW */,
  '&Uarr;': String.fromCodePoint(8607) /* UPWARDS TWO HEADED ARROW */,
  '&twoheadrightarrow;': String.fromCodePoint(8608) /* RIGHTWARDS TWO HEADED ARROW */,
  '&Darr;': String.fromCodePoint(8609) /* DOWNWARDS TWO HEADED ARROW */,
  '&leftarrowtail;': String.fromCodePoint(8610) /* LEFTWARDS ARROW WITH TAIL */,
  '&rightarrowtail;': String.fromCodePoint(8611) /* RIGHTWARDS ARROW WITH TAIL */,
  '&mapstoleft;': String.fromCodePoint(8612) /* LEFTWARDS ARROW FROM BAR */,
  '&mapstoup;': String.fromCodePoint(8613) /* UPWARDS ARROW FROM BAR */,
  '&mapsto;': String.fromCodePoint(8614) /* RIGHTWARDS ARROW FROM BAR */,
  '&mapstodown;': String.fromCodePoint(8615) /* DOWNWARDS ARROW FROM BAR */,
  '&hookleftarrow;': String.fromCodePoint(8617) /* LEFTWARDS ARROW WITH HOOK */,
  '&hookrightarrow;': String.fromCodePoint(8618) /* RIGHTWARDS ARROW WITH HOOK */,
  '&looparrowleft;': String.fromCodePoint(8619) /* LEFTWARDS ARROW WITH LOOP */,
  '&looparrowright;': String.fromCodePoint(8620) /* RIGHTWARDS ARROW WITH LOOP */,
  '&leftrightsquigarrow;': String.fromCodePoint(8621) /* LEFT RIGHT WAVE ARROW */,
  '&nleftrightarrow;': String.fromCodePoint(8622) /* LEFT RIGHT ARROW WITH STROKE */,
  '&Lsh;': String.fromCodePoint(8624) /* UPWARDS ARROW WITH TIP LEFTWARDS */,
  '&Rsh;': String.fromCodePoint(8625) /* UPWARDS ARROW WITH TIP RIGHTWARDS */,
  '&ldsh;': String.fromCodePoint(8626) /* DOWNWARDS ARROW WITH TIP LEFTWARDS */,
  '&rdsh;': String.fromCodePoint(8627) /* DOWNWARDS ARROW WITH TIP RIGHTWARDS */,
  '&crarr;': String.fromCodePoint(8629) /* DOWNWARDS ARROW WITH CORNER LEFTWARDS */,
  '&curvearrowleft;': String.fromCodePoint(8630) /* ANTICLOCKWISE TOP SEMICIRCLE ARROW */,
  '&curvearrowright;': String.fromCodePoint(8631) /* CLOCKWISE TOP SEMICIRCLE ARROW */,
  '&circlearrowleft;': String.fromCodePoint(8634) /* ANTICLOCKWISE OPEN CIRCLE ARROW */,
  '&circlearrowright;': String.fromCodePoint(8635) /* CLOCKWISE OPEN CIRCLE ARROW */,
  '&leftharpoonup;': String.fromCodePoint(8636) /* LEFTWARDS HARPOON WITH BARB UPWARDS */,
  '&DownLeftVector;': String.fromCodePoint(8637) /* LEFTWARDS HARPOON WITH BARB DOWNWARDS */,
  '&RightUpVector;': String.fromCodePoint(8638) /* UPWARDS HARPOON WITH BARB RIGHTWARDS */,
  '&LeftUpVector;': String.fromCodePoint(8639) /* UPWARDS HARPOON WITH BARB LEFTWARDS */,
  '&rightharpoonup;': String.fromCodePoint(8640) /* RIGHTWARDS HARPOON WITH BARB UPWARDS */,
  '&DownRightVector;': String.fromCodePoint(8641) /* RIGHTWARDS HARPOON WITH BARB DOWNWARDS */,
  '&downharpoonright;': String.fromCodePoint(8642) /* DOWNWARDS HARPOON WITH BARB RIGHTWARDS */,
  '&downharpoonleft;': String.fromCodePoint(8643) /* DOWNWARDS HARPOON WITH BARB LEFTWARDS */,
  '&RightArrowLeftArrow;': String.fromCodePoint(8644) /* RIGHTWARDS ARROW OVER LEFTWARDS ARROW */,
  '&UpArrowDownArrow;': String.fromCodePoint(8645) /* UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW */,
  '&LeftArrowRightArrow;': String.fromCodePoint(8646) /* LEFTWARDS ARROW OVER RIGHTWARDS ARROW */,
  '&leftleftarrows;': String.fromCodePoint(8647) /* LEFTWARDS PAIRED ARROWS */,
  '&upuparrows;': String.fromCodePoint(8648) /* UPWARDS PAIRED ARROWS */,
  '&rightrightarrows;': String.fromCodePoint(8649) /* RIGHTWARDS PAIRED ARROWS */,
  '&downdownarrows;': String.fromCodePoint(8650) /* DOWNWARDS PAIRED ARROWS */,
  '&leftrightharpoons;': String.fromCodePoint(8651) /* LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON */,
  '&Equilibrium;': String.fromCodePoint(8652) /* RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON */,
  '&nLeftarrow;': String.fromCodePoint(8653) /* LEFTWARDS DOUBLE ARROW WITH STROKE */,
  '&nLeftrightarrow;': String.fromCodePoint(8654) /* LEFT RIGHT DOUBLE ARROW WITH STROKE */,
  '&nRightarrow;': String.fromCodePoint(8655) /* RIGHTWARDS DOUBLE ARROW WITH STROKE */,
  '&DoubleLeftArrow;': String.fromCodePoint(8656) /* LEFTWARDS DOUBLE ARROW */,
  '&DoubleUpArrow;': String.fromCodePoint(8657) /* UPWARDS DOUBLE ARROW */,
  '&DoubleRightArrow;': String.fromCodePoint(8658) /* RIGHTWARDS DOUBLE ARROW */,
  '&DoubleDownArrow;': String.fromCodePoint(8659) /* DOWNWARDS DOUBLE ARROW */,
  '&iff;': String.fromCodePoint(8660) /* LEFT RIGHT DOUBLE ARROW */,
  '&DoubleUpDownArrow;': String.fromCodePoint(8661) /* UP DOWN DOUBLE ARROW */,
  '&nwArr;': String.fromCodePoint(8662) /* NORTH WEST DOUBLE ARROW */,
  '&neArr;': String.fromCodePoint(8663) /* NORTH EAST DOUBLE ARROW */,
  '&seArr;': String.fromCodePoint(8664) /* SOUTH EAST DOUBLE ARROW */,
  '&swArr;': String.fromCodePoint(8665) /* SOUTH WEST DOUBLE ARROW */,
  '&Lleftarrow;': String.fromCodePoint(8666) /* LEFTWARDS TRIPLE ARROW */,
  '&Rrightarrow;': String.fromCodePoint(8667) /* RIGHTWARDS TRIPLE ARROW */,
  '&zigrarr;': String.fromCodePoint(8669) /* RIGHTWARDS SQUIGGLE ARROW */,
  '&LeftArrowBar;': String.fromCodePoint(8676) /* LEFTWARDS ARROW TO BAR */,
  '&RightArrowBar;': String.fromCodePoint(8677) /* RIGHTWARDS ARROW TO BAR */,
  '&DownArrowUpArrow;': String.fromCodePoint(8693) /* DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW */,
  '&loarr;': String.fromCodePoint(8701) /* LEFTWARDS OPEN-HEADED ARROW */,
  '&roarr;': String.fromCodePoint(8702) /* RIGHTWARDS OPEN-HEADED ARROW */,
  '&hoarr;': String.fromCodePoint(8703) /* LEFT RIGHT OPEN-HEADED ARROW */,
  '&ForAll;': String.fromCodePoint(8704) /* FOR ALL */,
  '&complement;': String.fromCodePoint(8705) /* COMPLEMENT */,
  '&PartialD;': String.fromCodePoint(8706) /* PARTIAL DIFFERENTIAL */,
  '&Exists;': String.fromCodePoint(8707) /* THERE EXISTS */,
  '&nexists;': String.fromCodePoint(8708) /* THERE DOES NOT EXIST */,
  '&varnothing;': String.fromCodePoint(8709) /* EMPTY SET */,
  '&Del;': String.fromCodePoint(8711) /* NABLA */,
  '&in;': String.fromCodePoint(8712) /* ELEMENT OF */,
  '&notinva;': String.fromCodePoint(8713) /* NOT AN ELEMENT OF */,
  '&SuchThat;': String.fromCodePoint(8715) /* CONTAINS AS MEMBER */,
  '&NotReverseElement;': String.fromCodePoint(8716) /* DOES NOT CONTAIN AS MEMBER */,
  '&Product;': String.fromCodePoint(8719) /* N-ARY PRODUCT */,
  '&Coproduct;': String.fromCodePoint(8720) /* N-ARY COPRODUCT */,
  '&Sum;': String.fromCodePoint(8721) /* N-ARY SUMMATION */,
  '&minus;': String.fromCodePoint(8722) /* MINUS SIGN */,
  '&MinusPlus;': String.fromCodePoint(8723) /* MINUS-OR-PLUS SIGN */,
  '&dotplus;': String.fromCodePoint(8724) /* DOT PLUS */,
  '&smallsetminus;': String.fromCodePoint(8726) /* SET MINUS */,
  '&lowast;': String.fromCodePoint(8727) /* ASTERISK OPERATOR */,
  '&SmallCircle;': String.fromCodePoint(8728) /* RING OPERATOR */,
  '&Sqrt;': String.fromCodePoint(8730) /* SQUARE ROOT */,
  '&varpropto;': String.fromCodePoint(8733) /* PROPORTIONAL TO */,
  '&infin;': String.fromCodePoint(8734) /* INFINITY */,
  '&angrt;': String.fromCodePoint(8735) /* RIGHT ANGLE */,
  '&angle;': String.fromCodePoint(8736) /* ANGLE */,
  '&measuredangle;': String.fromCodePoint(8737) /* MEASURED ANGLE */,
  '&angsph;': String.fromCodePoint(8738) /* SPHERICAL ANGLE */,
  '&shortmid;': String.fromCodePoint(8739) /* DIVIDES */,
  '&nshortmid;': String.fromCodePoint(8740) /* DOES NOT DIVIDE */,
  '&shortparallel;': String.fromCodePoint(8741) /* PARALLEL TO */,
  '&nshortparallel;': String.fromCodePoint(8742) /* NOT PARALLEL TO */,
  '&wedge;': String.fromCodePoint(8743) /* LOGICAL AND */,
  '&vee;': String.fromCodePoint(8744) /* LOGICAL OR */,
  '&cap;': String.fromCodePoint(8745) /* INTERSECTION */,
  '&cup;': String.fromCodePoint(8746) /* UNION */,
  '&Integral;': String.fromCodePoint(8747) /* INTEGRAL */,
  '&Int;': String.fromCodePoint(8748) /* DOUBLE INTEGRAL */,
  '&iiint;': String.fromCodePoint(8749) /* TRIPLE INTEGRAL */,
  '&ContourIntegral;': String.fromCodePoint(8750) /* CONTOUR INTEGRAL */,
  '&DoubleContourIntegral;': String.fromCodePoint(8751) /* SURFACE INTEGRAL */,
  '&Cconint;': String.fromCodePoint(8752) /* VOLUME INTEGRAL */,
  '&cwint;': String.fromCodePoint(8753) /* CLOCKWISE INTEGRAL */,
  '&ClockwiseContourIntegral;': String.fromCodePoint(8754) /* CLOCKWISE CONTOUR INTEGRAL */,
  '&CounterClockwiseContourIntegral;': String.fromCodePoint(8755) /* ANTICLOCKWISE CONTOUR INTEGRAL */,
  '&Therefore;': String.fromCodePoint(8756) /* THEREFORE */,
  '&Because;': String.fromCodePoint(8757) /* BECAUSE */,
  '&ratio;': String.fromCodePoint(8758) /* RATIO */,
  '&Proportion;': String.fromCodePoint(8759) /* PROPORTION */,
  '&dotminus;': String.fromCodePoint(8760) /* DOT MINUS */,
  '&mDDot;': String.fromCodePoint(8762) /* GEOMETRIC PROPORTION */,
  '&homtht;': String.fromCodePoint(8763) /* HOMOTHETIC */,
  '&thicksim;': String.fromCodePoint(8764) /* TILDE OPERATOR */,
  '&backsim;': String.fromCodePoint(8765) /* REVERSED TILDE */,
  '&mstpos;': String.fromCodePoint(8766) /* INVERTED LAZY S */,
  '&acd;': String.fromCodePoint(8767) /* SINE WAVE */,
  '&wr;': String.fromCodePoint(8768) /* WREATH PRODUCT */,
  '&NotTilde;': String.fromCodePoint(8769) /* NOT TILDE */,
  '&eqsim;': String.fromCodePoint(8770) /* MINUS TILDE */,
  '&simeq;': String.fromCodePoint(8771) /* ASYMPTOTICALLY EQUAL TO */,
  '&NotTildeEqual;': String.fromCodePoint(8772) /* NOT ASYMPTOTICALLY EQUAL TO */,
  '&TildeFullEqual;': String.fromCodePoint(8773) /* APPROXIMATELY EQUAL TO */,
  '&simne;': String.fromCodePoint(8774) /* APPROXIMATELY BUT NOT ACTUALLY EQUAL TO */,
  '&NotTildeFullEqual;': String.fromCodePoint(8775) /* NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO */,
  '&thickapprox;': String.fromCodePoint(8776) /* ALMOST EQUAL TO */,
  '&napprox;': String.fromCodePoint(8777) /* NOT ALMOST EQUAL TO */,
  '&approxeq;': String.fromCodePoint(8778) /* ALMOST EQUAL OR EQUAL TO */,
  '&apid;': String.fromCodePoint(8779) /* TRIPLE TILDE */,
  '&backcong;': String.fromCodePoint(8780) /* ALL EQUAL TO */,
  '&CupCap;': String.fromCodePoint(8781) /* EQUIVALENT TO */,
  '&Bumpeq;': String.fromCodePoint(8782) /* GEOMETRICALLY EQUIVALENT TO */,
  '&bumpeq;': String.fromCodePoint(8783) /* DIFFERENCE BETWEEN */,
  '&doteq;': String.fromCodePoint(8784) /* APPROACHES THE LIMIT */,
  '&doteqdot;': String.fromCodePoint(8785) /* GEOMETRICALLY EQUAL TO */,
  '&fallingdotseq;': String.fromCodePoint(8786) /* APPROXIMATELY EQUAL TO OR THE IMAGE OF */,
  '&risingdotseq;': String.fromCodePoint(8787) /* IMAGE OF OR APPROXIMATELY EQUAL TO */,
  '&Assign;': String.fromCodePoint(8788) /* COLON EQUALS */,
  '&eqcolon;': String.fromCodePoint(8789) /* EQUALS COLON */,
  '&eqcirc;': String.fromCodePoint(8790) /* RING IN EQUAL TO */,
  '&circeq;': String.fromCodePoint(8791) /* RING EQUAL TO */,
  '&wedgeq;': String.fromCodePoint(8793) /* ESTIMATES */,
  '&veeeq;': String.fromCodePoint(8794) /* EQUIANGULAR TO */,
  '&triangleq;': String.fromCodePoint(8796) /* DELTA EQUAL TO */,
  '&questeq;': String.fromCodePoint(8799) /* QUESTIONED EQUAL TO */,
  '&NotEqual;': String.fromCodePoint(8800) /* NOT EQUAL TO */,
  '&Congruent;': String.fromCodePoint(8801) /* IDENTICAL TO */,
  '&NotCongruent;': String.fromCodePoint(8802) /* NOT IDENTICAL TO */,
  '&leq;': String.fromCodePoint(8804) /* LESS-THAN OR EQUAL TO */,
  '&geq;': String.fromCodePoint(8805) /* GREATER-THAN OR EQUAL TO */,
  '&leqq;': String.fromCodePoint(8806) /* LESS-THAN OVER EQUAL TO */,
  '&geqq;': String.fromCodePoint(8807) /* GREATER-THAN OVER EQUAL TO */,
  '&lneqq;': String.fromCodePoint(8808) /* LESS-THAN BUT NOT EQUAL TO */,
  '&gneqq;': String.fromCodePoint(8809) /* GREATER-THAN BUT NOT EQUAL TO */,
  '&ll;': String.fromCodePoint(8810) /* MUCH LESS-THAN */,
  '&gg;': String.fromCodePoint(8811) /* MUCH GREATER-THAN */,
  '&between;': String.fromCodePoint(8812) /* BETWEEN */,
  '&NotCupCap;': String.fromCodePoint(8813) /* NOT EQUIVALENT TO */,
  '&nless;': String.fromCodePoint(8814) /* NOT LESS-THAN */,
  '&ngtr;': String.fromCodePoint(8815) /* NOT GREATER-THAN */,
  '&nleq;': String.fromCodePoint(8816) /* NEITHER LESS-THAN NOR EQUAL TO */,
  '&ngeq;': String.fromCodePoint(8817) /* NEITHER GREATER-THAN NOR EQUAL TO */,
  '&lesssim;': String.fromCodePoint(8818) /* LESS-THAN OR EQUIVALENT TO */,
  '&GreaterTilde;': String.fromCodePoint(8819) /* GREATER-THAN OR EQUIVALENT TO */,
  '&NotLessTilde;': String.fromCodePoint(8820) /* NEITHER LESS-THAN NOR EQUIVALENT TO */,
  '&NotGreaterTilde;': String.fromCodePoint(8821) /* NEITHER GREATER-THAN NOR EQUIVALENT TO */,
  '&LessGreater;': String.fromCodePoint(8822) /* LESS-THAN OR GREATER-THAN */,
  '&GreaterLess;': String.fromCodePoint(8823) /* GREATER-THAN OR LESS-THAN */,
  '&NotLessGreater;': String.fromCodePoint(8824) /* NEITHER LESS-THAN NOR GREATER-THAN */,
  '&NotGreaterLess;': String.fromCodePoint(8825) /* NEITHER GREATER-THAN NOR LESS-THAN */,
  '&prec;': String.fromCodePoint(8826) /* PRECEDES */,
  '&succ;': String.fromCodePoint(8827) /* SUCCEEDS */,
  '&preccurlyeq;': String.fromCodePoint(8828) /* PRECEDES OR EQUAL TO */,
  '&succcurlyeq;': String.fromCodePoint(8829) /* SUCCEEDS OR EQUAL TO */,
  '&PrecedesTilde;': String.fromCodePoint(8830) /* PRECEDES OR EQUIVALENT TO */,
  '&SucceedsTilde;': String.fromCodePoint(8831) /* SUCCEEDS OR EQUIVALENT TO */,
  '&NotPrecedes;': String.fromCodePoint(8832) /* DOES NOT PRECEDE */,
  '&NotSucceeds;': String.fromCodePoint(8833) /* DOES NOT SUCCEED */,
  '&subset;': String.fromCodePoint(8834) /* SUBSET OF */,
  '&Superset;': String.fromCodePoint(8835) /* SUPERSET OF */,
  '&nsub;': String.fromCodePoint(8836) /* NOT A SUBSET OF */,
  '&nsup;': String.fromCodePoint(8837) /* NOT A SUPERSET OF */,
  '&subseteq;': String.fromCodePoint(8838) /* SUBSET OF OR EQUAL TO */,
  '&SupersetEqual;': String.fromCodePoint(8839) /* SUPERSET OF OR EQUAL TO */,
  '&NotSubsetEqual;': String.fromCodePoint(8840) /* NEITHER A SUBSET OF NOR EQUAL TO */,
  '&NotSupersetEqual;': String.fromCodePoint(8841) /* NEITHER A SUPERSET OF NOR EQUAL TO */,
  '&subsetneq;': String.fromCodePoint(8842) /* SUBSET OF WITH NOT EQUAL TO */,
  '&supsetneq;': String.fromCodePoint(8843) /* SUPERSET OF WITH NOT EQUAL TO */,
  '&cupdot;': String.fromCodePoint(8845) /* MULTISET MULTIPLICATION */,
  '&UnionPlus;': String.fromCodePoint(8846) /* MULTISET UNION */,
  '&sqsubset;': String.fromCodePoint(8847) /* SQUARE IMAGE OF */,
  '&sqsupset;': String.fromCodePoint(8848) /* SQUARE ORIGINAL OF */,
  '&sqsubseteq;': String.fromCodePoint(8849) /* SQUARE IMAGE OF OR EQUAL TO */,
  '&sqsupseteq;': String.fromCodePoint(8850) /* SQUARE ORIGINAL OF OR EQUAL TO */,
  '&SquareIntersection;': String.fromCodePoint(8851) /* SQUARE CAP */,
  '&SquareUnion;': String.fromCodePoint(8852) /* SQUARE CUP */,
  '&CirclePlus;': String.fromCodePoint(8853) /* CIRCLED PLUS */,
  '&CircleMinus;': String.fromCodePoint(8854) /* CIRCLED MINUS */,
  '&CircleTimes;': String.fromCodePoint(8855) /* CIRCLED TIMES */,
  '&osol;': String.fromCodePoint(8856) /* CIRCLED DIVISION SLASH */,
  '&CircleDot;': String.fromCodePoint(8857) /* CIRCLED DOT OPERATOR */,
  '&circledcirc;': String.fromCodePoint(8858) /* CIRCLED RING OPERATOR */,
  '&circledast;': String.fromCodePoint(8859) /* CIRCLED ASTERISK OPERATOR */,
  '&circleddash;': String.fromCodePoint(8861) /* CIRCLED DASH */,
  '&boxplus;': String.fromCodePoint(8862) /* SQUARED PLUS */,
  '&boxminus;': String.fromCodePoint(8863) /* SQUARED MINUS */,
  '&boxtimes;': String.fromCodePoint(8864) /* SQUARED TIMES */,
  '&dotsquare;': String.fromCodePoint(8865) /* SQUARED DOT OPERATOR */,
  '&RightTee;': String.fromCodePoint(8866) /* RIGHT TACK */,
  '&LeftTee;': String.fromCodePoint(8867) /* LEFT TACK */,
  '&DownTee;': String.fromCodePoint(8868) /* DOWN TACK */,
  '&UpTee;': String.fromCodePoint(8869) /* UP TACK */,
  '&models;': String.fromCodePoint(8871) /* MODELS */,
  '&DoubleRightTee;': String.fromCodePoint(8872) /* TRUE */,
  '&Vdash;': String.fromCodePoint(8873) /* FORCES */,
  '&Vvdash;': String.fromCodePoint(8874) /* TRIPLE VERTICAL BAR RIGHT TURNSTILE */,
  '&VDash;': String.fromCodePoint(8875) /* DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE */,
  '&nvdash;': String.fromCodePoint(8876) /* DOES NOT PROVE */,
  '&nvDash;': String.fromCodePoint(8877) /* NOT TRUE */,
  '&nVdash;': String.fromCodePoint(8878) /* DOES NOT FORCE */,
  '&nVDash;': String.fromCodePoint(8879) /* NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE */,
  '&prurel;': String.fromCodePoint(8880) /* PRECEDES UNDER RELATION */,
  '&LeftTriangle;': String.fromCodePoint(8882) /* NORMAL SUBGROUP OF */,
  '&RightTriangle;': String.fromCodePoint(8883) /* CONTAINS AS NORMAL SUBGROUP */,
  '&LeftTriangleEqual;': String.fromCodePoint(8884) /* NORMAL SUBGROUP OF OR EQUAL TO */,
  '&RightTriangleEqual;': String.fromCodePoint(8885) /* CONTAINS AS NORMAL SUBGROUP OR EQUAL TO */,
  '&origof;': String.fromCodePoint(8886) /* ORIGINAL OF */,
  '&imof;': String.fromCodePoint(8887) /* IMAGE OF */,
  '&multimap;': String.fromCodePoint(8888) /* MULTIMAP */,
  '&hercon;': String.fromCodePoint(8889) /* HERMITIAN CONJUGATE MATRIX */,
  '&intercal;': String.fromCodePoint(8890) /* INTERCALATE */,
  '&veebar;': String.fromCodePoint(8891) /* XOR */,
  '&barvee;': String.fromCodePoint(8893) /* NOR */,
  '&angrtvb;': String.fromCodePoint(8894) /* RIGHT ANGLE WITH ARC */,
  '&lrtri;': String.fromCodePoint(8895) /* RIGHT TRIANGLE */,
  '&bigwedge;': String.fromCodePoint(8896) /* N-ARY LOGICAL AND */,
  '&bigvee;': String.fromCodePoint(8897) /* N-ARY LOGICAL OR */,
  '&bigcap;': String.fromCodePoint(8898) /* N-ARY INTERSECTION */,
  '&bigcup;': String.fromCodePoint(8899) /* N-ARY UNION */,
  '&Diamond;': String.fromCodePoint(8900) /* DIAMOND OPERATOR */,
  '&sdot;': String.fromCodePoint(8901) /* DOT OPERATOR */,
  '&Star;': String.fromCodePoint(8902) /* STAR OPERATOR */,
  '&divideontimes;': String.fromCodePoint(8903) /* DIVISION TIMES */,
  '&bowtie;': String.fromCodePoint(8904) /* BOWTIE */,
  '&ltimes;': String.fromCodePoint(8905) /* LEFT NORMAL FACTOR SEMIDIRECT PRODUCT */,
  '&rtimes;': String.fromCodePoint(8906) /* RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT */,
  '&leftthreetimes;': String.fromCodePoint(8907) /* LEFT SEMIDIRECT PRODUCT */,
  '&rightthreetimes;': String.fromCodePoint(8908) /* RIGHT SEMIDIRECT PRODUCT */,
  '&backsimeq;': String.fromCodePoint(8909) /* REVERSED TILDE EQUALS */,
  '&curlyvee;': String.fromCodePoint(8910) /* CURLY LOGICAL OR */,
  '&curlywedge;': String.fromCodePoint(8911) /* CURLY LOGICAL AND */,
  '&Subset;': String.fromCodePoint(8912) /* DOUBLE SUBSET */,
  '&Supset;': String.fromCodePoint(8913) /* DOUBLE SUPERSET */,
  '&Cap;': String.fromCodePoint(8914) /* DOUBLE INTERSECTION */,
  '&Cup;': String.fromCodePoint(8915) /* DOUBLE UNION */,
  '&pitchfork;': String.fromCodePoint(8916) /* PITCHFORK */,
  '&epar;': String.fromCodePoint(8917) /* EQUAL AND PARALLEL TO */,
  '&lessdot;': String.fromCodePoint(8918) /* LESS-THAN WITH DOT */,
  '&gtrdot;': String.fromCodePoint(8919) /* GREATER-THAN WITH DOT */,
  '&Ll;': String.fromCodePoint(8920) /* VERY MUCH LESS-THAN */,
  '&ggg;': String.fromCodePoint(8921) /* VERY MUCH GREATER-THAN */,
  '&lesseqgtr;': String.fromCodePoint(8922) /* LESS-THAN EQUAL TO OR GREATER-THAN */,
  '&GreaterEqualLess;': String.fromCodePoint(8923) /* GREATER-THAN EQUAL TO OR LESS-THAN */,
  '&curlyeqprec;': String.fromCodePoint(8926) /* EQUAL TO OR PRECEDES */,
  '&curlyeqsucc;': String.fromCodePoint(8927) /* EQUAL TO OR SUCCEEDS */,
  '&NotPrecedesSlantEqual;': String.fromCodePoint(8928) /* DOES NOT PRECEDE OR EQUAL */,
  '&NotSucceedsSlantEqual;': String.fromCodePoint(8929) /* DOES NOT SUCCEED OR EQUAL */,
  '&NotSquareSubsetEqual;': String.fromCodePoint(8930) /* NOT SQUARE IMAGE OF OR EQUAL TO */,
  '&NotSquareSupersetEqual;': String.fromCodePoint(8931) /* NOT SQUARE ORIGINAL OF OR EQUAL TO */,
  '&lnsim;': String.fromCodePoint(8934) /* LESS-THAN BUT NOT EQUIVALENT TO */,
  '&gnsim;': String.fromCodePoint(8935) /* GREATER-THAN BUT NOT EQUIVALENT TO */,
  '&precnsim;': String.fromCodePoint(8936) /* PRECEDES BUT NOT EQUIVALENT TO */,
  '&succnsim;': String.fromCodePoint(8937) /* SUCCEEDS BUT NOT EQUIVALENT TO */,
  '&NotLeftTriangle;': String.fromCodePoint(8938) /* NOT NORMAL SUBGROUP OF */,
  '&NotRightTriangle;': String.fromCodePoint(8939) /* DOES NOT CONTAIN AS NORMAL SUBGROUP */,
  '&NotLeftTriangleEqual;': String.fromCodePoint(8940) /* NOT NORMAL SUBGROUP OF OR EQUAL TO */,
  '&NotRightTriangleEqual;': String.fromCodePoint(8941) /* DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL */,
  '&vellip;': String.fromCodePoint(8942) /* VERTICAL ELLIPSIS */,
  '&ctdot;': String.fromCodePoint(8943) /* MIDLINE HORIZONTAL ELLIPSIS */,
  '&utdot;': String.fromCodePoint(8944) /* UP RIGHT DIAGONAL ELLIPSIS */,
  '&dtdot;': String.fromCodePoint(8945) /* DOWN RIGHT DIAGONAL ELLIPSIS */,
  '&disin;': String.fromCodePoint(8946) /* ELEMENT OF WITH LONG HORIZONTAL STROKE */,
  '&isinsv;': String.fromCodePoint(8947) /* ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE */,
  '&isins;': String.fromCodePoint(8948) /* SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE */,
  '&isindot;': String.fromCodePoint(8949) /* ELEMENT OF WITH DOT ABOVE */,
  '&notinvc;': String.fromCodePoint(8950) /* ELEMENT OF WITH OVERBAR */,
  '&notinvb;': String.fromCodePoint(8951) /* SMALL ELEMENT OF WITH OVERBAR */,
  '&isinE;': String.fromCodePoint(8953) /* ELEMENT OF WITH TWO HORIZONTAL STROKES */,
  '&nisd;': String.fromCodePoint(8954) /* CONTAINS WITH LONG HORIZONTAL STROKE */,
  '&xnis;': String.fromCodePoint(8955) /* CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE */,
  '&nis;': String.fromCodePoint(8956) /* SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE */,
  '&notnivc;': String.fromCodePoint(8957) /* CONTAINS WITH OVERBAR */,
  '&notnivb;': String.fromCodePoint(8958) /* SMALL CONTAINS WITH OVERBAR */,
  '&barwedge;': String.fromCodePoint(8965) /* PROJECTIVE */,
  '&doublebarwedge;': String.fromCodePoint(8966) /* PERSPECTIVE */,
  '&LeftCeiling;': String.fromCodePoint(8968) /* LEFT CEILING */,
  '&RightCeiling;': String.fromCodePoint(8969) /* RIGHT CEILING */,
  '&LeftFloor;': String.fromCodePoint(8970) /* LEFT FLOOR */,
  '&RightFloor;': String.fromCodePoint(8971) /* RIGHT FLOOR */,
  '&drcrop;': String.fromCodePoint(8972) /* BOTTOM RIGHT CROP */,
  '&dlcrop;': String.fromCodePoint(8973) /* BOTTOM LEFT CROP */,
  '&urcrop;': String.fromCodePoint(8974) /* TOP RIGHT CROP */,
  '&ulcrop;': String.fromCodePoint(8975) /* TOP LEFT CROP */,
  '&bnot;': String.fromCodePoint(8976) /* REVERSED NOT SIGN */,
  '&profline;': String.fromCodePoint(8978) /* ARC */,
  '&profsurf;': String.fromCodePoint(8979) /* SEGMENT */,
  '&telrec;': String.fromCodePoint(8981) /* TELEPHONE RECORDER */,
  '&target;': String.fromCodePoint(8982) /* POSITION INDICATOR */,
  '&ulcorner;': String.fromCodePoint(8988) /* TOP LEFT CORNER */,
  '&urcorner;': String.fromCodePoint(8989) /* TOP RIGHT CORNER */,
  '&llcorner;': String.fromCodePoint(8990) /* BOTTOM LEFT CORNER */,
  '&lrcorner;': String.fromCodePoint(8991) /* BOTTOM RIGHT CORNER */,
  '&sfrown;': String.fromCodePoint(8994) /* FROWN */,
  '&ssmile;': String.fromCodePoint(8995) /* SMILE */,
  '&cylcty;': String.fromCodePoint(9005) /* CYLINDRICITY */,
  '&profalar;': String.fromCodePoint(9006) /* ALL AROUND-PROFILE */,
  '&topbot;': String.fromCodePoint(9014) /* APL FUNCTIONAL SYMBOL I-BEAM */,
  '&ovbar;': String.fromCodePoint(9021) /* APL FUNCTIONAL SYMBOL CIRCLE STILE */,
  '&solbar;': String.fromCodePoint(9023) /* APL FUNCTIONAL SYMBOL SLASH BAR */,
  '&angzarr;': String.fromCodePoint(9084) /* RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW */,
  '&lmoustache;': String.fromCodePoint(9136) /* UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION */,
  '&rmoustache;': String.fromCodePoint(9137) /* UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION */,
  '&OverBracket;': String.fromCodePoint(9140) /* TOP SQUARE BRACKET */,
  '&UnderBracket;': String.fromCodePoint(9141) /* BOTTOM SQUARE BRACKET */,
  '&bbrktbrk;': String.fromCodePoint(9142) /* BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET */,
  '&OverParenthesis;': String.fromCodePoint(9180) /* TOP PARENTHESIS */,
  '&UnderParenthesis;': String.fromCodePoint(9181) /* BOTTOM PARENTHESIS */,
  '&OverBrace;': String.fromCodePoint(9182) /* TOP CURLY BRACKET */,
  '&UnderBrace;': String.fromCodePoint(9183) /* BOTTOM CURLY BRACKET */,
  '&trpezium;': String.fromCodePoint(9186) /* WHITE TRAPEZIUM */,
  '&elinters;': String.fromCodePoint(9191) /* ELECTRICAL INTERSECTION */,
  '&blank;': String.fromCodePoint(9251) /* OPEN BOX */,
  '&circledS;': String.fromCodePoint(9416) /* CIRCLED LATIN CAPITAL LETTER S */,
  '&HorizontalLine;': String.fromCodePoint(9472) /* BOX DRAWINGS LIGHT HORIZONTAL */,
  '&boxv;': String.fromCodePoint(9474) /* BOX DRAWINGS LIGHT VERTICAL */,
  '&boxdr;': String.fromCodePoint(9484) /* BOX DRAWINGS LIGHT DOWN AND RIGHT */,
  '&boxdl;': String.fromCodePoint(9488) /* BOX DRAWINGS LIGHT DOWN AND LEFT */,
  '&boxur;': String.fromCodePoint(9492) /* BOX DRAWINGS LIGHT UP AND RIGHT */,
  '&boxul;': String.fromCodePoint(9496) /* BOX DRAWINGS LIGHT UP AND LEFT */,
  '&boxvr;': String.fromCodePoint(9500) /* BOX DRAWINGS LIGHT VERTICAL AND RIGHT */,
  '&boxvl;': String.fromCodePoint(9508) /* BOX DRAWINGS LIGHT VERTICAL AND LEFT */,
  '&boxhd;': String.fromCodePoint(9516) /* BOX DRAWINGS LIGHT DOWN AND HORIZONTAL */,
  '&boxhu;': String.fromCodePoint(9524) /* BOX DRAWINGS LIGHT UP AND HORIZONTAL */,
  '&boxvh;': String.fromCodePoint(9532) /* BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL */,
  '&boxH;': String.fromCodePoint(9552) /* BOX DRAWINGS DOUBLE HORIZONTAL */,
  '&boxV;': String.fromCodePoint(9553) /* BOX DRAWINGS DOUBLE VERTICAL */,
  '&boxdR;': String.fromCodePoint(9554) /* BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE */,
  '&boxDr;': String.fromCodePoint(9555) /* BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE */,
  '&boxDR;': String.fromCodePoint(9556) /* BOX DRAWINGS DOUBLE DOWN AND RIGHT */,
  '&boxdL;': String.fromCodePoint(9557) /* BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE */,
  '&boxDl;': String.fromCodePoint(9558) /* BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE */,
  '&boxDL;': String.fromCodePoint(9559) /* BOX DRAWINGS DOUBLE DOWN AND LEFT */,
  '&boxuR;': String.fromCodePoint(9560) /* BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE */,
  '&boxUr;': String.fromCodePoint(9561) /* BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE */,
  '&boxUR;': String.fromCodePoint(9562) /* BOX DRAWINGS DOUBLE UP AND RIGHT */,
  '&boxuL;': String.fromCodePoint(9563) /* BOX DRAWINGS UP SINGLE AND LEFT DOUBLE */,
  '&boxUl;': String.fromCodePoint(9564) /* BOX DRAWINGS UP DOUBLE AND LEFT SINGLE */,
  '&boxUL;': String.fromCodePoint(9565) /* BOX DRAWINGS DOUBLE UP AND LEFT */,
  '&boxvR;': String.fromCodePoint(9566) /* BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE */,
  '&boxVr;': String.fromCodePoint(9567) /* BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE */,
  '&boxVR;': String.fromCodePoint(9568) /* BOX DRAWINGS DOUBLE VERTICAL AND RIGHT */,
  '&boxvL;': String.fromCodePoint(9569) /* BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE */,
  '&boxVl;': String.fromCodePoint(9570) /* BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE */,
  '&boxVL;': String.fromCodePoint(9571) /* BOX DRAWINGS DOUBLE VERTICAL AND LEFT */,
  '&boxHd;': String.fromCodePoint(9572) /* BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE */,
  '&boxhD;': String.fromCodePoint(9573) /* BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE */,
  '&boxHD;': String.fromCodePoint(9574) /* BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL */,
  '&boxHu;': String.fromCodePoint(9575) /* BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE */,
  '&boxhU;': String.fromCodePoint(9576) /* BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE */,
  '&boxHU;': String.fromCodePoint(9577) /* BOX DRAWINGS DOUBLE UP AND HORIZONTAL */,
  '&boxvH;': String.fromCodePoint(9578) /* BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE */,
  '&boxVh;': String.fromCodePoint(9579) /* BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE */,
  '&boxVH;': String.fromCodePoint(9580) /* BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL */,
  '&uhblk;': String.fromCodePoint(9600) /* UPPER HALF BLOCK */,
  '&lhblk;': String.fromCodePoint(9604) /* LOWER HALF BLOCK */,
  '&block;': String.fromCodePoint(9608) /* FULL BLOCK */,
  '&blk14;': String.fromCodePoint(9617) /* LIGHT SHADE */,
  '&blk12;': String.fromCodePoint(9618) /* MEDIUM SHADE */,
  '&blk34;': String.fromCodePoint(9619) /* DARK SHADE */,
  '&Square;': String.fromCodePoint(9633) /* WHITE SQUARE */,
  '&FilledVerySmallSquare;': String.fromCodePoint(9642) /* BLACK SMALL SQUARE */,
  '&EmptyVerySmallSquare;': String.fromCodePoint(9643) /* WHITE SMALL SQUARE */,
  '&rect;': String.fromCodePoint(9645) /* WHITE RECTANGLE */,
  '&marker;': String.fromCodePoint(9646) /* BLACK VERTICAL RECTANGLE */,
  '&fltns;': String.fromCodePoint(9649) /* WHITE PARALLELOGRAM */,
  '&bigtriangleup;': String.fromCodePoint(9651) /* WHITE UP-POINTING TRIANGLE */,
  '&blacktriangle;': String.fromCodePoint(9652) /* BLACK UP-POINTING SMALL TRIANGLE */,
  '&triangle;': String.fromCodePoint(9653) /* WHITE UP-POINTING SMALL TRIANGLE */,
  '&blacktriangleright;': String.fromCodePoint(9656) /* BLACK RIGHT-POINTING SMALL TRIANGLE */,
  '&triangleright;': String.fromCodePoint(9657) /* WHITE RIGHT-POINTING SMALL TRIANGLE */,
  '&bigtriangledown;': String.fromCodePoint(9661) /* WHITE DOWN-POINTING TRIANGLE */,
  '&blacktriangledown;': String.fromCodePoint(9662) /* BLACK DOWN-POINTING SMALL TRIANGLE */,
  '&triangledown;': String.fromCodePoint(9663) /* WHITE DOWN-POINTING SMALL TRIANGLE */,
  '&blacktriangleleft;': String.fromCodePoint(9666) /* BLACK LEFT-POINTING SMALL TRIANGLE */,
  '&triangleleft;': String.fromCodePoint(9667) /* WHITE LEFT-POINTING SMALL TRIANGLE */,
  '&lozenge;': String.fromCodePoint(9674) /* LOZENGE */,
  '&cir;': String.fromCodePoint(9675) /* WHITE CIRCLE */,
  '&tridot;': String.fromCodePoint(9708) /* WHITE UP-POINTING TRIANGLE WITH DOT */,
  '&bigcirc;': String.fromCodePoint(9711) /* LARGE CIRCLE */,
  '&ultri;': String.fromCodePoint(9720) /* UPPER LEFT TRIANGLE */,
  '&urtri;': String.fromCodePoint(9721) /* UPPER RIGHT TRIANGLE */,
  '&lltri;': String.fromCodePoint(9722) /* LOWER LEFT TRIANGLE */,
  '&EmptySmallSquare;': String.fromCodePoint(9723) /* WHITE MEDIUM SQUARE */,
  '&FilledSmallSquare;': String.fromCodePoint(9724) /* BLACK MEDIUM SQUARE */,
  '&bigstar;': String.fromCodePoint(9733) /* BLACK STAR */,
  '&star;': String.fromCodePoint(9734) /* WHITE STAR */,
  '&phone;': String.fromCodePoint(9742) /* BLACK TELEPHONE */,
  '&female;': String.fromCodePoint(9792) /* FEMALE SIGN */,
  '&male;': String.fromCodePoint(9794) /* MALE SIGN */,
  '&spadesuit;': String.fromCodePoint(9824) /* BLACK SPADE SUIT */,
  '&clubsuit;': String.fromCodePoint(9827) /* BLACK CLUB SUIT */,
  '&heartsuit;': String.fromCodePoint(9829) /* BLACK HEART SUIT */,
  '&diamondsuit;': String.fromCodePoint(9830) /* BLACK DIAMOND SUIT */,
  '&sung;': String.fromCodePoint(9834) /* EIGHTH NOTE */,
  '&flat;': String.fromCodePoint(9837) /* MUSIC FLAT SIGN */,
  '&natural;': String.fromCodePoint(9838) /* MUSIC NATURAL SIGN */,
  '&sharp;': String.fromCodePoint(9839) /* MUSIC SHARP SIGN */,
  '&checkmark;': String.fromCodePoint(10003) /* CHECK MARK */,
  '&cross;': String.fromCodePoint(10007) /* BALLOT X */,
  '&maltese;': String.fromCodePoint(10016) /* MALTESE CROSS */,
  '&sext;': String.fromCodePoint(10038) /* SIX POINTED BLACK STAR */,
  '&VerticalSeparator;': String.fromCodePoint(10072) /* LIGHT VERTICAL BAR */,
  '&lbbrk;': String.fromCodePoint(10098) /* LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT */,
  '&rbbrk;': String.fromCodePoint(10099) /* LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT */,
  '&LeftDoubleBracket;': String.fromCodePoint(10214) /* MATHEMATICAL LEFT WHITE SQUARE BRACKET */,
  '&RightDoubleBracket;': String.fromCodePoint(10215) /* MATHEMATICAL RIGHT WHITE SQUARE BRACKET */,
  '&langle;': String.fromCodePoint(10216) /* MATHEMATICAL LEFT ANGLE BRACKET */,
  '&rangle;': String.fromCodePoint(10217) /* MATHEMATICAL RIGHT ANGLE BRACKET */,
  '&Lang;': String.fromCodePoint(10218) /* MATHEMATICAL LEFT DOUBLE ANGLE BRACKET */,
  '&Rang;': String.fromCodePoint(10219) /* MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET */,
  '&loang;': String.fromCodePoint(10220) /* MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET */,
  '&roang;': String.fromCodePoint(10221) /* MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET */,
  '&LongLeftArrow;': String.fromCodePoint(10229) /* LONG LEFTWARDS ARROW */,
  '&LongRightArrow;': String.fromCodePoint(10230) /* LONG RIGHTWARDS ARROW */,
  '&LongLeftRightArrow;': String.fromCodePoint(10231) /* LONG LEFT RIGHT ARROW */,
  '&DoubleLongLeftArrow;': String.fromCodePoint(10232) /* LONG LEFTWARDS DOUBLE ARROW */,
  '&DoubleLongRightArrow;': String.fromCodePoint(10233) /* LONG RIGHTWARDS DOUBLE ARROW */,
  '&DoubleLongLeftRightArrow;': String.fromCodePoint(10234) /* LONG LEFT RIGHT DOUBLE ARROW */,
  '&longmapsto;': String.fromCodePoint(10236) /* LONG RIGHTWARDS ARROW FROM BAR */,
  '&dzigrarr;': String.fromCodePoint(10239) /* LONG RIGHTWARDS SQUIGGLE ARROW */,
  '&nvlArr;': String.fromCodePoint(10498) /* LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE */,
  '&nvrArr;': String.fromCodePoint(10499) /* RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE */,
  '&nvHarr;': String.fromCodePoint(10500) /* LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE */,
  '&Map;': String.fromCodePoint(10501) /* RIGHTWARDS TWO-HEADED ARROW FROM BAR */,
  '&lbarr;': String.fromCodePoint(10508) /* LEFTWARDS DOUBLE DASH ARROW */,
  '&bkarow;': String.fromCodePoint(10509) /* RIGHTWARDS DOUBLE DASH ARROW */,
  '&lBarr;': String.fromCodePoint(10510) /* LEFTWARDS TRIPLE DASH ARROW */,
  '&dbkarow;': String.fromCodePoint(10511) /* RIGHTWARDS TRIPLE DASH ARROW */,
  '&drbkarow;': String.fromCodePoint(10512) /* RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW */,
  '&DDotrahd;': String.fromCodePoint(10513) /* RIGHTWARDS ARROW WITH DOTTED STEM */,
  '&UpArrowBar;': String.fromCodePoint(10514) /* UPWARDS ARROW TO BAR */,
  '&DownArrowBar;': String.fromCodePoint(10515) /* DOWNWARDS ARROW TO BAR */,
  '&Rarrtl;': String.fromCodePoint(10518) /* RIGHTWARDS TWO-HEADED ARROW WITH TAIL */,
  '&latail;': String.fromCodePoint(10521) /* LEFTWARDS ARROW-TAIL */,
  '&ratail;': String.fromCodePoint(10522) /* RIGHTWARDS ARROW-TAIL */,
  '&lAtail;': String.fromCodePoint(10523) /* LEFTWARDS DOUBLE ARROW-TAIL */,
  '&rAtail;': String.fromCodePoint(10524) /* RIGHTWARDS DOUBLE ARROW-TAIL */,
  '&larrfs;': String.fromCodePoint(10525) /* LEFTWARDS ARROW TO BLACK DIAMOND */,
  '&rarrfs;': String.fromCodePoint(10526) /* RIGHTWARDS ARROW TO BLACK DIAMOND */,
  '&larrbfs;': String.fromCodePoint(10527) /* LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND */,
  '&rarrbfs;': String.fromCodePoint(10528) /* RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND */,
  '&nwarhk;': String.fromCodePoint(10531) /* NORTH WEST ARROW WITH HOOK */,
  '&nearhk;': String.fromCodePoint(10532) /* NORTH EAST ARROW WITH HOOK */,
  '&hksearow;': String.fromCodePoint(10533) /* SOUTH EAST ARROW WITH HOOK */,
  '&hkswarow;': String.fromCodePoint(10534) /* SOUTH WEST ARROW WITH HOOK */,
  '&nwnear;': String.fromCodePoint(10535) /* NORTH WEST ARROW AND NORTH EAST ARROW */,
  '&toea;': String.fromCodePoint(10536) /* NORTH EAST ARROW AND SOUTH EAST ARROW */,
  '&tosa;': String.fromCodePoint(10537) /* SOUTH EAST ARROW AND SOUTH WEST ARROW */,
  '&swnwar;': String.fromCodePoint(10538) /* SOUTH WEST ARROW AND NORTH WEST ARROW */,
  '&rarrc;': String.fromCodePoint(10547) /* WAVE ARROW POINTING DIRECTLY RIGHT */,
  '&cudarrr;': String.fromCodePoint(10549) /* ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS */,
  '&ldca;': String.fromCodePoint(10550) /* ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS */,
  '&rdca;': String.fromCodePoint(10551) /* ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS */,
  '&cudarrl;': String.fromCodePoint(10552) /* RIGHT-SIDE ARC CLOCKWISE ARROW */,
  '&larrpl;': String.fromCodePoint(10553) /* LEFT-SIDE ARC ANTICLOCKWISE ARROW */,
  '&curarrm;': String.fromCodePoint(10556) /* TOP ARC CLOCKWISE ARROW WITH MINUS */,
  '&cularrp;': String.fromCodePoint(10557) /* TOP ARC ANTICLOCKWISE ARROW WITH PLUS */,
  '&rarrpl;': String.fromCodePoint(10565) /* RIGHTWARDS ARROW WITH PLUS BELOW */,
  '&harrcir;': String.fromCodePoint(10568) /* LEFT RIGHT ARROW THROUGH SMALL CIRCLE */,
  '&Uarrocir;': String.fromCodePoint(10569) /* UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE */,
  '&lurdshar;': String.fromCodePoint(10570) /* LEFT BARB UP RIGHT BARB DOWN HARPOON */,
  '&ldrushar;': String.fromCodePoint(10571) /* LEFT BARB DOWN RIGHT BARB UP HARPOON */,
  '&LeftRightVector;': String.fromCodePoint(10574) /* LEFT BARB UP RIGHT BARB UP HARPOON */,
  '&RightUpDownVector;': String.fromCodePoint(10575) /* UP BARB RIGHT DOWN BARB RIGHT HARPOON */,
  '&DownLeftRightVector;': String.fromCodePoint(10576) /* LEFT BARB DOWN RIGHT BARB DOWN HARPOON */,
  '&LeftUpDownVector;': String.fromCodePoint(10577) /* UP BARB LEFT DOWN BARB LEFT HARPOON */,
  '&LeftVectorBar;': String.fromCodePoint(10578) /* LEFTWARDS HARPOON WITH BARB UP TO BAR */,
  '&RightVectorBar;': String.fromCodePoint(10579) /* RIGHTWARDS HARPOON WITH BARB UP TO BAR */,
  '&RightUpVectorBar;': String.fromCodePoint(10580) /* UPWARDS HARPOON WITH BARB RIGHT TO BAR */,
  '&RightDownVectorBar;': String.fromCodePoint(10581) /* DOWNWARDS HARPOON WITH BARB RIGHT TO BAR */,
  '&DownLeftVectorBar;': String.fromCodePoint(10582) /* LEFTWARDS HARPOON WITH BARB DOWN TO BAR */,
  '&DownRightVectorBar;': String.fromCodePoint(10583) /* RIGHTWARDS HARPOON WITH BARB DOWN TO BAR */,
  '&LeftUpVectorBar;': String.fromCodePoint(10584) /* UPWARDS HARPOON WITH BARB LEFT TO BAR */,
  '&LeftDownVectorBar;': String.fromCodePoint(10585) /* DOWNWARDS HARPOON WITH BARB LEFT TO BAR */,
  '&LeftTeeVector;': String.fromCodePoint(10586) /* LEFTWARDS HARPOON WITH BARB UP FROM BAR */,
  '&RightTeeVector;': String.fromCodePoint(10587) /* RIGHTWARDS HARPOON WITH BARB UP FROM BAR */,
  '&RightUpTeeVector;': String.fromCodePoint(10588) /* UPWARDS HARPOON WITH BARB RIGHT FROM BAR */,
  '&RightDownTeeVector;': String.fromCodePoint(10589) /* DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR */,
  '&DownLeftTeeVector;': String.fromCodePoint(10590) /* LEFTWARDS HARPOON WITH BARB DOWN FROM BAR */,
  '&DownRightTeeVector;': String.fromCodePoint(10591) /* RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR */,
  '&LeftUpTeeVector;': String.fromCodePoint(10592) /* UPWARDS HARPOON WITH BARB LEFT FROM BAR */,
  '&LeftDownTeeVector;': String.fromCodePoint(10593) /* DOWNWARDS HARPOON WITH BARB LEFT FROM BAR */,
  '&lHar;': String.fromCodePoint(10594) /* LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN */,
  '&uHar;': String.fromCodePoint(10595) /* UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT */,
  '&rHar;': String.fromCodePoint(10596) /* RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN */,
  '&dHar;': String.fromCodePoint(10597) /* DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT */,
  '&luruhar;': String.fromCodePoint(10598) /* LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP */,
  '&ldrdhar;': String.fromCodePoint(10599) /* LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN */,
  '&ruluhar;': String.fromCodePoint(10600) /* RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP */,
  '&rdldhar;': String.fromCodePoint(10601) /* RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN */,
  '&lharul;': String.fromCodePoint(10602) /* LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH */,
  '&llhard;': String.fromCodePoint(10603) /* LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH */,
  '&rharul;': String.fromCodePoint(10604) /* RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH */,
  '&lrhard;': String.fromCodePoint(10605) /* RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH */,
  '&UpEquilibrium;': String.fromCodePoint(10606) /* UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT */,
  '&ReverseUpEquilibrium;': String.fromCodePoint(10607) /* DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT */,
  '&RoundImplies;': String.fromCodePoint(10608) /* RIGHT DOUBLE ARROW WITH ROUNDED HEAD */,
  '&erarr;': String.fromCodePoint(10609) /* EQUALS SIGN ABOVE RIGHTWARDS ARROW */,
  '&simrarr;': String.fromCodePoint(10610) /* TILDE OPERATOR ABOVE RIGHTWARDS ARROW */,
  '&larrsim;': String.fromCodePoint(10611) /* LEFTWARDS ARROW ABOVE TILDE OPERATOR */,
  '&rarrsim;': String.fromCodePoint(10612) /* RIGHTWARDS ARROW ABOVE TILDE OPERATOR */,
  '&rarrap;': String.fromCodePoint(10613) /* RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO */,
  '&ltlarr;': String.fromCodePoint(10614) /* LESS-THAN ABOVE LEFTWARDS ARROW */,
  '&gtrarr;': String.fromCodePoint(10616) /* GREATER-THAN ABOVE RIGHTWARDS ARROW */,
  '&subrarr;': String.fromCodePoint(10617) /* SUBSET ABOVE RIGHTWARDS ARROW */,
  '&suplarr;': String.fromCodePoint(10619) /* SUPERSET ABOVE LEFTWARDS ARROW */,
  '&lfisht;': String.fromCodePoint(10620) /* LEFT FISH TAIL */,
  '&rfisht;': String.fromCodePoint(10621) /* RIGHT FISH TAIL */,
  '&ufisht;': String.fromCodePoint(10622) /* UP FISH TAIL */,
  '&dfisht;': String.fromCodePoint(10623) /* DOWN FISH TAIL */,
  '&lopar;': String.fromCodePoint(10629) /* LEFT WHITE PARENTHESIS */,
  '&ropar;': String.fromCodePoint(10630) /* RIGHT WHITE PARENTHESIS */,
  '&lbrke;': String.fromCodePoint(10635) /* LEFT SQUARE BRACKET WITH UNDERBAR */,
  '&rbrke;': String.fromCodePoint(10636) /* RIGHT SQUARE BRACKET WITH UNDERBAR */,
  '&lbrkslu;': String.fromCodePoint(10637) /* LEFT SQUARE BRACKET WITH TICK IN TOP CORNER */,
  '&rbrksld;': String.fromCodePoint(10638) /* RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER */,
  '&lbrksld;': String.fromCodePoint(10639) /* LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER */,
  '&rbrkslu;': String.fromCodePoint(10640) /* RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER */,
  '&langd;': String.fromCodePoint(10641) /* LEFT ANGLE BRACKET WITH DOT */,
  '&rangd;': String.fromCodePoint(10642) /* RIGHT ANGLE BRACKET WITH DOT */,
  '&lparlt;': String.fromCodePoint(10643) /* LEFT ARC LESS-THAN BRACKET */,
  '&rpargt;': String.fromCodePoint(10644) /* RIGHT ARC GREATER-THAN BRACKET */,
  '&gtlPar;': String.fromCodePoint(10645) /* DOUBLE LEFT ARC GREATER-THAN BRACKET */,
  '&ltrPar;': String.fromCodePoint(10646) /* DOUBLE RIGHT ARC LESS-THAN BRACKET */,
  '&vzigzag;': String.fromCodePoint(10650) /* VERTICAL ZIGZAG LINE */,
  '&vangrt;': String.fromCodePoint(10652) /* RIGHT ANGLE VARIANT WITH SQUARE */,
  '&angrtvbd;': String.fromCodePoint(10653) /* MEASURED RIGHT ANGLE WITH DOT */,
  '&ange;': String.fromCodePoint(10660) /* ANGLE WITH UNDERBAR */,
  '&range;': String.fromCodePoint(10661) /* REVERSED ANGLE WITH UNDERBAR */,
  '&dwangle;': String.fromCodePoint(10662) /* OBLIQUE ANGLE OPENING UP */,
  '&uwangle;': String.fromCodePoint(10663) /* OBLIQUE ANGLE OPENING DOWN */,
  '&angmsdaa;': String.fromCodePoint(10664) /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT */,
  '&angmsdab;': String.fromCodePoint(10665) /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT */,
  '&angmsdac;': String.fromCodePoint(10666) /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT */,
  '&angmsdad;': String.fromCodePoint(10667) /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT */,
  '&angmsdae;': String.fromCodePoint(10668) /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP */,
  '&angmsdaf;': String.fromCodePoint(10669) /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP */,
  '&angmsdag;': String.fromCodePoint(10670) /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN */,
  '&angmsdah;': String.fromCodePoint(10671) /* MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN */,
  '&bemptyv;': String.fromCodePoint(10672) /* REVERSED EMPTY SET */,
  '&demptyv;': String.fromCodePoint(10673) /* EMPTY SET WITH OVERBAR */,
  '&cemptyv;': String.fromCodePoint(10674) /* EMPTY SET WITH SMALL CIRCLE ABOVE */,
  '&raemptyv;': String.fromCodePoint(10675) /* EMPTY SET WITH RIGHT ARROW ABOVE */,
  '&laemptyv;': String.fromCodePoint(10676) /* EMPTY SET WITH LEFT ARROW ABOVE */,
  '&ohbar;': String.fromCodePoint(10677) /* CIRCLE WITH HORIZONTAL BAR */,
  '&omid;': String.fromCodePoint(10678) /* CIRCLED VERTICAL BAR */,
  '&opar;': String.fromCodePoint(10679) /* CIRCLED PARALLEL */,
  '&operp;': String.fromCodePoint(10681) /* CIRCLED PERPENDICULAR */,
  '&olcross;': String.fromCodePoint(10683) /* CIRCLE WITH SUPERIMPOSED X */,
  '&odsold;': String.fromCodePoint(10684) /* CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN */,
  '&olcir;': String.fromCodePoint(10686) /* CIRCLED WHITE BULLET */,
  '&ofcir;': String.fromCodePoint(10687) /* CIRCLED BULLET */,
  '&olt;': String.fromCodePoint(10688) /* CIRCLED LESS-THAN */,
  '&ogt;': String.fromCodePoint(10689) /* CIRCLED GREATER-THAN */,
  '&cirscir;': String.fromCodePoint(10690) /* CIRCLE WITH SMALL CIRCLE TO THE RIGHT */,
  '&cirE;': String.fromCodePoint(10691) /* CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT */,
  '&solb;': String.fromCodePoint(10692) /* SQUARED RISING DIAGONAL SLASH */,
  '&bsolb;': String.fromCodePoint(10693) /* SQUARED FALLING DIAGONAL SLASH */,
  '&boxbox;': String.fromCodePoint(10697) /* TWO JOINED SQUARES */,
  '&trisb;': String.fromCodePoint(10701) /* TRIANGLE WITH SERIFS AT BOTTOM */,
  '&rtriltri;': String.fromCodePoint(10702) /* RIGHT TRIANGLE ABOVE LEFT TRIANGLE */,
  '&LeftTriangleBar;': String.fromCodePoint(10703) /* LEFT TRIANGLE BESIDE VERTICAL BAR */,
  '&RightTriangleBar;': String.fromCodePoint(10704) /* VERTICAL BAR BESIDE RIGHT TRIANGLE */,
  '&race;': String.fromCodePoint(10714) /* LEFT DOUBLE WIGGLY FENCE */,
  '&iinfin;': String.fromCodePoint(10716) /* INCOMPLETE INFINITY */,
  '&infintie;': String.fromCodePoint(10717) /* TIE OVER INFINITY */,
  '&nvinfin;': String.fromCodePoint(10718) /* INFINITY NEGATED WITH VERTICAL BAR */,
  '&eparsl;': String.fromCodePoint(10723) /* EQUALS SIGN AND SLANTED PARALLEL */,
  '&smeparsl;': String.fromCodePoint(10724) /* EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE */,
  '&eqvparsl;': String.fromCodePoint(10725) /* IDENTICAL TO AND SLANTED PARALLEL */,
  '&blacklozenge;': String.fromCodePoint(10731) /* BLACK LOZENGE */,
  '&RuleDelayed;': String.fromCodePoint(10740) /* RULE-DELAYED */,
  '&dsol;': String.fromCodePoint(10742) /* SOLIDUS WITH OVERBAR */,
  '&bigodot;': String.fromCodePoint(10752) /* N-ARY CIRCLED DOT OPERATOR */,
  '&bigoplus;': String.fromCodePoint(10753) /* N-ARY CIRCLED PLUS OPERATOR */,
  '&bigotimes;': String.fromCodePoint(10754) /* N-ARY CIRCLED TIMES OPERATOR */,
  '&biguplus;': String.fromCodePoint(10756) /* N-ARY UNION OPERATOR WITH PLUS */,
  '&bigsqcup;': String.fromCodePoint(10758) /* N-ARY SQUARE UNION OPERATOR */,
  '&iiiint;': String.fromCodePoint(10764) /* QUADRUPLE INTEGRAL OPERATOR */,
  '&fpartint;': String.fromCodePoint(10765) /* FINITE PART INTEGRAL */,
  '&cirfnint;': String.fromCodePoint(10768) /* CIRCULATION FUNCTION */,
  '&awint;': String.fromCodePoint(10769) /* ANTICLOCKWISE INTEGRATION */,
  '&rppolint;': String.fromCodePoint(10770) /* LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE */,
  '&scpolint;': String.fromCodePoint(10771) /* LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE */,
  '&npolint;': String.fromCodePoint(10772) /* LINE INTEGRATION NOT INCLUDING THE POLE */,
  '&pointint;': String.fromCodePoint(10773) /* INTEGRAL AROUND A POINT OPERATOR */,
  '&quatint;': String.fromCodePoint(10774) /* QUATERNION INTEGRAL OPERATOR */,
  '&intlarhk;': String.fromCodePoint(10775) /* INTEGRAL WITH LEFTWARDS ARROW WITH HOOK */,
  '&pluscir;': String.fromCodePoint(10786) /* PLUS SIGN WITH SMALL CIRCLE ABOVE */,
  '&plusacir;': String.fromCodePoint(10787) /* PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE */,
  '&simplus;': String.fromCodePoint(10788) /* PLUS SIGN WITH TILDE ABOVE */,
  '&plusdu;': String.fromCodePoint(10789) /* PLUS SIGN WITH DOT BELOW */,
  '&plussim;': String.fromCodePoint(10790) /* PLUS SIGN WITH TILDE BELOW */,
  '&plustwo;': String.fromCodePoint(10791) /* PLUS SIGN WITH SUBSCRIPT TWO */,
  '&mcomma;': String.fromCodePoint(10793) /* MINUS SIGN WITH COMMA ABOVE */,
  '&minusdu;': String.fromCodePoint(10794) /* MINUS SIGN WITH DOT BELOW */,
  '&loplus;': String.fromCodePoint(10797) /* PLUS SIGN IN LEFT HALF CIRCLE */,
  '&roplus;': String.fromCodePoint(10798) /* PLUS SIGN IN RIGHT HALF CIRCLE */,
  '&Cross;': String.fromCodePoint(10799) /* VECTOR OR CROSS PRODUCT */,
  '&timesd;': String.fromCodePoint(10800) /* MULTIPLICATION SIGN WITH DOT ABOVE */,
  '&timesbar;': String.fromCodePoint(10801) /* MULTIPLICATION SIGN WITH UNDERBAR */,
  '&smashp;': String.fromCodePoint(10803) /* SMASH PRODUCT */,
  '&lotimes;': String.fromCodePoint(10804) /* MULTIPLICATION SIGN IN LEFT HALF CIRCLE */,
  '&rotimes;': String.fromCodePoint(10805) /* MULTIPLICATION SIGN IN RIGHT HALF CIRCLE */,
  '&otimesas;': String.fromCodePoint(10806) /* CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT */,
  '&Otimes;': String.fromCodePoint(10807) /* MULTIPLICATION SIGN IN DOUBLE CIRCLE */,
  '&odiv;': String.fromCodePoint(10808) /* CIRCLED DIVISION SIGN */,
  '&triplus;': String.fromCodePoint(10809) /* PLUS SIGN IN TRIANGLE */,
  '&triminus;': String.fromCodePoint(10810) /* MINUS SIGN IN TRIANGLE */,
  '&tritime;': String.fromCodePoint(10811) /* MULTIPLICATION SIGN IN TRIANGLE */,
  '&intprod;': String.fromCodePoint(10812) /* INTERIOR PRODUCT */,
  '&amalg;': String.fromCodePoint(10815) /* AMALGAMATION OR COPRODUCT */,
  '&capdot;': String.fromCodePoint(10816) /* INTERSECTION WITH DOT */,
  '&ncup;': String.fromCodePoint(10818) /* UNION WITH OVERBAR */,
  '&ncap;': String.fromCodePoint(10819) /* INTERSECTION WITH OVERBAR */,
  '&capand;': String.fromCodePoint(10820) /* INTERSECTION WITH LOGICAL AND */,
  '&cupor;': String.fromCodePoint(10821) /* UNION WITH LOGICAL OR */,
  '&cupcap;': String.fromCodePoint(10822) /* UNION ABOVE INTERSECTION */,
  '&capcup;': String.fromCodePoint(10823) /* INTERSECTION ABOVE UNION */,
  '&cupbrcap;': String.fromCodePoint(10824) /* UNION ABOVE BAR ABOVE INTERSECTION */,
  '&capbrcup;': String.fromCodePoint(10825) /* INTERSECTION ABOVE BAR ABOVE UNION */,
  '&cupcup;': String.fromCodePoint(10826) /* UNION BESIDE AND JOINED WITH UNION */,
  '&capcap;': String.fromCodePoint(10827) /* INTERSECTION BESIDE AND JOINED WITH INTERSECTION */,
  '&ccups;': String.fromCodePoint(10828) /* CLOSED UNION WITH SERIFS */,
  '&ccaps;': String.fromCodePoint(10829) /* CLOSED INTERSECTION WITH SERIFS */,
  '&ccupssm;': String.fromCodePoint(10832) /* CLOSED UNION WITH SERIFS AND SMASH PRODUCT */,
  '&And;': String.fromCodePoint(10835) /* DOUBLE LOGICAL AND */,
  '&Or;': String.fromCodePoint(10836) /* DOUBLE LOGICAL OR */,
  '&andand;': String.fromCodePoint(10837) /* TWO INTERSECTING LOGICAL AND */,
  '&oror;': String.fromCodePoint(10838) /* TWO INTERSECTING LOGICAL OR */,
  '&orslope;': String.fromCodePoint(10839) /* SLOPING LARGE OR */,
  '&andslope;': String.fromCodePoint(10840) /* SLOPING LARGE AND */,
  '&andv;': String.fromCodePoint(10842) /* LOGICAL AND WITH MIDDLE STEM */,
  '&orv;': String.fromCodePoint(10843) /* LOGICAL OR WITH MIDDLE STEM */,
  '&andd;': String.fromCodePoint(10844) /* LOGICAL AND WITH HORIZONTAL DASH */,
  '&ord;': String.fromCodePoint(10845) /* LOGICAL OR WITH HORIZONTAL DASH */,
  '&wedbar;': String.fromCodePoint(10847) /* LOGICAL AND WITH UNDERBAR */,
  '&sdote;': String.fromCodePoint(10854) /* EQUALS SIGN WITH DOT BELOW */,
  '&simdot;': String.fromCodePoint(10858) /* TILDE OPERATOR WITH DOT ABOVE */,
  '&congdot;': String.fromCodePoint(10861) /* CONGRUENT WITH DOT ABOVE */,
  '&easter;': String.fromCodePoint(10862) /* EQUALS WITH ASTERISK */,
  '&apacir;': String.fromCodePoint(10863) /* ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT */,
  '&apE;': String.fromCodePoint(10864) /* APPROXIMATELY EQUAL OR EQUAL TO */,
  '&eplus;': String.fromCodePoint(10865) /* EQUALS SIGN ABOVE PLUS SIGN */,
  '&pluse;': String.fromCodePoint(10866) /* PLUS SIGN ABOVE EQUALS SIGN */,
  '&Esim;': String.fromCodePoint(10867) /* EQUALS SIGN ABOVE TILDE OPERATOR */,
  '&Colone;': String.fromCodePoint(10868) /* DOUBLE COLON EQUAL */,
  '&Equal;': String.fromCodePoint(10869) /* TWO CONSECUTIVE EQUALS SIGNS */,
  '&ddotseq;': String.fromCodePoint(10871) /* EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW */,
  '&equivDD;': String.fromCodePoint(10872) /* EQUIVALENT WITH FOUR DOTS ABOVE */,
  '&ltcir;': String.fromCodePoint(10873) /* LESS-THAN WITH CIRCLE INSIDE */,
  '&gtcir;': String.fromCodePoint(10874) /* GREATER-THAN WITH CIRCLE INSIDE */,
  '&ltquest;': String.fromCodePoint(10875) /* LESS-THAN WITH QUESTION MARK ABOVE */,
  '&gtquest;': String.fromCodePoint(10876) /* GREATER-THAN WITH QUESTION MARK ABOVE */,
  '&leqslant;': String.fromCodePoint(10877) /* LESS-THAN OR SLANTED EQUAL TO */,
  '&geqslant;': String.fromCodePoint(10878) /* GREATER-THAN OR SLANTED EQUAL TO */,
  '&lesdot;': String.fromCodePoint(10879) /* LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE */,
  '&gesdot;': String.fromCodePoint(10880) /* GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE */,
  '&lesdoto;': String.fromCodePoint(10881) /* LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE */,
  '&gesdoto;': String.fromCodePoint(10882) /* GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE */,
  '&lesdotor;': String.fromCodePoint(10883) /* LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT */,
  '&gesdotol;': String.fromCodePoint(10884) /* GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT */,
  '&lessapprox;': String.fromCodePoint(10885) /* LESS-THAN OR APPROXIMATE */,
  '&gtrapprox;': String.fromCodePoint(10886) /* GREATER-THAN OR APPROXIMATE */,
  '&lneq;': String.fromCodePoint(10887) /* LESS-THAN AND SINGLE-LINE NOT EQUAL TO */,
  '&gneq;': String.fromCodePoint(10888) /* GREATER-THAN AND SINGLE-LINE NOT EQUAL TO */,
  '&lnapprox;': String.fromCodePoint(10889) /* LESS-THAN AND NOT APPROXIMATE */,
  '&gnapprox;': String.fromCodePoint(10890) /* GREATER-THAN AND NOT APPROXIMATE */,
  '&lesseqqgtr;': String.fromCodePoint(10891) /* LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN */,
  '&gtreqqless;': String.fromCodePoint(10892) /* GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN */,
  '&lsime;': String.fromCodePoint(10893) /* LESS-THAN ABOVE SIMILAR OR EQUAL */,
  '&gsime;': String.fromCodePoint(10894) /* GREATER-THAN ABOVE SIMILAR OR EQUAL */,
  '&lsimg;': String.fromCodePoint(10895) /* LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN */,
  '&gsiml;': String.fromCodePoint(10896) /* GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN */,
  '&lgE;': String.fromCodePoint(10897) /* LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL */,
  '&glE;': String.fromCodePoint(10898) /* GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL */,
  '&lesges;': String.fromCodePoint(10899) /* LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL */,
  '&gesles;': String.fromCodePoint(10900) /* GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL */,
  '&eqslantless;': String.fromCodePoint(10901) /* SLANTED EQUAL TO OR LESS-THAN */,
  '&eqslantgtr;': String.fromCodePoint(10902) /* SLANTED EQUAL TO OR GREATER-THAN */,
  '&elsdot;': String.fromCodePoint(10903) /* SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE */,
  '&egsdot;': String.fromCodePoint(10904) /* SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE */,
  '&el;': String.fromCodePoint(10905) /* DOUBLE-LINE EQUAL TO OR LESS-THAN */,
  '&eg;': String.fromCodePoint(10906) /* DOUBLE-LINE EQUAL TO OR GREATER-THAN */,
  '&siml;': String.fromCodePoint(10909) /* SIMILAR OR LESS-THAN */,
  '&simg;': String.fromCodePoint(10910) /* SIMILAR OR GREATER-THAN */,
  '&simlE;': String.fromCodePoint(10911) /* SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN */,
  '&simgE;': String.fromCodePoint(10912) /* SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN */,
  '&LessLess;': String.fromCodePoint(10913) /* DOUBLE NESTED LESS-THAN */,
  '&GreaterGreater;': String.fromCodePoint(10914) /* DOUBLE NESTED GREATER-THAN */,
  '&glj;': String.fromCodePoint(10916) /* GREATER-THAN OVERLAPPING LESS-THAN */,
  '&gla;': String.fromCodePoint(10917) /* GREATER-THAN BESIDE LESS-THAN */,
  '&ltcc;': String.fromCodePoint(10918) /* LESS-THAN CLOSED BY CURVE */,
  '&gtcc;': String.fromCodePoint(10919) /* GREATER-THAN CLOSED BY CURVE */,
  '&lescc;': String.fromCodePoint(10920) /* LESS-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL */,
  '&gescc;': String.fromCodePoint(10921) /* GREATER-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL */,
  '&smt;': String.fromCodePoint(10922) /* SMALLER THAN */,
  '&lat;': String.fromCodePoint(10923) /* LARGER THAN */,
  '&smte;': String.fromCodePoint(10924) /* SMALLER THAN OR EQUAL TO */,
  '&late;': String.fromCodePoint(10925) /* LARGER THAN OR EQUAL TO */,
  '&bumpE;': String.fromCodePoint(10926) /* EQUALS SIGN WITH BUMPY ABOVE */,
  '&PrecedesEqual;': String.fromCodePoint(10927) /* PRECEDES ABOVE SINGLE-LINE EQUALS SIGN */,
  '&SucceedsEqual;': String.fromCodePoint(10928) /* SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN */,
  '&prE;': String.fromCodePoint(10931) /* PRECEDES ABOVE EQUALS SIGN */,
  '&scE;': String.fromCodePoint(10932) /* SUCCEEDS ABOVE EQUALS SIGN */,
  '&precneqq;': String.fromCodePoint(10933) /* PRECEDES ABOVE NOT EQUAL TO */,
  '&succneqq;': String.fromCodePoint(10934) /* SUCCEEDS ABOVE NOT EQUAL TO */,
  '&precapprox;': String.fromCodePoint(10935) /* PRECEDES ABOVE ALMOST EQUAL TO */,
  '&succapprox;': String.fromCodePoint(10936) /* SUCCEEDS ABOVE ALMOST EQUAL TO */,
  '&precnapprox;': String.fromCodePoint(10937) /* PRECEDES ABOVE NOT ALMOST EQUAL TO */,
  '&succnapprox;': String.fromCodePoint(10938) /* SUCCEEDS ABOVE NOT ALMOST EQUAL TO */,
  '&Pr;': String.fromCodePoint(10939) /* DOUBLE PRECEDES */,
  '&Sc;': String.fromCodePoint(10940) /* DOUBLE SUCCEEDS */,
  '&subdot;': String.fromCodePoint(10941) /* SUBSET WITH DOT */,
  '&supdot;': String.fromCodePoint(10942) /* SUPERSET WITH DOT */,
  '&subplus;': String.fromCodePoint(10943) /* SUBSET WITH PLUS SIGN BELOW */,
  '&supplus;': String.fromCodePoint(10944) /* SUPERSET WITH PLUS SIGN BELOW */,
  '&submult;': String.fromCodePoint(10945) /* SUBSET WITH MULTIPLICATION SIGN BELOW */,
  '&supmult;': String.fromCodePoint(10946) /* SUPERSET WITH MULTIPLICATION SIGN BELOW */,
  '&subedot;': String.fromCodePoint(10947) /* SUBSET OF OR EQUAL TO WITH DOT ABOVE */,
  '&supedot;': String.fromCodePoint(10948) /* SUPERSET OF OR EQUAL TO WITH DOT ABOVE */,
  '&subseteqq;': String.fromCodePoint(10949) /* SUBSET OF ABOVE EQUALS SIGN */,
  '&supseteqq;': String.fromCodePoint(10950) /* SUPERSET OF ABOVE EQUALS SIGN */,
  '&subsim;': String.fromCodePoint(10951) /* SUBSET OF ABOVE TILDE OPERATOR */,
  '&supsim;': String.fromCodePoint(10952) /* SUPERSET OF ABOVE TILDE OPERATOR */,
  '&subsetneqq;': String.fromCodePoint(10955) /* SUBSET OF ABOVE NOT EQUAL TO */,
  '&supsetneqq;': String.fromCodePoint(10956) /* SUPERSET OF ABOVE NOT EQUAL TO */,
  '&csub;': String.fromCodePoint(10959) /* CLOSED SUBSET */,
  '&csup;': String.fromCodePoint(10960) /* CLOSED SUPERSET */,
  '&csube;': String.fromCodePoint(10961) /* CLOSED SUBSET OR EQUAL TO */,
  '&csupe;': String.fromCodePoint(10962) /* CLOSED SUPERSET OR EQUAL TO */,
  '&subsup;': String.fromCodePoint(10963) /* SUBSET ABOVE SUPERSET */,
  '&supsub;': String.fromCodePoint(10964) /* SUPERSET ABOVE SUBSET */,
  '&subsub;': String.fromCodePoint(10965) /* SUBSET ABOVE SUBSET */,
  '&supsup;': String.fromCodePoint(10966) /* SUPERSET ABOVE SUPERSET */,
  '&suphsub;': String.fromCodePoint(10967) /* SUPERSET BESIDE SUBSET */,
  '&supdsub;': String.fromCodePoint(10968) /* SUPERSET BESIDE AND JOINED BY DASH WITH SUBSET */,
  '&forkv;': String.fromCodePoint(10969) /* ELEMENT OF OPENING DOWNWARDS */,
  '&topfork;': String.fromCodePoint(10970) /* PITCHFORK WITH TEE TOP */,
  '&mlcp;': String.fromCodePoint(10971) /* TRANSVERSAL INTERSECTION */,
  '&DoubleLeftTee;': String.fromCodePoint(10980) /* VERTICAL BAR DOUBLE LEFT TURNSTILE */,
  '&Vdashl;': String.fromCodePoint(10982) /* LONG DASH FROM LEFT MEMBER OF DOUBLE VERTICAL */,
  '&Barv;': String.fromCodePoint(10983) /* SHORT DOWN TACK WITH OVERBAR */,
  '&vBar;': String.fromCodePoint(10984) /* SHORT UP TACK WITH UNDERBAR */,
  '&vBarv;': String.fromCodePoint(10985) /* SHORT UP TACK ABOVE SHORT DOWN TACK */,
  '&Vbar;': String.fromCodePoint(10987) /* DOUBLE UP TACK */,
  '&Not;': String.fromCodePoint(10988) /* DOUBLE STROKE NOT SIGN */,
  '&bNot;': String.fromCodePoint(10989) /* REVERSED DOUBLE STROKE NOT SIGN */,
  '&rnmid;': String.fromCodePoint(10990) /* DOES NOT DIVIDE WITH REVERSED NEGATION SLASH */,
  '&cirmid;': String.fromCodePoint(10991) /* VERTICAL LINE WITH CIRCLE ABOVE */,
  '&midcir;': String.fromCodePoint(10992) /* VERTICAL LINE WITH CIRCLE BELOW */,
  '&topcir;': String.fromCodePoint(10993) /* DOWN TACK WITH CIRCLE BELOW */,
  '&nhpar;': String.fromCodePoint(10994) /* PARALLEL WITH HORIZONTAL STROKE */,
  '&parsim;': String.fromCodePoint(10995) /* PARALLEL WITH TILDE OPERATOR */,
  '&parsl;': String.fromCodePoint(11005) /* DOUBLE SOLIDUS OPERATOR */,
  '&fflig;': String.fromCodePoint(64256) /* LATIN SMALL LIGATURE FF */,
  '&filig;': String.fromCodePoint(64257) /* LATIN SMALL LIGATURE FI */,
  '&fllig;': String.fromCodePoint(64258) /* LATIN SMALL LIGATURE FL */,
  '&ffilig;': String.fromCodePoint(64259) /* LATIN SMALL LIGATURE FFI */,
  '&ffllig;': String.fromCodePoint(64260) /* LATIN SMALL LIGATURE FFL */,
  '&Ascr;': String.fromCodePoint(119964) /* MATHEMATICAL SCRIPT CAPITAL A */,
  '&Cscr;': String.fromCodePoint(119966) /* MATHEMATICAL SCRIPT CAPITAL C */,
  '&Dscr;': String.fromCodePoint(119967) /* MATHEMATICAL SCRIPT CAPITAL D */,
  '&Gscr;': String.fromCodePoint(119970) /* MATHEMATICAL SCRIPT CAPITAL G */,
  '&Jscr;': String.fromCodePoint(119973) /* MATHEMATICAL SCRIPT CAPITAL J */,
  '&Kscr;': String.fromCodePoint(119974) /* MATHEMATICAL SCRIPT CAPITAL K */,
  '&Nscr;': String.fromCodePoint(119977) /* MATHEMATICAL SCRIPT CAPITAL N */,
  '&Oscr;': String.fromCodePoint(119978) /* MATHEMATICAL SCRIPT CAPITAL O */,
  '&Pscr;': String.fromCodePoint(119979) /* MATHEMATICAL SCRIPT CAPITAL P */,
  '&Qscr;': String.fromCodePoint(119980) /* MATHEMATICAL SCRIPT CAPITAL Q */,
  '&Sscr;': String.fromCodePoint(119982) /* MATHEMATICAL SCRIPT CAPITAL S */,
  '&Tscr;': String.fromCodePoint(119983) /* MATHEMATICAL SCRIPT CAPITAL T */,
  '&Uscr;': String.fromCodePoint(119984) /* MATHEMATICAL SCRIPT CAPITAL U */,
  '&Vscr;': String.fromCodePoint(119985) /* MATHEMATICAL SCRIPT CAPITAL V */,
  '&Wscr;': String.fromCodePoint(119986) /* MATHEMATICAL SCRIPT CAPITAL W */,
  '&Xscr;': String.fromCodePoint(119987) /* MATHEMATICAL SCRIPT CAPITAL X */,
  '&Yscr;': String.fromCodePoint(119988) /* MATHEMATICAL SCRIPT CAPITAL Y */,
  '&Zscr;': String.fromCodePoint(119989) /* MATHEMATICAL SCRIPT CAPITAL Z */,
  '&ascr;': String.fromCodePoint(119990) /* MATHEMATICAL SCRIPT SMALL A */,
  '&bscr;': String.fromCodePoint(119991) /* MATHEMATICAL SCRIPT SMALL B */,
  '&cscr;': String.fromCodePoint(119992) /* MATHEMATICAL SCRIPT SMALL C */,
  '&dscr;': String.fromCodePoint(119993) /* MATHEMATICAL SCRIPT SMALL D */,
  '&fscr;': String.fromCodePoint(119995) /* MATHEMATICAL SCRIPT SMALL F */,
  '&hscr;': String.fromCodePoint(119997) /* MATHEMATICAL SCRIPT SMALL H */,
  '&iscr;': String.fromCodePoint(119998) /* MATHEMATICAL SCRIPT SMALL I */,
  '&jscr;': String.fromCodePoint(119999) /* MATHEMATICAL SCRIPT SMALL J */,
  '&kscr;': String.fromCodePoint(120000) /* MATHEMATICAL SCRIPT SMALL K */,
  '&lscr;': String.fromCodePoint(120001) /* MATHEMATICAL SCRIPT SMALL L */,
  '&mscr;': String.fromCodePoint(120002) /* MATHEMATICAL SCRIPT SMALL M */,
  '&nscr;': String.fromCodePoint(120003) /* MATHEMATICAL SCRIPT SMALL N */,
  '&pscr;': String.fromCodePoint(120005) /* MATHEMATICAL SCRIPT SMALL P */,
  '&qscr;': String.fromCodePoint(120006) /* MATHEMATICAL SCRIPT SMALL Q */,
  '&rscr;': String.fromCodePoint(120007) /* MATHEMATICAL SCRIPT SMALL R */,
  '&sscr;': String.fromCodePoint(120008) /* MATHEMATICAL SCRIPT SMALL S */,
  '&tscr;': String.fromCodePoint(120009) /* MATHEMATICAL SCRIPT SMALL T */,
  '&uscr;': String.fromCodePoint(120010) /* MATHEMATICAL SCRIPT SMALL U */,
  '&vscr;': String.fromCodePoint(120011) /* MATHEMATICAL SCRIPT SMALL V */,
  '&wscr;': String.fromCodePoint(120012) /* MATHEMATICAL SCRIPT SMALL W */,
  '&xscr;': String.fromCodePoint(120013) /* MATHEMATICAL SCRIPT SMALL X */,
  '&yscr;': String.fromCodePoint(120014) /* MATHEMATICAL SCRIPT SMALL Y */,
  '&zscr;': String.fromCodePoint(120015) /* MATHEMATICAL SCRIPT SMALL Z */,
  '&Afr;': String.fromCodePoint(120068) /* MATHEMATICAL FRAKTUR CAPITAL A */,
  '&Bfr;': String.fromCodePoint(120069) /* MATHEMATICAL FRAKTUR CAPITAL B */,
  '&Dfr;': String.fromCodePoint(120071) /* MATHEMATICAL FRAKTUR CAPITAL D */,
  '&Efr;': String.fromCodePoint(120072) /* MATHEMATICAL FRAKTUR CAPITAL E */,
  '&Ffr;': String.fromCodePoint(120073) /* MATHEMATICAL FRAKTUR CAPITAL F */,
  '&Gfr;': String.fromCodePoint(120074) /* MATHEMATICAL FRAKTUR CAPITAL G */,
  '&Jfr;': String.fromCodePoint(120077) /* MATHEMATICAL FRAKTUR CAPITAL J */,
  '&Kfr;': String.fromCodePoint(120078) /* MATHEMATICAL FRAKTUR CAPITAL K */,
  '&Lfr;': String.fromCodePoint(120079) /* MATHEMATICAL FRAKTUR CAPITAL L */,
  '&Mfr;': String.fromCodePoint(120080) /* MATHEMATICAL FRAKTUR CAPITAL M */,
  '&Nfr;': String.fromCodePoint(120081) /* MATHEMATICAL FRAKTUR CAPITAL N */,
  '&Ofr;': String.fromCodePoint(120082) /* MATHEMATICAL FRAKTUR CAPITAL O */,
  '&Pfr;': String.fromCodePoint(120083) /* MATHEMATICAL FRAKTUR CAPITAL P */,
  '&Qfr;': String.fromCodePoint(120084) /* MATHEMATICAL FRAKTUR CAPITAL Q */,
  '&Sfr;': String.fromCodePoint(120086) /* MATHEMATICAL FRAKTUR CAPITAL S */,
  '&Tfr;': String.fromCodePoint(120087) /* MATHEMATICAL FRAKTUR CAPITAL T */,
  '&Ufr;': String.fromCodePoint(120088) /* MATHEMATICAL FRAKTUR CAPITAL U */,
  '&Vfr;': String.fromCodePoint(120089) /* MATHEMATICAL FRAKTUR CAPITAL V */,
  '&Wfr;': String.fromCodePoint(120090) /* MATHEMATICAL FRAKTUR CAPITAL W */,
  '&Xfr;': String.fromCodePoint(120091) /* MATHEMATICAL FRAKTUR CAPITAL X */,
  '&Yfr;': String.fromCodePoint(120092) /* MATHEMATICAL FRAKTUR CAPITAL Y */,
  '&afr;': String.fromCodePoint(120094) /* MATHEMATICAL FRAKTUR SMALL A */,
  '&bfr;': String.fromCodePoint(120095) /* MATHEMATICAL FRAKTUR SMALL B */,
  '&cfr;': String.fromCodePoint(120096) /* MATHEMATICAL FRAKTUR SMALL C */,
  '&dfr;': String.fromCodePoint(120097) /* MATHEMATICAL FRAKTUR SMALL D */,
  '&efr;': String.fromCodePoint(120098) /* MATHEMATICAL FRAKTUR SMALL E */,
  '&ffr;': String.fromCodePoint(120099) /* MATHEMATICAL FRAKTUR SMALL F */,
  '&gfr;': String.fromCodePoint(120100) /* MATHEMATICAL FRAKTUR SMALL G */,
  '&hfr;': String.fromCodePoint(120101) /* MATHEMATICAL FRAKTUR SMALL H */,
  '&ifr;': String.fromCodePoint(120102) /* MATHEMATICAL FRAKTUR SMALL I */,
  '&jfr;': String.fromCodePoint(120103) /* MATHEMATICAL FRAKTUR SMALL J */,
  '&kfr;': String.fromCodePoint(120104) /* MATHEMATICAL FRAKTUR SMALL K */,
  '&lfr;': String.fromCodePoint(120105) /* MATHEMATICAL FRAKTUR SMALL L */,
  '&mfr;': String.fromCodePoint(120106) /* MATHEMATICAL FRAKTUR SMALL M */,
  '&nfr;': String.fromCodePoint(120107) /* MATHEMATICAL FRAKTUR SMALL N */,
  '&ofr;': String.fromCodePoint(120108) /* MATHEMATICAL FRAKTUR SMALL O */,
  '&pfr;': String.fromCodePoint(120109) /* MATHEMATICAL FRAKTUR SMALL P */,
  '&qfr;': String.fromCodePoint(120110) /* MATHEMATICAL FRAKTUR SMALL Q */,
  '&rfr;': String.fromCodePoint(120111) /* MATHEMATICAL FRAKTUR SMALL R */,
  '&sfr;': String.fromCodePoint(120112) /* MATHEMATICAL FRAKTUR SMALL S */,
  '&tfr;': String.fromCodePoint(120113) /* MATHEMATICAL FRAKTUR SMALL T */,
  '&ufr;': String.fromCodePoint(120114) /* MATHEMATICAL FRAKTUR SMALL U */,
  '&vfr;': String.fromCodePoint(120115) /* MATHEMATICAL FRAKTUR SMALL V */,
  '&wfr;': String.fromCodePoint(120116) /* MATHEMATICAL FRAKTUR SMALL W */,
  '&xfr;': String.fromCodePoint(120117) /* MATHEMATICAL FRAKTUR SMALL X */,
  '&yfr;': String.fromCodePoint(120118) /* MATHEMATICAL FRAKTUR SMALL Y */,
  '&zfr;': String.fromCodePoint(120119) /* MATHEMATICAL FRAKTUR SMALL Z */,
  '&Aopf;': String.fromCodePoint(120120) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL A */,
  '&Bopf;': String.fromCodePoint(120121) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL B */,
  '&Dopf;': String.fromCodePoint(120123) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL D */,
  '&Eopf;': String.fromCodePoint(120124) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL E */,
  '&Fopf;': String.fromCodePoint(120125) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL F */,
  '&Gopf;': String.fromCodePoint(120126) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL G */,
  '&Iopf;': String.fromCodePoint(120128) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL I */,
  '&Jopf;': String.fromCodePoint(120129) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL J */,
  '&Kopf;': String.fromCodePoint(120130) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL K */,
  '&Lopf;': String.fromCodePoint(120131) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL L */,
  '&Mopf;': String.fromCodePoint(120132) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL M */,
  '&Oopf;': String.fromCodePoint(120134) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL O */,
  '&Sopf;': String.fromCodePoint(120138) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL S */,
  '&Topf;': String.fromCodePoint(120139) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL T */,
  '&Uopf;': String.fromCodePoint(120140) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL U */,
  '&Vopf;': String.fromCodePoint(120141) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL V */,
  '&Wopf;': String.fromCodePoint(120142) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL W */,
  '&Xopf;': String.fromCodePoint(120143) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL X */,
  '&Yopf;': String.fromCodePoint(120144) /* MATHEMATICAL DOUBLE-STRUCK CAPITAL Y */,
  '&aopf;': String.fromCodePoint(120146) /* MATHEMATICAL DOUBLE-STRUCK SMALL A */,
  '&bopf;': String.fromCodePoint(120147) /* MATHEMATICAL DOUBLE-STRUCK SMALL B */,
  '&copf;': String.fromCodePoint(120148) /* MATHEMATICAL DOUBLE-STRUCK SMALL C */,
  '&dopf;': String.fromCodePoint(120149) /* MATHEMATICAL DOUBLE-STRUCK SMALL D */,
  '&eopf;': String.fromCodePoint(120150) /* MATHEMATICAL DOUBLE-STRUCK SMALL E */,
  '&fopf;': String.fromCodePoint(120151) /* MATHEMATICAL DOUBLE-STRUCK SMALL F */,
  '&gopf;': String.fromCodePoint(120152) /* MATHEMATICAL DOUBLE-STRUCK SMALL G */,
  '&hopf;': String.fromCodePoint(120153) /* MATHEMATICAL DOUBLE-STRUCK SMALL H */,
  '&iopf;': String.fromCodePoint(120154) /* MATHEMATICAL DOUBLE-STRUCK SMALL I */,
  '&jopf;': String.fromCodePoint(120155) /* MATHEMATICAL DOUBLE-STRUCK SMALL J */,
  '&kopf;': String.fromCodePoint(120156) /* MATHEMATICAL DOUBLE-STRUCK SMALL K */,
  '&lopf;': String.fromCodePoint(120157) /* MATHEMATICAL DOUBLE-STRUCK SMALL L */,
  '&mopf;': String.fromCodePoint(120158) /* MATHEMATICAL DOUBLE-STRUCK SMALL M */,
  '&nopf;': String.fromCodePoint(120159) /* MATHEMATICAL DOUBLE-STRUCK SMALL N */,
  '&oopf;': String.fromCodePoint(120160) /* MATHEMATICAL DOUBLE-STRUCK SMALL O */,
  '&popf;': String.fromCodePoint(120161) /* MATHEMATICAL DOUBLE-STRUCK SMALL P */,
  '&qopf;': String.fromCodePoint(120162) /* MATHEMATICAL DOUBLE-STRUCK SMALL Q */,
  '&ropf;': String.fromCodePoint(120163) /* MATHEMATICAL DOUBLE-STRUCK SMALL R */,
  '&sopf;': String.fromCodePoint(120164) /* MATHEMATICAL DOUBLE-STRUCK SMALL S */,
  '&topf;': String.fromCodePoint(120165) /* MATHEMATICAL DOUBLE-STRUCK SMALL T */,
  '&uopf;': String.fromCodePoint(120166) /* MATHEMATICAL DOUBLE-STRUCK SMALL U */,
  '&vopf;': String.fromCodePoint(120167) /* MATHEMATICAL DOUBLE-STRUCK SMALL V */,
  '&wopf;': String.fromCodePoint(120168) /* MATHEMATICAL DOUBLE-STRUCK SMALL W */,
  '&xopf;': String.fromCodePoint(120169) /* MATHEMATICAL DOUBLE-STRUCK SMALL X */,
  '&yopf;': String.fromCodePoint(120170) /* MATHEMATICAL DOUBLE-STRUCK SMALL Y */,
  '&zopf;': String.fromCodePoint(120171) /* MATHEMATICAL DOUBLE-STRUCK SMALL Z */
}
