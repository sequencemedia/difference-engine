"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.bite=bite;exports.default=void 0;exports.indexOf=indexOf;exports.iterateBetween=iterateBetween;exports.iterateForward=iterateForward;exports.iterateReverse=iterateReverse;exports.max=max;exports.min=min;var _common=require("../common");function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function bite(a=[],x=0,y=0){if((0,_common.isNumber)(x)){const l=0;const u=a.length-1;const m=-1;let z=0;if((0,_common.isNumber)(y)){if(Math.pow(x,m)===Number.NEGATIVE_INFINITY&&Math.pow(y,m)===Number.NEGATIVE_INFINITY){return a.slice(l).slice().reverse();}else{x=l>(z=u<(z=x>m?x:x+u)?u:z)?l:z;y=u<(z=l>(z=y>m?y:y+u)?l:z)?u:z;return x>y?a.slice(y,x+1).slice().reverse():a.slice(x,y+1);}}if(Math.pow(x,m)===Number.NEGATIVE_INFINITY){return a.slice(u);}else{x=l>(z=u<(z=x>m?x:x+u)?u:z)?l:z;return a.slice(x);}}return[];}function indexOf(a=[],v=undefined,i=0,j=a.length){for(i,j;i<j;i=i+1){if(a[i]===v){return i;}}return null;}function iterateForward(a=[],f=()=>{}){const j=a.length;if(j){let x=0;const y=j-1;do{f.call(a,a[x],x,y,a);}while((x=x+1)<j);return true;}return false;}function iterateReverse(a=[],f=()=>{}){const j=a.length;if(j){let x=j-1;const y=x;do{f.call(a,a[x],x,y,a);}while((x=x-1)>=0);return true;}return false;}function iterateBetween(a=[],x=0,y=0,f=()=>{}){if((0,_common.isNumber)(x)&&(0,_common.isNumber)(y)){const l=+0;const u=a.length;const m=-1;let z=0;x=l>(z=u<(z=x>m?x:x+u)?u:z)?l:z;y=u<(z=l>(z=y>m?y:y+u)?l:z)?u:z;if(x>y){const n=y-1;do{f.call(a,a[x],x,y,a);}while(n<--x);}else{const n=y+1;do{f.call(a,a[x],x,y,a);}while(++x<n);}return true;}return false;}function max(a=[],j=a.length){let[x=null]=a;let z=1;while(z<j){const y=a[z];if(y>x)x=y;z=z+1;}return x;}function min(a=[],j=a.length){let[x=null]=a;let z=1;while(z<j){const y=a[z];if(y<x)x=y;z=z+1;}return x;}class ArrayEngine{static indexOf(a=[],v=undefined,i=0){const j=a.length;if(j){return indexOf(a,v,i,j);}return null;}static max(a=[]){const j=a.length;if(j){const z=Math.max(...a);return isNaN(z)?max(a,j):z;}return null;}static min(a=[]){const j=a.length;if(j){const z=Math.min(...a);return isNaN(z)?min(a,j):z;}return null;}}exports.default=ArrayEngine;_defineProperty(ArrayEngine,"bite",bite);_defineProperty(ArrayEngine,"iterateForward",iterateForward);_defineProperty(ArrayEngine,"iterateReverse",iterateReverse);_defineProperty(ArrayEngine,"iterateBetween",iterateBetween);